
FW91DanielPlata.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d74  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001ebf0  08007f28  08007f28  00017f28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08026b18  08026b18  00040078  2**0
                  CONTENTS
  4 .ARM          00000008  08026b18  08026b18  00036b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08026b20  08026b20  00040078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08026b20  08026b20  00036b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08026b24  08026b24  00036b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08026b28  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040078  2**0
                  CONTENTS
 10 .bss          0000017c  20000078  20000078  00040078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200001f4  200001f4  00040078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040078  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011cd8  00000000  00000000  000400a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000027b2  00000000  00000000  00051d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef8  00000000  00000000  00054538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000de0  00000000  00000000  00055430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026021  00000000  00000000  00056210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000130c2  00000000  00000000  0007c231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dcde9  00000000  00000000  0008f2f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016c0dc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b30  00000000  00000000  0016c12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007f0c 	.word	0x08007f0c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08007f0c 	.word	0x08007f0c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_d2iz>:
 8000b4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b54:	d215      	bcs.n	8000b82 <__aeabi_d2iz+0x36>
 8000b56:	d511      	bpl.n	8000b7c <__aeabi_d2iz+0x30>
 8000b58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b60:	d912      	bls.n	8000b88 <__aeabi_d2iz+0x3c>
 8000b62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b72:	fa23 f002 	lsr.w	r0, r3, r2
 8000b76:	bf18      	it	ne
 8000b78:	4240      	negne	r0, r0
 8000b7a:	4770      	bx	lr
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b86:	d105      	bne.n	8000b94 <__aeabi_d2iz+0x48>
 8000b88:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	bf08      	it	eq
 8000b8e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop

08000b9c <__aeabi_uldivmod>:
 8000b9c:	b953      	cbnz	r3, 8000bb4 <__aeabi_uldivmod+0x18>
 8000b9e:	b94a      	cbnz	r2, 8000bb4 <__aeabi_uldivmod+0x18>
 8000ba0:	2900      	cmp	r1, #0
 8000ba2:	bf08      	it	eq
 8000ba4:	2800      	cmpeq	r0, #0
 8000ba6:	bf1c      	itt	ne
 8000ba8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bac:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb0:	f000 b974 	b.w	8000e9c <__aeabi_idiv0>
 8000bb4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bbc:	f000 f806 	bl	8000bcc <__udivmoddi4>
 8000bc0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc8:	b004      	add	sp, #16
 8000bca:	4770      	bx	lr

08000bcc <__udivmoddi4>:
 8000bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd0:	9d08      	ldr	r5, [sp, #32]
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	468e      	mov	lr, r1
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d14d      	bne.n	8000c76 <__udivmoddi4+0xaa>
 8000bda:	428a      	cmp	r2, r1
 8000bdc:	4694      	mov	ip, r2
 8000bde:	d969      	bls.n	8000cb4 <__udivmoddi4+0xe8>
 8000be0:	fab2 f282 	clz	r2, r2
 8000be4:	b152      	cbz	r2, 8000bfc <__udivmoddi4+0x30>
 8000be6:	fa01 f302 	lsl.w	r3, r1, r2
 8000bea:	f1c2 0120 	rsb	r1, r2, #32
 8000bee:	fa20 f101 	lsr.w	r1, r0, r1
 8000bf2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bf6:	ea41 0e03 	orr.w	lr, r1, r3
 8000bfa:	4094      	lsls	r4, r2
 8000bfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c00:	0c21      	lsrs	r1, r4, #16
 8000c02:	fbbe f6f8 	udiv	r6, lr, r8
 8000c06:	fa1f f78c 	uxth.w	r7, ip
 8000c0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c12:	fb06 f107 	mul.w	r1, r6, r7
 8000c16:	4299      	cmp	r1, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x64>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c22:	f080 811f 	bcs.w	8000e64 <__udivmoddi4+0x298>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 811c 	bls.w	8000e64 <__udivmoddi4+0x298>
 8000c2c:	3e02      	subs	r6, #2
 8000c2e:	4463      	add	r3, ip
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c38:	fb08 3310 	mls	r3, r8, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 f707 	mul.w	r7, r0, r7
 8000c44:	42a7      	cmp	r7, r4
 8000c46:	d90a      	bls.n	8000c5e <__udivmoddi4+0x92>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c50:	f080 810a 	bcs.w	8000e68 <__udivmoddi4+0x29c>
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	f240 8107 	bls.w	8000e68 <__udivmoddi4+0x29c>
 8000c5a:	4464      	add	r4, ip
 8000c5c:	3802      	subs	r0, #2
 8000c5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c62:	1be4      	subs	r4, r4, r7
 8000c64:	2600      	movs	r6, #0
 8000c66:	b11d      	cbz	r5, 8000c70 <__udivmoddi4+0xa4>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000c70:	4631      	mov	r1, r6
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xc2>
 8000c7a:	2d00      	cmp	r5, #0
 8000c7c:	f000 80ef 	beq.w	8000e5e <__udivmoddi4+0x292>
 8000c80:	2600      	movs	r6, #0
 8000c82:	e9c5 0100 	strd	r0, r1, [r5]
 8000c86:	4630      	mov	r0, r6
 8000c88:	4631      	mov	r1, r6
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f683 	clz	r6, r3
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	d14a      	bne.n	8000d2c <__udivmoddi4+0x160>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd4>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80f9 	bhi.w	8000e92 <__udivmoddi4+0x2c6>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	469e      	mov	lr, r3
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa4>
 8000cae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa4>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xec>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 8092 	bne.w	8000de6 <__udivmoddi4+0x21a>
 8000cc2:	eba1 010c 	sub.w	r1, r1, ip
 8000cc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cca:	fa1f fe8c 	uxth.w	lr, ip
 8000cce:	2601      	movs	r6, #1
 8000cd0:	0c20      	lsrs	r0, r4, #16
 8000cd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000cda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cde:	fb0e f003 	mul.w	r0, lr, r3
 8000ce2:	4288      	cmp	r0, r1
 8000ce4:	d908      	bls.n	8000cf8 <__udivmoddi4+0x12c>
 8000ce6:	eb1c 0101 	adds.w	r1, ip, r1
 8000cea:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cee:	d202      	bcs.n	8000cf6 <__udivmoddi4+0x12a>
 8000cf0:	4288      	cmp	r0, r1
 8000cf2:	f200 80cb 	bhi.w	8000e8c <__udivmoddi4+0x2c0>
 8000cf6:	4643      	mov	r3, r8
 8000cf8:	1a09      	subs	r1, r1, r0
 8000cfa:	b2a4      	uxth	r4, r4
 8000cfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d00:	fb07 1110 	mls	r1, r7, r0, r1
 8000d04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d08:	fb0e fe00 	mul.w	lr, lr, r0
 8000d0c:	45a6      	cmp	lr, r4
 8000d0e:	d908      	bls.n	8000d22 <__udivmoddi4+0x156>
 8000d10:	eb1c 0404 	adds.w	r4, ip, r4
 8000d14:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d18:	d202      	bcs.n	8000d20 <__udivmoddi4+0x154>
 8000d1a:	45a6      	cmp	lr, r4
 8000d1c:	f200 80bb 	bhi.w	8000e96 <__udivmoddi4+0x2ca>
 8000d20:	4608      	mov	r0, r1
 8000d22:	eba4 040e 	sub.w	r4, r4, lr
 8000d26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d2a:	e79c      	b.n	8000c66 <__udivmoddi4+0x9a>
 8000d2c:	f1c6 0720 	rsb	r7, r6, #32
 8000d30:	40b3      	lsls	r3, r6
 8000d32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000d3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000d42:	431c      	orrs	r4, r3
 8000d44:	40f9      	lsrs	r1, r7
 8000d46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000d4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d52:	0c20      	lsrs	r0, r4, #16
 8000d54:	fa1f fe8c 	uxth.w	lr, ip
 8000d58:	fb09 1118 	mls	r1, r9, r8, r1
 8000d5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d60:	fb08 f00e 	mul.w	r0, r8, lr
 8000d64:	4288      	cmp	r0, r1
 8000d66:	fa02 f206 	lsl.w	r2, r2, r6
 8000d6a:	d90b      	bls.n	8000d84 <__udivmoddi4+0x1b8>
 8000d6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d70:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d74:	f080 8088 	bcs.w	8000e88 <__udivmoddi4+0x2bc>
 8000d78:	4288      	cmp	r0, r1
 8000d7a:	f240 8085 	bls.w	8000e88 <__udivmoddi4+0x2bc>
 8000d7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d82:	4461      	add	r1, ip
 8000d84:	1a09      	subs	r1, r1, r0
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	458e      	cmp	lr, r1
 8000d9a:	d908      	bls.n	8000dae <__udivmoddi4+0x1e2>
 8000d9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000da0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000da4:	d26c      	bcs.n	8000e80 <__udivmoddi4+0x2b4>
 8000da6:	458e      	cmp	lr, r1
 8000da8:	d96a      	bls.n	8000e80 <__udivmoddi4+0x2b4>
 8000daa:	3802      	subs	r0, #2
 8000dac:	4461      	add	r1, ip
 8000dae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000db2:	fba0 9402 	umull	r9, r4, r0, r2
 8000db6:	eba1 010e 	sub.w	r1, r1, lr
 8000dba:	42a1      	cmp	r1, r4
 8000dbc:	46c8      	mov	r8, r9
 8000dbe:	46a6      	mov	lr, r4
 8000dc0:	d356      	bcc.n	8000e70 <__udivmoddi4+0x2a4>
 8000dc2:	d053      	beq.n	8000e6c <__udivmoddi4+0x2a0>
 8000dc4:	b15d      	cbz	r5, 8000dde <__udivmoddi4+0x212>
 8000dc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000dca:	eb61 010e 	sbc.w	r1, r1, lr
 8000dce:	fa01 f707 	lsl.w	r7, r1, r7
 8000dd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000dd6:	40f1      	lsrs	r1, r6
 8000dd8:	431f      	orrs	r7, r3
 8000dda:	e9c5 7100 	strd	r7, r1, [r5]
 8000dde:	2600      	movs	r6, #0
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	f1c2 0320 	rsb	r3, r2, #32
 8000dea:	40d8      	lsrs	r0, r3
 8000dec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df0:	fa21 f303 	lsr.w	r3, r1, r3
 8000df4:	4091      	lsls	r1, r2
 8000df6:	4301      	orrs	r1, r0
 8000df8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfc:	fa1f fe8c 	uxth.w	lr, ip
 8000e00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e04:	fb07 3610 	mls	r6, r7, r0, r3
 8000e08:	0c0b      	lsrs	r3, r1, #16
 8000e0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e12:	429e      	cmp	r6, r3
 8000e14:	fa04 f402 	lsl.w	r4, r4, r2
 8000e18:	d908      	bls.n	8000e2c <__udivmoddi4+0x260>
 8000e1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e22:	d22f      	bcs.n	8000e84 <__udivmoddi4+0x2b8>
 8000e24:	429e      	cmp	r6, r3
 8000e26:	d92d      	bls.n	8000e84 <__udivmoddi4+0x2b8>
 8000e28:	3802      	subs	r0, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	1b9b      	subs	r3, r3, r6
 8000e2e:	b289      	uxth	r1, r1
 8000e30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e34:	fb07 3316 	mls	r3, r7, r6, r3
 8000e38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000e40:	428b      	cmp	r3, r1
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x28a>
 8000e44:	eb1c 0101 	adds.w	r1, ip, r1
 8000e48:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e4c:	d216      	bcs.n	8000e7c <__udivmoddi4+0x2b0>
 8000e4e:	428b      	cmp	r3, r1
 8000e50:	d914      	bls.n	8000e7c <__udivmoddi4+0x2b0>
 8000e52:	3e02      	subs	r6, #2
 8000e54:	4461      	add	r1, ip
 8000e56:	1ac9      	subs	r1, r1, r3
 8000e58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e5c:	e738      	b.n	8000cd0 <__udivmoddi4+0x104>
 8000e5e:	462e      	mov	r6, r5
 8000e60:	4628      	mov	r0, r5
 8000e62:	e705      	b.n	8000c70 <__udivmoddi4+0xa4>
 8000e64:	4606      	mov	r6, r0
 8000e66:	e6e3      	b.n	8000c30 <__udivmoddi4+0x64>
 8000e68:	4618      	mov	r0, r3
 8000e6a:	e6f8      	b.n	8000c5e <__udivmoddi4+0x92>
 8000e6c:	454b      	cmp	r3, r9
 8000e6e:	d2a9      	bcs.n	8000dc4 <__udivmoddi4+0x1f8>
 8000e70:	ebb9 0802 	subs.w	r8, r9, r2
 8000e74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e78:	3801      	subs	r0, #1
 8000e7a:	e7a3      	b.n	8000dc4 <__udivmoddi4+0x1f8>
 8000e7c:	4646      	mov	r6, r8
 8000e7e:	e7ea      	b.n	8000e56 <__udivmoddi4+0x28a>
 8000e80:	4620      	mov	r0, r4
 8000e82:	e794      	b.n	8000dae <__udivmoddi4+0x1e2>
 8000e84:	4640      	mov	r0, r8
 8000e86:	e7d1      	b.n	8000e2c <__udivmoddi4+0x260>
 8000e88:	46d0      	mov	r8, sl
 8000e8a:	e77b      	b.n	8000d84 <__udivmoddi4+0x1b8>
 8000e8c:	3b02      	subs	r3, #2
 8000e8e:	4461      	add	r1, ip
 8000e90:	e732      	b.n	8000cf8 <__udivmoddi4+0x12c>
 8000e92:	4630      	mov	r0, r6
 8000e94:	e709      	b.n	8000caa <__udivmoddi4+0xde>
 8000e96:	4464      	add	r4, ip
 8000e98:	3802      	subs	r0, #2
 8000e9a:	e742      	b.n	8000d22 <__udivmoddi4+0x156>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <gfx_draw_pixel>:
#include "lcd_gfx.h"

struct gfx_handle_t gfx_handle;

void gfx_draw_pixel(int x, int y, uint16_t color)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b084      	sub	sp, #16
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	4613      	mov	r3, r2
 8000eac:	80fb      	strh	r3, [r7, #6]
	if ((x < 0) || (x >= gfx_handle.width) || (y < 0) || (y >= gfx_handle.height))
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	db17      	blt.n	8000ee4 <gfx_draw_pixel+0x44>
 8000eb4:	4b0d      	ldr	r3, [pc, #52]	; (8000eec <gfx_draw_pixel+0x4c>)
 8000eb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	da10      	bge.n	8000ee4 <gfx_draw_pixel+0x44>
 8000ec2:	68bb      	ldr	r3, [r7, #8]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	db0d      	blt.n	8000ee4 <gfx_draw_pixel+0x44>
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <gfx_draw_pixel+0x4c>)
 8000eca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ece:	461a      	mov	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	da06      	bge.n	8000ee4 <gfx_draw_pixel+0x44>
		return;

	gfx_handle.drawpixel(x, y, color);
 8000ed6:	4b05      	ldr	r3, [pc, #20]	; (8000eec <gfx_draw_pixel+0x4c>)
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	68b9      	ldr	r1, [r7, #8]
 8000ede:	68f8      	ldr	r0, [r7, #12]
 8000ee0:	4798      	blx	r3
 8000ee2:	e000      	b.n	8000ee6 <gfx_draw_pixel+0x46>
		return;
 8000ee4:	bf00      	nop
}
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000094 	.word	0x20000094

08000ef0 <gfx_draw_line>:

/* Bresenham's algorithm - thx wikpedia */
void gfx_draw_line(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 8000ef0:	b590      	push	{r4, r7, lr}
 8000ef2:	b089      	sub	sp, #36	; 0x24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	4608      	mov	r0, r1
 8000efa:	4611      	mov	r1, r2
 8000efc:	461a      	mov	r2, r3
 8000efe:	4623      	mov	r3, r4
 8000f00:	80fb      	strh	r3, [r7, #6]
 8000f02:	4603      	mov	r3, r0
 8000f04:	80bb      	strh	r3, [r7, #4]
 8000f06:	460b      	mov	r3, r1
 8000f08:	807b      	strh	r3, [r7, #2]
 8000f0a:	4613      	mov	r3, r2
 8000f0c:	803b      	strh	r3, [r7, #0]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8000f0e:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000f12:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f16:	1ad3      	subs	r3, r2, r3
 8000f18:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000f1c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8000f20:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 8000f24:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	bfb8      	it	lt
 8000f2e:	425b      	neglt	r3, r3
 8000f30:	429a      	cmp	r2, r3
 8000f32:	bfcc      	ite	gt
 8000f34:	2301      	movgt	r3, #1
 8000f36:	2300      	movle	r3, #0
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	837b      	strh	r3, [r7, #26]
	if (steep)
 8000f3c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d00b      	beq.n	8000f5c <gfx_draw_line+0x6c>
    {
		swap(x0, y0);
 8000f44:	88fb      	ldrh	r3, [r7, #6]
 8000f46:	833b      	strh	r3, [r7, #24]
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	80fb      	strh	r3, [r7, #6]
 8000f4c:	8b3b      	ldrh	r3, [r7, #24]
 8000f4e:	80bb      	strh	r3, [r7, #4]
		swap(x1, y1);
 8000f50:	887b      	ldrh	r3, [r7, #2]
 8000f52:	82fb      	strh	r3, [r7, #22]
 8000f54:	883b      	ldrh	r3, [r7, #0]
 8000f56:	807b      	strh	r3, [r7, #2]
 8000f58:	8afb      	ldrh	r3, [r7, #22]
 8000f5a:	803b      	strh	r3, [r7, #0]
	}

	if (x0 > x1)
 8000f5c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000f60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	dd0b      	ble.n	8000f80 <gfx_draw_line+0x90>
    {
		swap(x0, x1);
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	82bb      	strh	r3, [r7, #20]
 8000f6c:	887b      	ldrh	r3, [r7, #2]
 8000f6e:	80fb      	strh	r3, [r7, #6]
 8000f70:	8abb      	ldrh	r3, [r7, #20]
 8000f72:	807b      	strh	r3, [r7, #2]
		swap(y0, y1);
 8000f74:	88bb      	ldrh	r3, [r7, #4]
 8000f76:	827b      	strh	r3, [r7, #18]
 8000f78:	883b      	ldrh	r3, [r7, #0]
 8000f7a:	80bb      	strh	r3, [r7, #4]
 8000f7c:	8a7b      	ldrh	r3, [r7, #18]
 8000f7e:	803b      	strh	r3, [r7, #0]
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8000f80:	887a      	ldrh	r2, [r7, #2]
 8000f82:	88fb      	ldrh	r3, [r7, #6]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	823b      	strh	r3, [r7, #16]
	dy = abs(y1 - y0);
 8000f8a:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000f8e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	bfb8      	it	lt
 8000f98:	425b      	neglt	r3, r3
 8000f9a:	81fb      	strh	r3, [r7, #14]

	int16_t err = dx / 2;
 8000f9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000fa0:	0fda      	lsrs	r2, r3, #31
 8000fa2:	4413      	add	r3, r2
 8000fa4:	105b      	asrs	r3, r3, #1
 8000fa6:	83fb      	strh	r3, [r7, #30]
	int16_t ystep;

	if (y0 < y1)
 8000fa8:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000fac:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	da02      	bge.n	8000fba <gfx_draw_line+0xca>
		ystep = 1;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	83bb      	strh	r3, [r7, #28]
 8000fb8:	e031      	b.n	800101e <gfx_draw_line+0x12e>
	else
		ystep = -1;
 8000fba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fbe:	83bb      	strh	r3, [r7, #28]

	for (; x0 <= x1; x0++)
 8000fc0:	e02d      	b.n	800101e <gfx_draw_line+0x12e>
    {
		if (steep)
 8000fc2:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d008      	beq.n	8000fdc <gfx_draw_line+0xec>
			gfx_draw_pixel(y0, x0, color);
 8000fca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000fce:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8000fd2:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	f7ff ff63 	bl	8000ea0 <gfx_draw_pixel>
 8000fda:	e007      	b.n	8000fec <gfx_draw_line+0xfc>
		else
			gfx_draw_pixel(x0, y0, color);
 8000fdc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000fe0:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000fe4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff ff5a 	bl	8000ea0 <gfx_draw_pixel>

		err -= dy;
 8000fec:	8bfa      	ldrh	r2, [r7, #30]
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	1ad3      	subs	r3, r2, r3
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	83fb      	strh	r3, [r7, #30]
		if (err < 0)
 8000ff6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	da09      	bge.n	8001012 <gfx_draw_line+0x122>
        {
			y0 += ystep;
 8000ffe:	88ba      	ldrh	r2, [r7, #4]
 8001000:	8bbb      	ldrh	r3, [r7, #28]
 8001002:	4413      	add	r3, r2
 8001004:	b29b      	uxth	r3, r3
 8001006:	80bb      	strh	r3, [r7, #4]
			err += dx;
 8001008:	8bfa      	ldrh	r2, [r7, #30]
 800100a:	8a3b      	ldrh	r3, [r7, #16]
 800100c:	4413      	add	r3, r2
 800100e:	b29b      	uxth	r3, r3
 8001010:	83fb      	strh	r3, [r7, #30]
	for (; x0 <= x1; x0++)
 8001012:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001016:	b29b      	uxth	r3, r3
 8001018:	3301      	adds	r3, #1
 800101a:	b29b      	uxth	r3, r3
 800101c:	80fb      	strh	r3, [r7, #6]
 800101e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001022:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001026:	429a      	cmp	r2, r3
 8001028:	ddcb      	ble.n	8000fc2 <gfx_draw_line+0xd2>
		}
	}
}
 800102a:	bf00      	nop
 800102c:	bf00      	nop
 800102e:	3724      	adds	r7, #36	; 0x24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd90      	pop	{r4, r7, pc}

08001034 <gfx_draw_fast_vline>:

void gfx_draw_fast_vline(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8001034:	b590      	push	{r4, r7, lr}
 8001036:	b085      	sub	sp, #20
 8001038:	af02      	add	r7, sp, #8
 800103a:	4604      	mov	r4, r0
 800103c:	4608      	mov	r0, r1
 800103e:	4611      	mov	r1, r2
 8001040:	461a      	mov	r2, r3
 8001042:	4623      	mov	r3, r4
 8001044:	80fb      	strh	r3, [r7, #6]
 8001046:	4603      	mov	r3, r0
 8001048:	80bb      	strh	r3, [r7, #4]
 800104a:	460b      	mov	r3, r1
 800104c:	807b      	strh	r3, [r7, #2]
 800104e:	4613      	mov	r3, r2
 8001050:	803b      	strh	r3, [r7, #0]
	/* Update in subclasses if desired! */
	gfx_draw_line(x, y, x, y + h - 1, color);
 8001052:	88ba      	ldrh	r2, [r7, #4]
 8001054:	887b      	ldrh	r3, [r7, #2]
 8001056:	4413      	add	r3, r2
 8001058:	b29b      	uxth	r3, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	b29b      	uxth	r3, r3
 800105e:	b21c      	sxth	r4, r3
 8001060:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001064:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001068:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800106c:	883b      	ldrh	r3, [r7, #0]
 800106e:	9300      	str	r3, [sp, #0]
 8001070:	4623      	mov	r3, r4
 8001072:	f7ff ff3d 	bl	8000ef0 <gfx_draw_line>
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	bd90      	pop	{r4, r7, pc}

0800107e <gfx_fill_rect>:

void gfx_fill_rect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 800107e:	b590      	push	{r4, r7, lr}
 8001080:	b085      	sub	sp, #20
 8001082:	af00      	add	r7, sp, #0
 8001084:	4604      	mov	r4, r0
 8001086:	4608      	mov	r0, r1
 8001088:	4611      	mov	r1, r2
 800108a:	461a      	mov	r2, r3
 800108c:	4623      	mov	r3, r4
 800108e:	80fb      	strh	r3, [r7, #6]
 8001090:	4603      	mov	r3, r0
 8001092:	80bb      	strh	r3, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	807b      	strh	r3, [r7, #2]
 8001098:	4613      	mov	r3, r2
 800109a:	803b      	strh	r3, [r7, #0]
	/* Update in subclasses if desired! */
	int16_t i;
	for (i = x; i < x + w; i++) {
 800109c:	88fb      	ldrh	r3, [r7, #6]
 800109e:	81fb      	strh	r3, [r7, #14]
 80010a0:	e00e      	b.n	80010c0 <gfx_fill_rect+0x42>
		gfx_draw_fast_vline(i, y, h, color);
 80010a2:	8c3b      	ldrh	r3, [r7, #32]
 80010a4:	f9b7 2000 	ldrsh.w	r2, [r7]
 80010a8:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 80010ac:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80010b0:	f7ff ffc0 	bl	8001034 <gfx_draw_fast_vline>
	for (i = x; i < x + w; i++) {
 80010b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010b8:	b29b      	uxth	r3, r3
 80010ba:	3301      	adds	r3, #1
 80010bc:	b29b      	uxth	r3, r3
 80010be:	81fb      	strh	r3, [r7, #14]
 80010c0:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80010c4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 80010c8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010cc:	440b      	add	r3, r1
 80010ce:	429a      	cmp	r2, r3
 80010d0:	dbe7      	blt.n	80010a2 <gfx_fill_rect+0x24>
	}
}
 80010d2:	bf00      	nop
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd90      	pop	{r4, r7, pc}

080010dc <gfx_fill_screen>:

void gfx_fill_screen(uint16_t color)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b084      	sub	sp, #16
 80010e0:	af02      	add	r7, sp, #8
 80010e2:	4603      	mov	r3, r0
 80010e4:	80fb      	strh	r3, [r7, #6]
	gfx_fill_rect(0, 0, gfx_handle.width, gfx_handle.height, color);
 80010e6:	4b08      	ldr	r3, [pc, #32]	; (8001108 <gfx_fill_screen+0x2c>)
 80010e8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <gfx_fill_screen+0x2c>)
 80010ee:	f9b3 1002 	ldrsh.w	r1, [r3, #2]
 80010f2:	88fb      	ldrh	r3, [r7, #6]
 80010f4:	9300      	str	r3, [sp, #0]
 80010f6:	460b      	mov	r3, r1
 80010f8:	2100      	movs	r1, #0
 80010fa:	2000      	movs	r0, #0
 80010fc:	f7ff ffbf 	bl	800107e <gfx_fill_rect>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000094 	.word	0x20000094

0800110c <gfx_draw_circle>:

/* Draw a circle outline */
void gfx_draw_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b087      	sub	sp, #28
 8001110:	af00      	add	r7, sp, #0
 8001112:	4604      	mov	r4, r0
 8001114:	4608      	mov	r0, r1
 8001116:	4611      	mov	r1, r2
 8001118:	461a      	mov	r2, r3
 800111a:	4623      	mov	r3, r4
 800111c:	80fb      	strh	r3, [r7, #6]
 800111e:	4603      	mov	r3, r0
 8001120:	80bb      	strh	r3, [r7, #4]
 8001122:	460b      	mov	r3, r1
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	4613      	mov	r3, r2
 8001128:	803b      	strh	r3, [r7, #0]
	int16_t f = 1 - r;
 800112a:	887b      	ldrh	r3, [r7, #2]
 800112c:	f1c3 0301 	rsb	r3, r3, #1
 8001130:	b29b      	uxth	r3, r3
 8001132:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001134:	2301      	movs	r3, #1
 8001136:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001138:	887b      	ldrh	r3, [r7, #2]
 800113a:	461a      	mov	r2, r3
 800113c:	03d2      	lsls	r2, r2, #15
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	b29b      	uxth	r3, r3
 8001144:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 800114a:	887b      	ldrh	r3, [r7, #2]
 800114c:	81fb      	strh	r3, [r7, #14]

	gfx_draw_pixel(x0  , y0+r, color);
 800114e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001152:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001156:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800115a:	4413      	add	r3, r2
 800115c:	883a      	ldrh	r2, [r7, #0]
 800115e:	4619      	mov	r1, r3
 8001160:	f7ff fe9e 	bl	8000ea0 <gfx_draw_pixel>
	gfx_draw_pixel(x0  , y0-r, color);
 8001164:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001168:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800116c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	883a      	ldrh	r2, [r7, #0]
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fe93 	bl	8000ea0 <gfx_draw_pixel>
	gfx_draw_pixel(x0+r, y0  , color);
 800117a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800117e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001182:	4413      	add	r3, r2
 8001184:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8001188:	883a      	ldrh	r2, [r7, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff fe88 	bl	8000ea0 <gfx_draw_pixel>
	gfx_draw_pixel(x0-r, y0  , color);
 8001190:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001194:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800119e:	883a      	ldrh	r2, [r7, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff fe7d 	bl	8000ea0 <gfx_draw_pixel>

	while (x < y) {
 80011a6:	e091      	b.n	80012cc <gfx_draw_circle+0x1c0>
		if (f >= 0) {
 80011a8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	db0e      	blt.n	80011ce <gfx_draw_circle+0xc2>
			y--;
 80011b0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011b4:	b29b      	uxth	r3, r3
 80011b6:	3b01      	subs	r3, #1
 80011b8:	b29b      	uxth	r3, r3
 80011ba:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 80011bc:	8a7b      	ldrh	r3, [r7, #18]
 80011be:	3302      	adds	r3, #2
 80011c0:	b29b      	uxth	r3, r3
 80011c2:	827b      	strh	r3, [r7, #18]
			f += ddF_y;
 80011c4:	8afa      	ldrh	r2, [r7, #22]
 80011c6:	8a7b      	ldrh	r3, [r7, #18]
 80011c8:	4413      	add	r3, r2
 80011ca:	b29b      	uxth	r3, r3
 80011cc:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 80011ce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	3301      	adds	r3, #1
 80011d6:	b29b      	uxth	r3, r3
 80011d8:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 80011da:	8abb      	ldrh	r3, [r7, #20]
 80011dc:	3302      	adds	r3, #2
 80011de:	b29b      	uxth	r3, r3
 80011e0:	82bb      	strh	r3, [r7, #20]
		f += ddF_x;
 80011e2:	8afa      	ldrh	r2, [r7, #22]
 80011e4:	8abb      	ldrh	r3, [r7, #20]
 80011e6:	4413      	add	r3, r2
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	82fb      	strh	r3, [r7, #22]

		gfx_draw_pixel(x0 + x, y0 + y, color);
 80011ec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80011f0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80011f4:	18d0      	adds	r0, r2, r3
 80011f6:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80011fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fe:	4413      	add	r3, r2
 8001200:	883a      	ldrh	r2, [r7, #0]
 8001202:	4619      	mov	r1, r3
 8001204:	f7ff fe4c 	bl	8000ea0 <gfx_draw_pixel>
		gfx_draw_pixel(x0 - x, y0 + y, color);
 8001208:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800120c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001210:	1ad0      	subs	r0, r2, r3
 8001212:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001216:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800121a:	4413      	add	r3, r2
 800121c:	883a      	ldrh	r2, [r7, #0]
 800121e:	4619      	mov	r1, r3
 8001220:	f7ff fe3e 	bl	8000ea0 <gfx_draw_pixel>
		gfx_draw_pixel(x0 + x, y0 - y, color);
 8001224:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001228:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800122c:	18d0      	adds	r0, r2, r3
 800122e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001232:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	883a      	ldrh	r2, [r7, #0]
 800123a:	4619      	mov	r1, r3
 800123c:	f7ff fe30 	bl	8000ea0 <gfx_draw_pixel>
		gfx_draw_pixel(x0 - x, y0 - y, color);
 8001240:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001244:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001248:	1ad0      	subs	r0, r2, r3
 800124a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800124e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	883a      	ldrh	r2, [r7, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fe22 	bl	8000ea0 <gfx_draw_pixel>
		gfx_draw_pixel(x0 + y, y0 + x, color);
 800125c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001260:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001264:	18d0      	adds	r0, r2, r3
 8001266:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800126a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800126e:	4413      	add	r3, r2
 8001270:	883a      	ldrh	r2, [r7, #0]
 8001272:	4619      	mov	r1, r3
 8001274:	f7ff fe14 	bl	8000ea0 <gfx_draw_pixel>
		gfx_draw_pixel(x0 - y, y0 + x, color);
 8001278:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800127c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001280:	1ad0      	subs	r0, r2, r3
 8001282:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001286:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800128a:	4413      	add	r3, r2
 800128c:	883a      	ldrh	r2, [r7, #0]
 800128e:	4619      	mov	r1, r3
 8001290:	f7ff fe06 	bl	8000ea0 <gfx_draw_pixel>
		gfx_draw_pixel(x0 + y, y0 - x, color);
 8001294:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8001298:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129c:	18d0      	adds	r0, r2, r3
 800129e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	883a      	ldrh	r2, [r7, #0]
 80012aa:	4619      	mov	r1, r3
 80012ac:	f7ff fdf8 	bl	8000ea0 <gfx_draw_pixel>
		gfx_draw_pixel(x0 - y, y0 - x, color);
 80012b0:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80012b4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012b8:	1ad0      	subs	r0, r2, r3
 80012ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80012be:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80012c2:	1ad3      	subs	r3, r2, r3
 80012c4:	883a      	ldrh	r2, [r7, #0]
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fdea 	bl	8000ea0 <gfx_draw_pixel>
	while (x < y) {
 80012cc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80012d0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012d4:	429a      	cmp	r2, r3
 80012d6:	f6ff af67 	blt.w	80011a8 <gfx_draw_circle+0x9c>
	}
}
 80012da:	bf00      	nop
 80012dc:	bf00      	nop
 80012de:	371c      	adds	r7, #28
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd90      	pop	{r4, r7, pc}

080012e4 <gfx_fill_circle_helper>:

/* Used to do circles and roundrects */
void gfx_fill_circle_helper(int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color)
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4604      	mov	r4, r0
 80012ec:	4608      	mov	r0, r1
 80012ee:	4611      	mov	r1, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	4623      	mov	r3, r4
 80012f4:	80fb      	strh	r3, [r7, #6]
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	807b      	strh	r3, [r7, #2]
 80012fe:	4613      	mov	r3, r2
 8001300:	707b      	strb	r3, [r7, #1]
	int16_t f     = 1 - r;
 8001302:	887b      	ldrh	r3, [r7, #2]
 8001304:	f1c3 0301 	rsb	r3, r3, #1
 8001308:	b29b      	uxth	r3, r3
 800130a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800130c:	2301      	movs	r3, #1
 800130e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001310:	887b      	ldrh	r3, [r7, #2]
 8001312:	461a      	mov	r2, r3
 8001314:	03d2      	lsls	r2, r2, #15
 8001316:	1ad3      	subs	r3, r2, r3
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	b29b      	uxth	r3, r3
 800131c:	827b      	strh	r3, [r7, #18]
	int16_t x     = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	823b      	strh	r3, [r7, #16]
	int16_t y     = r;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	81fb      	strh	r3, [r7, #14]

	while (x < y) {
 8001326:	e083      	b.n	8001430 <gfx_fill_circle_helper+0x14c>
		if (f >= 0) {
 8001328:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800132c:	2b00      	cmp	r3, #0
 800132e:	db0e      	blt.n	800134e <gfx_fill_circle_helper+0x6a>
			y--;
 8001330:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001334:	b29b      	uxth	r3, r3
 8001336:	3b01      	subs	r3, #1
 8001338:	b29b      	uxth	r3, r3
 800133a:	81fb      	strh	r3, [r7, #14]
			ddF_y += 2;
 800133c:	8a7b      	ldrh	r3, [r7, #18]
 800133e:	3302      	adds	r3, #2
 8001340:	b29b      	uxth	r3, r3
 8001342:	827b      	strh	r3, [r7, #18]
			f     += ddF_y;
 8001344:	8afa      	ldrh	r2, [r7, #22]
 8001346:	8a7b      	ldrh	r3, [r7, #18]
 8001348:	4413      	add	r3, r2
 800134a:	b29b      	uxth	r3, r3
 800134c:	82fb      	strh	r3, [r7, #22]
		}
		x++;
 800134e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001352:	b29b      	uxth	r3, r3
 8001354:	3301      	adds	r3, #1
 8001356:	b29b      	uxth	r3, r3
 8001358:	823b      	strh	r3, [r7, #16]
		ddF_x += 2;
 800135a:	8abb      	ldrh	r3, [r7, #20]
 800135c:	3302      	adds	r3, #2
 800135e:	b29b      	uxth	r3, r3
 8001360:	82bb      	strh	r3, [r7, #20]
		f     += ddF_x;
 8001362:	8afa      	ldrh	r2, [r7, #22]
 8001364:	8abb      	ldrh	r3, [r7, #20]
 8001366:	4413      	add	r3, r2
 8001368:	b29b      	uxth	r3, r3
 800136a:	82fb      	strh	r3, [r7, #22]

		if (cornername & 0x1) {
 800136c:	787b      	ldrb	r3, [r7, #1]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d02b      	beq.n	80013ce <gfx_fill_circle_helper+0xea>
			gfx_draw_fast_vline(x0+x, y0-y, 2*y+1+delta, color);
 8001376:	88fa      	ldrh	r2, [r7, #6]
 8001378:	8a3b      	ldrh	r3, [r7, #16]
 800137a:	4413      	add	r3, r2
 800137c:	b29b      	uxth	r3, r3
 800137e:	b218      	sxth	r0, r3
 8001380:	88ba      	ldrh	r2, [r7, #4]
 8001382:	89fb      	ldrh	r3, [r7, #14]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	b29b      	uxth	r3, r3
 8001388:	b219      	sxth	r1, r3
 800138a:	89fb      	ldrh	r3, [r7, #14]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	b29a      	uxth	r2, r3
 8001390:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001392:	4413      	add	r3, r2
 8001394:	b29b      	uxth	r3, r3
 8001396:	3301      	adds	r3, #1
 8001398:	b29b      	uxth	r3, r3
 800139a:	b21a      	sxth	r2, r3
 800139c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800139e:	f7ff fe49 	bl	8001034 <gfx_draw_fast_vline>
			gfx_draw_fast_vline(x0+y, y0-x, 2*x+1+delta, color);
 80013a2:	88fa      	ldrh	r2, [r7, #6]
 80013a4:	89fb      	ldrh	r3, [r7, #14]
 80013a6:	4413      	add	r3, r2
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	b218      	sxth	r0, r3
 80013ac:	88ba      	ldrh	r2, [r7, #4]
 80013ae:	8a3b      	ldrh	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	b219      	sxth	r1, r3
 80013b6:	8a3b      	ldrh	r3, [r7, #16]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013be:	4413      	add	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	3301      	adds	r3, #1
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	b21a      	sxth	r2, r3
 80013c8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80013ca:	f7ff fe33 	bl	8001034 <gfx_draw_fast_vline>
		}
		if (cornername & 0x2) {
 80013ce:	787b      	ldrb	r3, [r7, #1]
 80013d0:	f003 0302 	and.w	r3, r3, #2
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d02b      	beq.n	8001430 <gfx_fill_circle_helper+0x14c>
			gfx_draw_fast_vline(x0-x, y0-y, 2*y+1+delta, color);
 80013d8:	88fa      	ldrh	r2, [r7, #6]
 80013da:	8a3b      	ldrh	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	b29b      	uxth	r3, r3
 80013e0:	b218      	sxth	r0, r3
 80013e2:	88ba      	ldrh	r2, [r7, #4]
 80013e4:	89fb      	ldrh	r3, [r7, #14]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	b219      	sxth	r1, r3
 80013ec:	89fb      	ldrh	r3, [r7, #14]
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	b29a      	uxth	r2, r3
 80013f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80013f4:	4413      	add	r3, r2
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	3301      	adds	r3, #1
 80013fa:	b29b      	uxth	r3, r3
 80013fc:	b21a      	sxth	r2, r3
 80013fe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001400:	f7ff fe18 	bl	8001034 <gfx_draw_fast_vline>
			gfx_draw_fast_vline(x0-y, y0-x, 2*x+1+delta, color);
 8001404:	88fa      	ldrh	r2, [r7, #6]
 8001406:	89fb      	ldrh	r3, [r7, #14]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	b29b      	uxth	r3, r3
 800140c:	b218      	sxth	r0, r3
 800140e:	88ba      	ldrh	r2, [r7, #4]
 8001410:	8a3b      	ldrh	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	b29b      	uxth	r3, r3
 8001416:	b219      	sxth	r1, r3
 8001418:	8a3b      	ldrh	r3, [r7, #16]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	b29a      	uxth	r2, r3
 800141e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001420:	4413      	add	r3, r2
 8001422:	b29b      	uxth	r3, r3
 8001424:	3301      	adds	r3, #1
 8001426:	b29b      	uxth	r3, r3
 8001428:	b21a      	sxth	r2, r3
 800142a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800142c:	f7ff fe02 	bl	8001034 <gfx_draw_fast_vline>
	while (x < y) {
 8001430:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001434:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001438:	429a      	cmp	r2, r3
 800143a:	f6ff af75 	blt.w	8001328 <gfx_fill_circle_helper+0x44>
		}
	}
}
 800143e:	bf00      	nop
 8001440:	bf00      	nop
 8001442:	371c      	adds	r7, #28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd90      	pop	{r4, r7, pc}

08001448 <gfx_fill_circle>:

void gfx_fill_circle(int16_t x0, int16_t y0, int16_t r, uint16_t color)
{
 8001448:	b590      	push	{r4, r7, lr}
 800144a:	b085      	sub	sp, #20
 800144c:	af02      	add	r7, sp, #8
 800144e:	4604      	mov	r4, r0
 8001450:	4608      	mov	r0, r1
 8001452:	4611      	mov	r1, r2
 8001454:	461a      	mov	r2, r3
 8001456:	4623      	mov	r3, r4
 8001458:	80fb      	strh	r3, [r7, #6]
 800145a:	4603      	mov	r3, r0
 800145c:	80bb      	strh	r3, [r7, #4]
 800145e:	460b      	mov	r3, r1
 8001460:	807b      	strh	r3, [r7, #2]
 8001462:	4613      	mov	r3, r2
 8001464:	803b      	strh	r3, [r7, #0]
	gfx_draw_fast_vline(x0, y0 - r, 2 * r + 1, color);
 8001466:	88ba      	ldrh	r2, [r7, #4]
 8001468:	887b      	ldrh	r3, [r7, #2]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	b29b      	uxth	r3, r3
 800146e:	b219      	sxth	r1, r3
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	b29b      	uxth	r3, r3
 8001476:	3301      	adds	r3, #1
 8001478:	b29b      	uxth	r3, r3
 800147a:	b21a      	sxth	r2, r3
 800147c:	883b      	ldrh	r3, [r7, #0]
 800147e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001482:	f7ff fdd7 	bl	8001034 <gfx_draw_fast_vline>
	gfx_fill_circle_helper(x0, y0, r, 3, 0, color);
 8001486:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800148a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800148e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001492:	883b      	ldrh	r3, [r7, #0]
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2300      	movs	r3, #0
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2303      	movs	r3, #3
 800149c:	f7ff ff22 	bl	80012e4 <gfx_fill_circle_helper>
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd90      	pop	{r4, r7, pc}

080014a8 <lcd_command>:
* All singing all dancing 'do a command' feature. Basically it
* sends a command, and if args are present it sets 'data' and
* sends those along too.
*/
void lcd_command(uint8_t cmd, int delay, int args_len, uint8_t *args)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b086      	sub	sp, #24
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	4603      	mov	r3, r0
 80014b6:	73fb      	strb	r3, [r7, #15]
	int i;

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET); 	/* Select the LCD */
 80014b8:	2200      	movs	r2, #0
 80014ba:	2104      	movs	r1, #4
 80014bc:	4826      	ldr	r0, [pc, #152]	; (8001558 <lcd_command+0xb0>)
 80014be:	f001 fdb5 	bl	800302c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); 	/* Reset the D/CX pin for commands */
 80014c2:	2200      	movs	r2, #0
 80014c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c8:	4824      	ldr	r0, [pc, #144]	; (800155c <lcd_command+0xb4>)
 80014ca:	f001 fdaf 	bl	800302c <HAL_GPIO_WritePin>

	if (HAL_SPI_Transmit(&hspi5, &cmd, 1, 100) != HAL_OK)
 80014ce:	f107 010f 	add.w	r1, r7, #15
 80014d2:	2364      	movs	r3, #100	; 0x64
 80014d4:	2201      	movs	r2, #1
 80014d6:	4822      	ldr	r0, [pc, #136]	; (8001560 <lcd_command+0xb8>)
 80014d8:	f003 fb84 	bl	8004be4 <HAL_SPI_Transmit>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <lcd_command+0x40>
		printf("[SPI]TX_error\r\n");
 80014e2:	4820      	ldr	r0, [pc, #128]	; (8001564 <lcd_command+0xbc>)
 80014e4:	f004 fb18 	bl	8005b18 <puts>

	if (args_len)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d01d      	beq.n	800152a <lcd_command+0x82>
	{
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET); /* Set the D/CX pin for data */
 80014ee:	2201      	movs	r2, #1
 80014f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014f4:	4819      	ldr	r0, [pc, #100]	; (800155c <lcd_command+0xb4>)
 80014f6:	f001 fd99 	bl	800302c <HAL_GPIO_WritePin>

		for (i = 0; i < args_len; i++)
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	e010      	b.n	8001522 <lcd_command+0x7a>
		{
			if (HAL_SPI_Transmit(&hspi5, (args + i), 1, 100) != HAL_OK)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	683a      	ldr	r2, [r7, #0]
 8001504:	18d1      	adds	r1, r2, r3
 8001506:	2364      	movs	r3, #100	; 0x64
 8001508:	2201      	movs	r2, #1
 800150a:	4815      	ldr	r0, [pc, #84]	; (8001560 <lcd_command+0xb8>)
 800150c:	f003 fb6a 	bl	8004be4 <HAL_SPI_Transmit>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <lcd_command+0x74>
				printf("[SPI]TX_error\r\n");
 8001516:	4813      	ldr	r0, [pc, #76]	; (8001564 <lcd_command+0xbc>)
 8001518:	f004 fafe 	bl	8005b18 <puts>
		for (i = 0; i < args_len; i++)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697a      	ldr	r2, [r7, #20]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	dbea      	blt.n	8001500 <lcd_command+0x58>
		}
	}

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET); 	/* Turn off chip select */
 800152a:	2201      	movs	r2, #1
 800152c:	2104      	movs	r1, #4
 800152e:	480a      	ldr	r0, [pc, #40]	; (8001558 <lcd_command+0xb0>)
 8001530:	f001 fd7c 	bl	800302c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET); 	/* Always reset D/CX */
 8001534:	2200      	movs	r2, #0
 8001536:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800153a:	4808      	ldr	r0, [pc, #32]	; (800155c <lcd_command+0xb4>)
 800153c:	f001 fd76 	bl	800302c <HAL_GPIO_WritePin>

	if (delay)
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d003      	beq.n	800154e <lcd_command+0xa6>
		HAL_Delay(delay);		/* wait, if called for */
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	4618      	mov	r0, r3
 800154a:	f001 fab9 	bl	8002ac0 <HAL_Delay>
}
 800154e:	bf00      	nop
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	200000fc 	.word	0x200000fc
 8001564:	08007f28 	.word	0x08007f28

08001568 <lcd_draw_pixel>:
* Drawing a pixel consists of storing a 16 bit value in the
* memory used to hold the frame. This code computes the address
* of the word to store, and puts in the value we pass to it.
*/
void lcd_draw_pixel(int x, int y, uint16_t color)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	4613      	mov	r3, r2
 8001574:	80fb      	strh	r3, [r7, #6]
	*(cur_frame + x + y * LCD_WIDTH) = color;
 8001576:	4b0a      	ldr	r3, [pc, #40]	; (80015a0 <lcd_draw_pixel+0x38>)
 8001578:	6819      	ldr	r1, [r3, #0]
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	4613      	mov	r3, r2
 800157e:	011b      	lsls	r3, r3, #4
 8001580:	1a9b      	subs	r3, r3, r2
 8001582:	011b      	lsls	r3, r3, #4
 8001584:	461a      	mov	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4413      	add	r3, r2
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	440b      	add	r3, r1
 800158e:	88fa      	ldrh	r2, [r7, #6]
 8001590:	801a      	strh	r2, [r3, #0]
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	2000009c 	.word	0x2000009c

080015a4 <lcd_test_image>:
* Create non-random data in the frame buffer. In our case
* a black background and a grid 16 pixels x 16 pixels of
* white lines. No line on the right edge and bottom of screen.
*/
void lcd_test_image(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
	int x, y;
	uint16_t pixel;

	for (x = 0; x < LCD_WIDTH; x++)
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
 80015ae:	e01d      	b.n	80015ec <lcd_test_image+0x48>
	{
		for (y = 0; y < LCD_HEIGHT; y++)
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	e013      	b.n	80015de <lcd_test_image+0x3a>
				pixel = 0xFFFF;		/* all white */

			if ((y % 16) == 0)
				pixel = 0xFFFF;		/* all white */
#else
			pixel = elnic_map[x + y * LCD_WIDTH];
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	4613      	mov	r3, r2
 80015ba:	011b      	lsls	r3, r3, #4
 80015bc:	1a9b      	subs	r3, r3, r2
 80015be:	011b      	lsls	r3, r3, #4
 80015c0:	461a      	mov	r2, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a0d      	ldr	r2, [pc, #52]	; (80015fc <lcd_test_image+0x58>)
 80015c8:	5cd3      	ldrb	r3, [r2, r3]
 80015ca:	80fb      	strh	r3, [r7, #6]
#endif

			lcd_draw_pixel(x, y, pixel);
 80015cc:	88fb      	ldrh	r3, [r7, #6]
 80015ce:	461a      	mov	r2, r3
 80015d0:	68b9      	ldr	r1, [r7, #8]
 80015d2:	68f8      	ldr	r0, [r7, #12]
 80015d4:	f7ff ffc8 	bl	8001568 <lcd_draw_pixel>
		for (y = 0; y < LCD_HEIGHT; y++)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	3301      	adds	r3, #1
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
 80015e0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80015e4:	dbe7      	blt.n	80015b6 <lcd_test_image+0x12>
	for (x = 0; x < LCD_WIDTH; x++)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	3301      	adds	r3, #1
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2bef      	cmp	r3, #239	; 0xef
 80015f0:	ddde      	ble.n	80015b0 <lcd_test_image+0xc>
		}
	}
}
 80015f2:	bf00      	nop
 80015f4:	bf00      	nop
 80015f6:	3710      	adds	r7, #16
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	08008098 	.word	0x08008098

08001600 <lcd_show_frame>:
* could call this with DMA but that is made more difficult by
* the implementation of SPI and the modules interpretation of
* D/CX line.
*/
void lcd_show_frame(void)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
	uint8_t size[4];

	// uint16_t *aux_buff = display_frame;
	display_frame = cur_frame;
 8001606:	4b19      	ldr	r3, [pc, #100]	; (800166c <lcd_show_frame+0x6c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a19      	ldr	r2, [pc, #100]	; (8001670 <lcd_show_frame+0x70>)
 800160c:	6013      	str	r3, [r2, #0]
	// cur_frame = aux_buff;

	size[0] = 0; 						/* SC */
 800160e:	2300      	movs	r3, #0
 8001610:	703b      	strb	r3, [r7, #0]
	size[1] = 0; 						/* SC */
 8001612:	2300      	movs	r3, #0
 8001614:	707b      	strb	r3, [r7, #1]
	size[2] = (LCD_WIDTH >> 8) & 0xFF; 	/* EC */
 8001616:	2300      	movs	r3, #0
 8001618:	70bb      	strb	r3, [r7, #2]
	size[3] = (LCD_WIDTH) & 0xFF; 		/* EC */
 800161a:	23f0      	movs	r3, #240	; 0xf0
 800161c:	70fb      	strb	r3, [r7, #3]
	uint8_t column_addr_set_arg = 0x2A;
 800161e:	232a      	movs	r3, #42	; 0x2a
 8001620:	71fb      	strb	r3, [r7, #7]
	lcd_command(column_addr_set_arg, 0, 4, &size[0]);
 8001622:	463b      	mov	r3, r7
 8001624:	79f8      	ldrb	r0, [r7, #7]
 8001626:	2204      	movs	r2, #4
 8001628:	2100      	movs	r1, #0
 800162a:	f7ff ff3d 	bl	80014a8 <lcd_command>

	size[0] = 0; 						/* EP */
 800162e:	2300      	movs	r3, #0
 8001630:	703b      	strb	r3, [r7, #0]
	size[1] = 0; 						/* EP */
 8001632:	2300      	movs	r3, #0
 8001634:	707b      	strb	r3, [r7, #1]
	size[2] = (LCD_HEIGHT >> 8) & 0xFF; /* EP */
 8001636:	2301      	movs	r3, #1
 8001638:	70bb      	strb	r3, [r7, #2]
	size[3] = LCD_HEIGHT & 0xFF; 		/* EP */
 800163a:	2340      	movs	r3, #64	; 0x40
 800163c:	70fb      	strb	r3, [r7, #3]
	uint8_t page_addr_set_arg = 0x2B;
 800163e:	232b      	movs	r3, #43	; 0x2b
 8001640:	71bb      	strb	r3, [r7, #6]
	lcd_command(page_addr_set_arg, 0, 4, &size[0]);
 8001642:	463b      	mov	r3, r7
 8001644:	79b8      	ldrb	r0, [r7, #6]
 8001646:	2204      	movs	r2, #4
 8001648:	2100      	movs	r1, #0
 800164a:	f7ff ff2d 	bl	80014a8 <lcd_command>

	uint8_t memory_write_arg = 0x2C;
 800164e:	232c      	movs	r3, #44	; 0x2c
 8001650:	717b      	strb	r3, [r7, #5]
	lcd_command(memory_write_arg, 0, FRAME_SIZE_BYTES, (uint8_t *) display_frame); /* 320 * 240 * 2 (16 bits color) */
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <lcd_show_frame+0x70>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	7978      	ldrb	r0, [r7, #5]
 8001658:	f44f 3216 	mov.w	r2, #153600	; 0x25800
 800165c:	2100      	movs	r1, #0
 800165e:	f7ff ff23 	bl	80014a8 <lcd_command>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	2000009c 	.word	0x2000009c
 8001670:	200000a0 	.word	0x200000a0

08001674 <lcd_start>:
*
* This is the function that sends the entire list. It also puts
* the commands it is sending to the console.
*/
void lcd_start(const lcd_cmds_t cmds[])
{
 8001674:	b590      	push	{r4, r7, lr}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
	int com_idx = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	60fb      	str	r3, [r7, #12]

	while (cmds[com_idx].cmd)
 8001680:	e051      	b.n	8001726 <lcd_start+0xb2>
	{
		printf("CMD: %02X, ", cmds[com_idx].cmd);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	00db      	lsls	r3, r3, #3
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	4413      	add	r3, r2
 800168a:	789b      	ldrb	r3, [r3, #2]
 800168c:	4619      	mov	r1, r3
 800168e:	482d      	ldr	r0, [pc, #180]	; (8001744 <lcd_start+0xd0>)
 8001690:	f004 f9bc 	bl	8005a0c <iprintf>

		if (cmds[com_idx].args_len)
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	00db      	lsls	r3, r3, #3
 8001698:	687a      	ldr	r2, [r7, #4]
 800169a:	4413      	add	r3, r2
 800169c:	78db      	ldrb	r3, [r3, #3]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d01c      	beq.n	80016dc <lcd_start+0x68>
		{
			printf("ARGS: ");
 80016a2:	4829      	ldr	r0, [pc, #164]	; (8001748 <lcd_start+0xd4>)
 80016a4:	f004 f9b2 	bl	8005a0c <iprintf>

			uint8_t j;
			for (j = 0; j < cmds[com_idx].args_len; j++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	72fb      	strb	r3, [r7, #11]
 80016ac:	e00e      	b.n	80016cc <lcd_start+0x58>
				printf("%02X, ", cmds[com_idx].cmd_data[j]);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	00db      	lsls	r3, r3, #3
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	7afb      	ldrb	r3, [r7, #11]
 80016ba:	4413      	add	r3, r2
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	4619      	mov	r1, r3
 80016c0:	4822      	ldr	r0, [pc, #136]	; (800174c <lcd_start+0xd8>)
 80016c2:	f004 f9a3 	bl	8005a0c <iprintf>
			for (j = 0; j < cmds[com_idx].args_len; j++)
 80016c6:	7afb      	ldrb	r3, [r7, #11]
 80016c8:	3301      	adds	r3, #1
 80016ca:	72fb      	strb	r3, [r7, #11]
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	4413      	add	r3, r2
 80016d4:	78db      	ldrb	r3, [r3, #3]
 80016d6:	7afa      	ldrb	r2, [r7, #11]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d3e8      	bcc.n	80016ae <lcd_start+0x3a>
		}

		printf("\r\nDELAY: %d ms", cmds[com_idx].delay);
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	4413      	add	r3, r2
 80016e4:	881b      	ldrh	r3, [r3, #0]
 80016e6:	4619      	mov	r1, r3
 80016e8:	4819      	ldr	r0, [pc, #100]	; (8001750 <lcd_start+0xdc>)
 80016ea:	f004 f98f 	bl	8005a0c <iprintf>

		lcd_command(cmds[com_idx].cmd, cmds[com_idx].delay, cmds[com_idx].args_len, cmds[com_idx].cmd_data);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	00db      	lsls	r3, r3, #3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	4413      	add	r3, r2
 80016f6:	7898      	ldrb	r0, [r3, #2]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	00db      	lsls	r3, r3, #3
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	881b      	ldrh	r3, [r3, #0]
 8001702:	4619      	mov	r1, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	00db      	lsls	r3, r3, #3
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	78db      	ldrb	r3, [r3, #3]
 800170e:	461c      	mov	r4, r3
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	00db      	lsls	r3, r3, #3
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	4413      	add	r3, r2
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4622      	mov	r2, r4
 800171c:	f7ff fec4 	bl	80014a8 <lcd_command>
		com_idx++;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	3301      	adds	r3, #1
 8001724:	60fb      	str	r3, [r7, #12]
	while (cmds[com_idx].cmd)
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	4413      	add	r3, r2
 800172e:	789b      	ldrb	r3, [r3, #2]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d1a6      	bne.n	8001682 <lcd_start+0xe>
	}

	printf("Done\r\n");
 8001734:	4807      	ldr	r0, [pc, #28]	; (8001754 <lcd_start+0xe0>)
 8001736:	f004 f9ef 	bl	8005b18 <puts>
}
 800173a:	bf00      	nop
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	bd90      	pop	{r4, r7, pc}
 8001742:	bf00      	nop
 8001744:	08007f38 	.word	0x08007f38
 8001748:	08007f44 	.word	0x08007f44
 800174c:	08007f4c 	.word	0x08007f4c
 8001750:	08007f54 	.word	0x08007f54
 8001754:	08007f64 	.word	0x08007f64

08001758 <lcd_spi_init>:

void lcd_spi_init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	cur_frame = (uint16_t *) (SDRAM_BASE_ADDRESS);
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <lcd_spi_init+0x2c>)
 800175e:	f04f 4250 	mov.w	r2, #3489660928	; 0xd0000000
 8001762:	601a      	str	r2, [r3, #0]
	display_frame = cur_frame + (LCD_WIDTH * LCD_HEIGHT);
 8001764:	4b07      	ldr	r3, [pc, #28]	; (8001784 <lcd_spi_init+0x2c>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f503 3316 	add.w	r3, r3, #153600	; 0x25800
 800176c:	4a06      	ldr	r2, [pc, #24]	; (8001788 <lcd_spi_init+0x30>)
 800176e:	6013      	str	r3, [r2, #0]

	lcd_start(init_cmd);
 8001770:	4806      	ldr	r0, [pc, #24]	; (800178c <lcd_spi_init+0x34>)
 8001772:	f7ff ff7f 	bl	8001674 <lcd_start>
	lcd_test_image();
 8001776:	f7ff ff15 	bl	80015a4 <lcd_test_image>
	// gfx_fill_screen(LCD_CYAN);
	lcd_show_frame();
 800177a:	f7ff ff41 	bl	8001600 <lcd_show_frame>
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	2000009c 	.word	0x2000009c
 8001788:	200000a0 	.word	0x200000a0
 800178c:	08026848 	.word	0x08026848

08001790 <lcd_handler_run>:

void lcd_handler_run(void)
{
 8001790:	b598      	push	{r3, r4, r7, lr}
 8001792:	af00      	add	r7, sp, #0
	static int p1 = 0;
	static int p2 = 45;
	static int p3 = 90;

	gfx_fill_screen(LCD_BLACK);
 8001794:	2000      	movs	r0, #0
 8001796:	f7ff fca1 	bl	80010dc <gfx_fill_screen>

	// gfx_setTextColor(LCD_YELLOW, LCD_BLACK);
	// gfx_setTextSize(3);
	// gfx_puts("PLANETS!");

	gfx_fill_circle(LCD_WIDTH / 2, LCD_HEIGHT / 2, 40, LCD_YELLOW);
 800179a:	f24e 03ff 	movw	r3, #57599	; 0xe0ff
 800179e:	2228      	movs	r2, #40	; 0x28
 80017a0:	21a0      	movs	r1, #160	; 0xa0
 80017a2:	2078      	movs	r0, #120	; 0x78
 80017a4:	f7ff fe50 	bl	8001448 <gfx_fill_circle>
	gfx_draw_circle(LCD_WIDTH / 2, LCD_HEIGHT / 2, 55, LCD_GREY);
 80017a8:	f24c 3339 	movw	r3, #49977	; 0xc339
 80017ac:	2237      	movs	r2, #55	; 0x37
 80017ae:	21a0      	movs	r1, #160	; 0xa0
 80017b0:	2078      	movs	r0, #120	; 0x78
 80017b2:	f7ff fcab 	bl	800110c <gfx_draw_circle>
	gfx_draw_circle(LCD_WIDTH / 2, LCD_HEIGHT / 2, 75, LCD_GREY);
 80017b6:	f24c 3339 	movw	r3, #49977	; 0xc339
 80017ba:	224b      	movs	r2, #75	; 0x4b
 80017bc:	21a0      	movs	r1, #160	; 0xa0
 80017be:	2078      	movs	r0, #120	; 0x78
 80017c0:	f7ff fca4 	bl	800110c <gfx_draw_circle>
	gfx_draw_circle(LCD_WIDTH / 2, LCD_HEIGHT / 2, 100, LCD_GREY);
 80017c4:	f24c 3339 	movw	r3, #49977	; 0xc339
 80017c8:	2264      	movs	r2, #100	; 0x64
 80017ca:	21a0      	movs	r1, #160	; 0xa0
 80017cc:	2078      	movs	r0, #120	; 0x78
 80017ce:	f7ff fc9d 	bl	800110c <gfx_draw_circle>

	gfx_fill_circle(120 + (sin(d2r(p1)) * 55),  160 + (cos(d2r(p1)) * 55), 5, LCD_RED);
 80017d2:	4bc7      	ldr	r3, [pc, #796]	; (8001af0 <lcd_handler_run+0x360>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe feb4 	bl	8000544 <__aeabi_i2d>
 80017dc:	a3c0      	add	r3, pc, #768	; (adr r3, 8001ae0 <lcd_handler_run+0x350>)
 80017de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017e2:	f7fe ff19 	bl	8000618 <__aeabi_dmul>
 80017e6:	4602      	mov	r2, r0
 80017e8:	460b      	mov	r3, r1
 80017ea:	4610      	mov	r0, r2
 80017ec:	4619      	mov	r1, r3
 80017ee:	f04f 0200 	mov.w	r2, #0
 80017f2:	4bc0      	ldr	r3, [pc, #768]	; (8001af4 <lcd_handler_run+0x364>)
 80017f4:	f7ff f83a 	bl	800086c <__aeabi_ddiv>
 80017f8:	4602      	mov	r2, r0
 80017fa:	460b      	mov	r3, r1
 80017fc:	ec43 2b17 	vmov	d7, r2, r3
 8001800:	eeb0 0a47 	vmov.f32	s0, s14
 8001804:	eef0 0a67 	vmov.f32	s1, s15
 8001808:	f005 fb36 	bl	8006e78 <sin>
 800180c:	ec51 0b10 	vmov	r0, r1, d0
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	4bb8      	ldr	r3, [pc, #736]	; (8001af8 <lcd_handler_run+0x368>)
 8001816:	f7fe feff 	bl	8000618 <__aeabi_dmul>
 800181a:	4602      	mov	r2, r0
 800181c:	460b      	mov	r3, r1
 800181e:	4610      	mov	r0, r2
 8001820:	4619      	mov	r1, r3
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	4bb5      	ldr	r3, [pc, #724]	; (8001afc <lcd_handler_run+0x36c>)
 8001828:	f7fe fd40 	bl	80002ac <__adddf3>
 800182c:	4602      	mov	r2, r0
 800182e:	460b      	mov	r3, r1
 8001830:	4610      	mov	r0, r2
 8001832:	4619      	mov	r1, r3
 8001834:	f7ff f98a 	bl	8000b4c <__aeabi_d2iz>
 8001838:	4603      	mov	r3, r0
 800183a:	b21c      	sxth	r4, r3
 800183c:	4bac      	ldr	r3, [pc, #688]	; (8001af0 <lcd_handler_run+0x360>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fe7f 	bl	8000544 <__aeabi_i2d>
 8001846:	a3a6      	add	r3, pc, #664	; (adr r3, 8001ae0 <lcd_handler_run+0x350>)
 8001848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184c:	f7fe fee4 	bl	8000618 <__aeabi_dmul>
 8001850:	4602      	mov	r2, r0
 8001852:	460b      	mov	r3, r1
 8001854:	4610      	mov	r0, r2
 8001856:	4619      	mov	r1, r3
 8001858:	f04f 0200 	mov.w	r2, #0
 800185c:	4ba5      	ldr	r3, [pc, #660]	; (8001af4 <lcd_handler_run+0x364>)
 800185e:	f7ff f805 	bl	800086c <__aeabi_ddiv>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ec43 2b17 	vmov	d7, r2, r3
 800186a:	eeb0 0a47 	vmov.f32	s0, s14
 800186e:	eef0 0a67 	vmov.f32	s1, s15
 8001872:	f005 faad 	bl	8006dd0 <cos>
 8001876:	ec51 0b10 	vmov	r0, r1, d0
 800187a:	f04f 0200 	mov.w	r2, #0
 800187e:	4b9e      	ldr	r3, [pc, #632]	; (8001af8 <lcd_handler_run+0x368>)
 8001880:	f7fe feca 	bl	8000618 <__aeabi_dmul>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	4b9b      	ldr	r3, [pc, #620]	; (8001b00 <lcd_handler_run+0x370>)
 8001892:	f7fe fd0b 	bl	80002ac <__adddf3>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f955 	bl	8000b4c <__aeabi_d2iz>
 80018a2:	4603      	mov	r3, r0
 80018a4:	b219      	sxth	r1, r3
 80018a6:	23f8      	movs	r3, #248	; 0xf8
 80018a8:	2205      	movs	r2, #5
 80018aa:	4620      	mov	r0, r4
 80018ac:	f7ff fdcc 	bl	8001448 <gfx_fill_circle>
	gfx_fill_circle(120 + (sin(d2r(p2)) * 75),  160 + (cos(d2r(p2)) * 75), 10, LCD_WHITE);
 80018b0:	4b94      	ldr	r3, [pc, #592]	; (8001b04 <lcd_handler_run+0x374>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fe45 	bl	8000544 <__aeabi_i2d>
 80018ba:	a389      	add	r3, pc, #548	; (adr r3, 8001ae0 <lcd_handler_run+0x350>)
 80018bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c0:	f7fe feaa 	bl	8000618 <__aeabi_dmul>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <lcd_handler_run+0x364>)
 80018d2:	f7fe ffcb 	bl	800086c <__aeabi_ddiv>
 80018d6:	4602      	mov	r2, r0
 80018d8:	460b      	mov	r3, r1
 80018da:	ec43 2b17 	vmov	d7, r2, r3
 80018de:	eeb0 0a47 	vmov.f32	s0, s14
 80018e2:	eef0 0a67 	vmov.f32	s1, s15
 80018e6:	f005 fac7 	bl	8006e78 <sin>
 80018ea:	ec51 0b10 	vmov	r0, r1, d0
 80018ee:	a37e      	add	r3, pc, #504	; (adr r3, 8001ae8 <lcd_handler_run+0x358>)
 80018f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018f4:	f7fe fe90 	bl	8000618 <__aeabi_dmul>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	4610      	mov	r0, r2
 80018fe:	4619      	mov	r1, r3
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	4b7d      	ldr	r3, [pc, #500]	; (8001afc <lcd_handler_run+0x36c>)
 8001906:	f7fe fcd1 	bl	80002ac <__adddf3>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4610      	mov	r0, r2
 8001910:	4619      	mov	r1, r3
 8001912:	f7ff f91b 	bl	8000b4c <__aeabi_d2iz>
 8001916:	4603      	mov	r3, r0
 8001918:	b21c      	sxth	r4, r3
 800191a:	4b7a      	ldr	r3, [pc, #488]	; (8001b04 <lcd_handler_run+0x374>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe10 	bl	8000544 <__aeabi_i2d>
 8001924:	a36e      	add	r3, pc, #440	; (adr r3, 8001ae0 <lcd_handler_run+0x350>)
 8001926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192a:	f7fe fe75 	bl	8000618 <__aeabi_dmul>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	4b6e      	ldr	r3, [pc, #440]	; (8001af4 <lcd_handler_run+0x364>)
 800193c:	f7fe ff96 	bl	800086c <__aeabi_ddiv>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	ec43 2b17 	vmov	d7, r2, r3
 8001948:	eeb0 0a47 	vmov.f32	s0, s14
 800194c:	eef0 0a67 	vmov.f32	s1, s15
 8001950:	f005 fa3e 	bl	8006dd0 <cos>
 8001954:	ec51 0b10 	vmov	r0, r1, d0
 8001958:	a363      	add	r3, pc, #396	; (adr r3, 8001ae8 <lcd_handler_run+0x358>)
 800195a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195e:	f7fe fe5b 	bl	8000618 <__aeabi_dmul>
 8001962:	4602      	mov	r2, r0
 8001964:	460b      	mov	r3, r1
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	4b64      	ldr	r3, [pc, #400]	; (8001b00 <lcd_handler_run+0x370>)
 8001970:	f7fe fc9c 	bl	80002ac <__adddf3>
 8001974:	4602      	mov	r2, r0
 8001976:	460b      	mov	r3, r1
 8001978:	4610      	mov	r0, r2
 800197a:	4619      	mov	r1, r3
 800197c:	f7ff f8e6 	bl	8000b4c <__aeabi_d2iz>
 8001980:	4603      	mov	r3, r0
 8001982:	b219      	sxth	r1, r3
 8001984:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001988:	220a      	movs	r2, #10
 800198a:	4620      	mov	r0, r4
 800198c:	f7ff fd5c 	bl	8001448 <gfx_fill_circle>
	gfx_fill_circle(120 + (sin(d2r(p3)) * 100), 160 + (cos(d2r(p3)) * 100), 8, LCD_BLUE);
 8001990:	4b5d      	ldr	r3, [pc, #372]	; (8001b08 <lcd_handler_run+0x378>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4618      	mov	r0, r3
 8001996:	f7fe fdd5 	bl	8000544 <__aeabi_i2d>
 800199a:	a351      	add	r3, pc, #324	; (adr r3, 8001ae0 <lcd_handler_run+0x350>)
 800199c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a0:	f7fe fe3a 	bl	8000618 <__aeabi_dmul>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4610      	mov	r0, r2
 80019aa:	4619      	mov	r1, r3
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b50      	ldr	r3, [pc, #320]	; (8001af4 <lcd_handler_run+0x364>)
 80019b2:	f7fe ff5b 	bl	800086c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	ec43 2b17 	vmov	d7, r2, r3
 80019be:	eeb0 0a47 	vmov.f32	s0, s14
 80019c2:	eef0 0a67 	vmov.f32	s1, s15
 80019c6:	f005 fa57 	bl	8006e78 <sin>
 80019ca:	ec51 0b10 	vmov	r0, r1, d0
 80019ce:	f04f 0200 	mov.w	r2, #0
 80019d2:	4b4e      	ldr	r3, [pc, #312]	; (8001b0c <lcd_handler_run+0x37c>)
 80019d4:	f7fe fe20 	bl	8000618 <__aeabi_dmul>
 80019d8:	4602      	mov	r2, r0
 80019da:	460b      	mov	r3, r1
 80019dc:	4610      	mov	r0, r2
 80019de:	4619      	mov	r1, r3
 80019e0:	f04f 0200 	mov.w	r2, #0
 80019e4:	4b45      	ldr	r3, [pc, #276]	; (8001afc <lcd_handler_run+0x36c>)
 80019e6:	f7fe fc61 	bl	80002ac <__adddf3>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	4610      	mov	r0, r2
 80019f0:	4619      	mov	r1, r3
 80019f2:	f7ff f8ab 	bl	8000b4c <__aeabi_d2iz>
 80019f6:	4603      	mov	r3, r0
 80019f8:	b21c      	sxth	r4, r3
 80019fa:	4b43      	ldr	r3, [pc, #268]	; (8001b08 <lcd_handler_run+0x378>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe fda0 	bl	8000544 <__aeabi_i2d>
 8001a04:	a336      	add	r3, pc, #216	; (adr r3, 8001ae0 <lcd_handler_run+0x350>)
 8001a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0a:	f7fe fe05 	bl	8000618 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f04f 0200 	mov.w	r2, #0
 8001a1a:	4b36      	ldr	r3, [pc, #216]	; (8001af4 <lcd_handler_run+0x364>)
 8001a1c:	f7fe ff26 	bl	800086c <__aeabi_ddiv>
 8001a20:	4602      	mov	r2, r0
 8001a22:	460b      	mov	r3, r1
 8001a24:	ec43 2b17 	vmov	d7, r2, r3
 8001a28:	eeb0 0a47 	vmov.f32	s0, s14
 8001a2c:	eef0 0a67 	vmov.f32	s1, s15
 8001a30:	f005 f9ce 	bl	8006dd0 <cos>
 8001a34:	ec51 0b10 	vmov	r0, r1, d0
 8001a38:	f04f 0200 	mov.w	r2, #0
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <lcd_handler_run+0x37c>)
 8001a3e:	f7fe fdeb 	bl	8000618 <__aeabi_dmul>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4610      	mov	r0, r2
 8001a48:	4619      	mov	r1, r3
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b2c      	ldr	r3, [pc, #176]	; (8001b00 <lcd_handler_run+0x370>)
 8001a50:	f7fe fc2c 	bl	80002ac <__adddf3>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4610      	mov	r0, r2
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	f7ff f876 	bl	8000b4c <__aeabi_d2iz>
 8001a60:	4603      	mov	r3, r0
 8001a62:	b219      	sxth	r1, r3
 8001a64:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001a68:	2208      	movs	r2, #8
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	f7ff fcec 	bl	8001448 <gfx_fill_circle>

	p1 = (p1 + 3 * 10) % 360;
 8001a70:	4b1f      	ldr	r3, [pc, #124]	; (8001af0 <lcd_handler_run+0x360>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	331e      	adds	r3, #30
 8001a76:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <lcd_handler_run+0x380>)
 8001a78:	fb82 1203 	smull	r1, r2, r2, r3
 8001a7c:	441a      	add	r2, r3
 8001a7e:	1211      	asrs	r1, r2, #8
 8001a80:	17da      	asrs	r2, r3, #31
 8001a82:	1a8a      	subs	r2, r1, r2
 8001a84:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001a88:	fb01 f202 	mul.w	r2, r1, r2
 8001a8c:	1a9a      	subs	r2, r3, r2
 8001a8e:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <lcd_handler_run+0x360>)
 8001a90:	601a      	str	r2, [r3, #0]
	p2 = (p2 + 2 * 10) % 360;
 8001a92:	4b1c      	ldr	r3, [pc, #112]	; (8001b04 <lcd_handler_run+0x374>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	3314      	adds	r3, #20
 8001a98:	4a1d      	ldr	r2, [pc, #116]	; (8001b10 <lcd_handler_run+0x380>)
 8001a9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001a9e:	441a      	add	r2, r3
 8001aa0:	1211      	asrs	r1, r2, #8
 8001aa2:	17da      	asrs	r2, r3, #31
 8001aa4:	1a8a      	subs	r2, r1, r2
 8001aa6:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001aaa:	fb01 f202 	mul.w	r2, r1, r2
 8001aae:	1a9a      	subs	r2, r3, r2
 8001ab0:	4b14      	ldr	r3, [pc, #80]	; (8001b04 <lcd_handler_run+0x374>)
 8001ab2:	601a      	str	r2, [r3, #0]
	p3 = (p3 + 1 * 10) % 360;
 8001ab4:	4b14      	ldr	r3, [pc, #80]	; (8001b08 <lcd_handler_run+0x378>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	330a      	adds	r3, #10
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <lcd_handler_run+0x380>)
 8001abc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ac0:	441a      	add	r2, r3
 8001ac2:	1211      	asrs	r1, r2, #8
 8001ac4:	17da      	asrs	r2, r3, #31
 8001ac6:	1a8a      	subs	r2, r1, r2
 8001ac8:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001acc:	fb01 f202 	mul.w	r2, r1, r2
 8001ad0:	1a9a      	subs	r2, r3, r2
 8001ad2:	4b0d      	ldr	r3, [pc, #52]	; (8001b08 <lcd_handler_run+0x378>)
 8001ad4:	601a      	str	r2, [r3, #0]

	lcd_show_frame();
 8001ad6:	f7ff fd93 	bl	8001600 <lcd_show_frame>
}
 8001ada:	bf00      	nop
 8001adc:	bd98      	pop	{r3, r4, r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	53c8d4f1 	.word	0x53c8d4f1
 8001ae4:	401921fb 	.word	0x401921fb
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	4052c000 	.word	0x4052c000
 8001af0:	200000a4 	.word	0x200000a4
 8001af4:	40768000 	.word	0x40768000
 8001af8:	404b8000 	.word	0x404b8000
 8001afc:	405e0000 	.word	0x405e0000
 8001b00:	40640000 	.word	0x40640000
 8001b04:	20000000 	.word	0x20000000
 8001b08:	20000004 	.word	0x20000004
 8001b0c:	40590000 	.word	0x40590000
 8001b10:	b60b60b7 	.word	0xb60b60b7

08001b14 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
	/* Place your implementation of fputc here */
	/* e.g. write a character to the USART1 and Loop until the end of transmission */
    HAL_UART_Transmit(&huart1, (uint8_t *) &ch, 1, 0xFFFF);
 8001b1c:	1d39      	adds	r1, r7, #4
 8001b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b22:	2201      	movs	r2, #1
 8001b24:	4803      	ldr	r0, [pc, #12]	; (8001b34 <__io_putchar+0x20>)
 8001b26:	f003 fab0 	bl	800508a <HAL_UART_Transmit>

    return ch;
 8001b2a:	687b      	ldr	r3, [r7, #4]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3708      	adds	r7, #8
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000154 	.word	0x20000154

08001b38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b3c:	f000 ff4e 	bl	80029dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b40:	f000 f81c 	bl	8001b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b44:	f000 f978 	bl	8001e38 <MX_GPIO_Init>
  MX_I2C3_Init();
 8001b48:	f000 f884 	bl	8001c54 <MX_I2C3_Init>
  MX_USART1_UART_Init();
 8001b4c:	f000 f8fa 	bl	8001d44 <MX_USART1_UART_Init>
  MX_FMC_Init();
 8001b50:	f000 f922 	bl	8001d98 <MX_FMC_Init>
  MX_SPI5_Init();
 8001b54:	f000 f8be 	bl	8001cd4 <MX_SPI5_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  i2c_touch_init();
 8001b58:	f000 fd68 	bl	800262c <i2c_touch_init>
  sdram_init_sequence();
 8001b5c:	f000 fa20 	bl	8001fa0 <sdram_init_sequence>
  lcd_spi_init();
 8001b60:	f7ff fdfa 	bl	8001758 <lcd_spi_init>
  HAL_Delay(2000);
 8001b64:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b68:	f000 ffaa 	bl	8002ac0 <HAL_Delay>



  while (1)
  {
	  i2c_touch_handler();
 8001b6c:	f000 ff06 	bl	800297c <i2c_touch_handler>
	  lcd_handler_run();
 8001b70:	f7ff fe0e 	bl	8001790 <lcd_handler_run>
	  HAL_Delay(16);
 8001b74:	2010      	movs	r0, #16
 8001b76:	f000 ffa3 	bl	8002ac0 <HAL_Delay>
	  i2c_touch_handler();
 8001b7a:	e7f7      	b.n	8001b6c <main+0x34>

08001b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b094      	sub	sp, #80	; 0x50
 8001b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b82:	f107 0320 	add.w	r3, r7, #32
 8001b86:	2230      	movs	r2, #48	; 0x30
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f003 ff36 	bl	80059fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b90:	f107 030c 	add.w	r3, r7, #12
 8001b94:	2200      	movs	r2, #0
 8001b96:	601a      	str	r2, [r3, #0]
 8001b98:	605a      	str	r2, [r3, #4]
 8001b9a:	609a      	str	r2, [r3, #8]
 8001b9c:	60da      	str	r2, [r3, #12]
 8001b9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	60bb      	str	r3, [r7, #8]
 8001ba4:	4b29      	ldr	r3, [pc, #164]	; (8001c4c <SystemClock_Config+0xd0>)
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	4a28      	ldr	r2, [pc, #160]	; (8001c4c <SystemClock_Config+0xd0>)
 8001baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bae:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <SystemClock_Config+0xd0>)
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb8:	60bb      	str	r3, [r7, #8]
 8001bba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
 8001bc0:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <SystemClock_Config+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001bc8:	4a21      	ldr	r2, [pc, #132]	; (8001c50 <SystemClock_Config+0xd4>)
 8001bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b1f      	ldr	r3, [pc, #124]	; (8001c50 <SystemClock_Config+0xd4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be6:	2302      	movs	r3, #2
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001bf0:	2304      	movs	r3, #4
 8001bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001bf4:	2378      	movs	r3, #120	; 0x78
 8001bf6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	f107 0320 	add.w	r3, r7, #32
 8001c04:	4618      	mov	r0, r3
 8001c06:	f002 fa3b 	bl	8004080 <HAL_RCC_OscConfig>
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d001      	beq.n	8001c14 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001c10:	f000 f9c0 	bl	8001f94 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c14:	230f      	movs	r3, #15
 8001c16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c20:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001c2c:	f107 030c 	add.w	r3, r7, #12
 8001c30:	2103      	movs	r1, #3
 8001c32:	4618      	mov	r0, r3
 8001c34:	f002 fc9c 	bl	8004570 <HAL_RCC_ClockConfig>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d001      	beq.n	8001c42 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001c3e:	f000 f9a9 	bl	8001f94 <Error_Handler>
  }
}
 8001c42:	bf00      	nop
 8001c44:	3750      	adds	r7, #80	; 0x50
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	40023800 	.word	0x40023800
 8001c50:	40007000 	.word	0x40007000

08001c54 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001c58:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c5a:	4a1c      	ldr	r2, [pc, #112]	; (8001ccc <MX_I2C3_Init+0x78>)
 8001c5c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c60:	4a1b      	ldr	r2, [pc, #108]	; (8001cd0 <MX_I2C3_Init+0x7c>)
 8001c62:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8001c6a:	4b17      	ldr	r3, [pc, #92]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c70:	4b15      	ldr	r3, [pc, #84]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c76:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8001c7e:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c84:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c8a:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001c90:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001c92:	f001 f9e5 	bl	8003060 <HAL_I2C_Init>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8001c9c:	f000 f97a 	bl	8001f94 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4809      	ldr	r0, [pc, #36]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001ca4:	f002 f971 	bl	8003f8a <HAL_I2CEx_ConfigAnalogFilter>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8001cae:	f000 f971 	bl	8001f94 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	4804      	ldr	r0, [pc, #16]	; (8001cc8 <MX_I2C3_Init+0x74>)
 8001cb6:	f002 f9a4 	bl	8004002 <HAL_I2CEx_ConfigDigitalFilter>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d001      	beq.n	8001cc4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8001cc0:	f000 f968 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001cc4:	bf00      	nop
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200000a8 	.word	0x200000a8
 8001ccc:	40005c00 	.word	0x40005c00
 8001cd0:	000186a0 	.word	0x000186a0

08001cd4 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001cda:	4a19      	ldr	r2, [pc, #100]	; (8001d40 <MX_SPI5_Init+0x6c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b17      	ldr	r3, [pc, #92]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_1LINE;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001ce8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001cec:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001cee:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001d00:	4b0e      	ldr	r3, [pc, #56]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001d02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d06:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d14:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001d22:	220a      	movs	r2, #10
 8001d24:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	; (8001d3c <MX_SPI5_Init+0x68>)
 8001d28:	f002 fed3 	bl	8004ad2 <HAL_SPI_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_SPI5_Init+0x62>
  {
    Error_Handler();
 8001d32:	f000 f92f 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200000fc 	.word	0x200000fc
 8001d40:	40015000 	.word	0x40015000

08001d44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d48:	4b11      	ldr	r3, [pc, #68]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d4a:	4a12      	ldr	r2, [pc, #72]	; (8001d94 <MX_USART1_UART_Init+0x50>)
 8001d4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d4e:	4b10      	ldr	r3, [pc, #64]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001d56:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001d5c:	4b0c      	ldr	r3, [pc, #48]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001d68:	4b09      	ldr	r3, [pc, #36]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d6e:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d74:	4b06      	ldr	r3, [pc, #24]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001d7a:	4805      	ldr	r0, [pc, #20]	; (8001d90 <MX_USART1_UART_Init+0x4c>)
 8001d7c:	f003 f938 	bl	8004ff0 <HAL_UART_Init>
 8001d80:	4603      	mov	r3, r0
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d001      	beq.n	8001d8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d86:	f000 f905 	bl	8001f94 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000154 	.word	0x20000154
 8001d94:	40011000 	.word	0x40011000

08001d98 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001d9e:	1d3b      	adds	r3, r7, #4
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
 8001dac:	615a      	str	r2, [r3, #20]
 8001dae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001db0:	4b1f      	ldr	r3, [pc, #124]	; (8001e30 <MX_FMC_Init+0x98>)
 8001db2:	4a20      	ldr	r2, [pc, #128]	; (8001e34 <MX_FMC_Init+0x9c>)
 8001db4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001db6:	4b1e      	ldr	r3, [pc, #120]	; (8001e30 <MX_FMC_Init+0x98>)
 8001db8:	2201      	movs	r2, #1
 8001dba:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	; (8001e30 <MX_FMC_Init+0x98>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001dc2:	4b1b      	ldr	r3, [pc, #108]	; (8001e30 <MX_FMC_Init+0x98>)
 8001dc4:	2204      	movs	r2, #4
 8001dc6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001dc8:	4b19      	ldr	r3, [pc, #100]	; (8001e30 <MX_FMC_Init+0x98>)
 8001dca:	2210      	movs	r2, #16
 8001dcc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001dce:	4b18      	ldr	r3, [pc, #96]	; (8001e30 <MX_FMC_Init+0x98>)
 8001dd0:	2240      	movs	r2, #64	; 0x40
 8001dd2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001dd4:	4b16      	ldr	r3, [pc, #88]	; (8001e30 <MX_FMC_Init+0x98>)
 8001dd6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8001dda:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001ddc:	4b14      	ldr	r3, [pc, #80]	; (8001e30 <MX_FMC_Init+0x98>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8001de2:	4b13      	ldr	r3, [pc, #76]	; (8001e30 <MX_FMC_Init+0x98>)
 8001de4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001de8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001dea:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <MX_FMC_Init+0x98>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <MX_FMC_Init+0x98>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8001df6:	2302      	movs	r3, #2
 8001df8:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 5;
 8001dfa:	2305      	movs	r3, #5
 8001dfc:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 3;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 4;
 8001e02:	2304      	movs	r3, #4
 8001e04:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 2;
 8001e06:	2302      	movs	r3, #2
 8001e08:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 1;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001e12:	1d3b      	adds	r3, r7, #4
 8001e14:	4619      	mov	r1, r3
 8001e16:	4806      	ldr	r0, [pc, #24]	; (8001e30 <MX_FMC_Init+0x98>)
 8001e18:	f002 fdca 	bl	80049b0 <HAL_SDRAM_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_FMC_Init+0x8e>
  {
    Error_Handler( );
 8001e22:	f000 f8b7 	bl	8001f94 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001e26:	bf00      	nop
 8001e28:	3720      	adds	r7, #32
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	20000198 	.word	0x20000198
 8001e34:	a0000140 	.word	0xa0000140

08001e38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b08e      	sub	sp, #56	; 0x38
 8001e3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e42:	2200      	movs	r2, #0
 8001e44:	601a      	str	r2, [r3, #0]
 8001e46:	605a      	str	r2, [r3, #4]
 8001e48:	609a      	str	r2, [r3, #8]
 8001e4a:	60da      	str	r2, [r3, #12]
 8001e4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e4e:	2300      	movs	r3, #0
 8001e50:	623b      	str	r3, [r7, #32]
 8001e52:	4b4d      	ldr	r3, [pc, #308]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e56:	4a4c      	ldr	r2, [pc, #304]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5e:	4b4a      	ldr	r3, [pc, #296]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e62:	f003 0320 	and.w	r3, r3, #32
 8001e66:	623b      	str	r3, [r7, #32]
 8001e68:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61fb      	str	r3, [r7, #28]
 8001e6e:	4b46      	ldr	r3, [pc, #280]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	4a45      	ldr	r2, [pc, #276]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e78:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7a:	4b43      	ldr	r3, [pc, #268]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	4b3f      	ldr	r3, [pc, #252]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a3e      	ldr	r2, [pc, #248]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b3c      	ldr	r3, [pc, #240]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b38      	ldr	r3, [pc, #224]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a37      	ldr	r2, [pc, #220]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001eac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b35      	ldr	r3, [pc, #212]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b31      	ldr	r3, [pc, #196]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a30      	ldr	r2, [pc, #192]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001ec8:	f043 0310 	orr.w	r3, r3, #16
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b2e      	ldr	r3, [pc, #184]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b2a      	ldr	r3, [pc, #168]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a29      	ldr	r2, [pc, #164]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001ee4:	f043 0308 	orr.w	r3, r3, #8
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b27      	ldr	r3, [pc, #156]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0308 	and.w	r3, r3, #8
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b23      	ldr	r3, [pc, #140]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a22      	ldr	r2, [pc, #136]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a1b      	ldr	r2, [pc, #108]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001f1c:	f043 0302 	orr.w	r3, r3, #2
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <MX_GPIO_Init+0x150>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	2104      	movs	r1, #4
 8001f32:	4816      	ldr	r0, [pc, #88]	; (8001f8c <MX_GPIO_Init+0x154>)
 8001f34:	f001 f87a 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001f3e:	4814      	ldr	r0, [pc, #80]	; (8001f90 <MX_GPIO_Init+0x158>)
 8001f40:	f001 f874 	bl	800302c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f44:	2304      	movs	r3, #4
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f50:	2300      	movs	r3, #0
 8001f52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f58:	4619      	mov	r1, r3
 8001f5a:	480c      	ldr	r0, [pc, #48]	; (8001f8c <MX_GPIO_Init+0x154>)
 8001f5c:	f000 feba 	bl	8002cd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001f60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f64:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f66:	2301      	movs	r3, #1
 8001f68:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_GPIO_Init+0x158>)
 8001f7a:	f000 feab 	bl	8002cd4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f7e:	bf00      	nop
 8001f80:	3738      	adds	r7, #56	; 0x38
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	40020800 	.word	0x40020800
 8001f90:	40020c00 	.word	0x40020c00

08001f94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f98:	b672      	cpsid	i
}
 8001f9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f9c:	e7fe      	b.n	8001f9c <Error_Handler+0x8>
	...

08001fa0 <sdram_init_sequence>:
	uint8_t* addr = SDRAM_BASE_ADDRESS;
	sdram_print_page(addr);
}

void sdram_init_sequence(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
	  FMC_SDRAM_CommandTypeDef SDRAM_CommandStructure;

#if 1
	/* Configure a clock configuration enable command */
	SDRAM_CommandStructure.CommandMode              = FMC_SDRAM_CMD_CLK_ENABLE;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	603b      	str	r3, [r7, #0]
	SDRAM_CommandStructure.CommandTarget            = FMC_SDRAM_CMD_TARGET_BANK2;
 8001faa:	2308      	movs	r3, #8
 8001fac:	607b      	str	r3, [r7, #4]
	SDRAM_CommandStructure.AutoRefreshNumber        = 1;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	60bb      	str	r3, [r7, #8]
	SDRAM_CommandStructure.ModeRegisterDefinition   = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram1, &SDRAM_CommandStructure, 100);
 8001fb6:	463b      	mov	r3, r7
 8001fb8:	2264      	movs	r2, #100	; 0x64
 8001fba:	4619      	mov	r1, r3
 8001fbc:	481a      	ldr	r0, [pc, #104]	; (8002028 <sdram_init_sequence+0x88>)
 8001fbe:	f002 fd2b 	bl	8004a18 <HAL_SDRAM_SendCommand>
#endif

#if 1
	/* Configure a PALL (precharge all) command */ 
	SDRAM_CommandStructure.CommandMode              = FMC_SDRAM_CMD_PALL;
 8001fc2:	2302      	movs	r3, #2
 8001fc4:	603b      	str	r3, [r7, #0]
	SDRAM_CommandStructure.CommandTarget            = FMC_SDRAM_CMD_TARGET_BANK2;
 8001fc6:	2308      	movs	r3, #8
 8001fc8:	607b      	str	r3, [r7, #4]
	SDRAM_CommandStructure.AutoRefreshNumber        = 1;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
	SDRAM_CommandStructure.ModeRegisterDefinition   = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram1, &SDRAM_CommandStructure, 100);
 8001fd2:	463b      	mov	r3, r7
 8001fd4:	2264      	movs	r2, #100	; 0x64
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	4813      	ldr	r0, [pc, #76]	; (8002028 <sdram_init_sequence+0x88>)
 8001fda:	f002 fd1d 	bl	8004a18 <HAL_SDRAM_SendCommand>
#endif

#if 1
	/* Configure a Auto-Refresh command */ 
	SDRAM_CommandStructure.CommandMode              = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	603b      	str	r3, [r7, #0]
	SDRAM_CommandStructure.CommandTarget            = FMC_SDRAM_CMD_TARGET_BANK2;
 8001fe2:	2308      	movs	r3, #8
 8001fe4:	607b      	str	r3, [r7, #4]
	SDRAM_CommandStructure.AutoRefreshNumber        = 1;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	60bb      	str	r3, [r7, #8]
	SDRAM_CommandStructure.ModeRegisterDefinition   = 0;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram1, &SDRAM_CommandStructure, 100);
 8001fee:	463b      	mov	r3, r7
 8001ff0:	2264      	movs	r2, #100	; 0x64
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	480c      	ldr	r0, [pc, #48]	; (8002028 <sdram_init_sequence+0x88>)
 8001ff6:	f002 fd0f 	bl	8004a18 <HAL_SDRAM_SendCommand>
#endif

#if 1
	/* Configure a load Mode register command */
	SDRAM_CommandStructure.CommandMode              = FMC_SDRAM_CMD_LOAD_MODE;
 8001ffa:	2304      	movs	r3, #4
 8001ffc:	603b      	str	r3, [r7, #0]
	SDRAM_CommandStructure.CommandTarget            = FMC_SDRAM_CMD_TARGET_BANK2;
 8001ffe:	2308      	movs	r3, #8
 8002000:	607b      	str	r3, [r7, #4]
	SDRAM_CommandStructure.AutoRefreshNumber        = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	60bb      	str	r3, [r7, #8]
	SDRAM_CommandStructure.ModeRegisterDefinition   = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	60fb      	str	r3, [r7, #12]
	HAL_SDRAM_SendCommand(&hsdram1, &SDRAM_CommandStructure, 100);
 800200a:	463b      	mov	r3, r7
 800200c:	2264      	movs	r2, #100	; 0x64
 800200e:	4619      	mov	r1, r3
 8002010:	4805      	ldr	r0, [pc, #20]	; (8002028 <sdram_init_sequence+0x88>)
 8002012:	f002 fd01 	bl	8004a18 <HAL_SDRAM_SendCommand>
	If main clock is 120MHz:
		Refresh count           = 15.625us * 60MHz = 937.5
		Applying safe margin    = 937.5 - 20 = 917.5
   */
#define SDRAM_REFRESH_COUNT   917
  HAL_SDRAM_SetAutoRefreshNumber(&hsdram1, SDRAM_REFRESH_COUNT);
 8002016:	f240 3195 	movw	r1, #917	; 0x395
 800201a:	4803      	ldr	r0, [pc, #12]	; (8002028 <sdram_init_sequence+0x88>)
 800201c:	f002 fd31 	bl	8004a82 <HAL_SDRAM_SetAutoRefreshNumber>
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	20000198 	.word	0x20000198

0800202c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	607b      	str	r3, [r7, #4]
 8002036:	4b10      	ldr	r3, [pc, #64]	; (8002078 <HAL_MspInit+0x4c>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a0f      	ldr	r2, [pc, #60]	; (8002078 <HAL_MspInit+0x4c>)
 800203c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <HAL_MspInit+0x4c>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800204a:	607b      	str	r3, [r7, #4]
 800204c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204e:	2300      	movs	r3, #0
 8002050:	603b      	str	r3, [r7, #0]
 8002052:	4b09      	ldr	r3, [pc, #36]	; (8002078 <HAL_MspInit+0x4c>)
 8002054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002056:	4a08      	ldr	r2, [pc, #32]	; (8002078 <HAL_MspInit+0x4c>)
 8002058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800205c:	6413      	str	r3, [r2, #64]	; 0x40
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_MspInit+0x4c>)
 8002060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002066:	603b      	str	r3, [r7, #0]
 8002068:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800206a:	bf00      	nop
 800206c:	370c      	adds	r7, #12
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	40023800 	.word	0x40023800

0800207c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b08a      	sub	sp, #40	; 0x28
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 0314 	add.w	r3, r7, #20
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a29      	ldr	r2, [pc, #164]	; (8002140 <HAL_I2C_MspInit+0xc4>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d14b      	bne.n	8002136 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	613b      	str	r3, [r7, #16]
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 80020a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a6:	4a27      	ldr	r2, [pc, #156]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 80020a8:	f043 0304 	orr.w	r3, r3, #4
 80020ac:	6313      	str	r3, [r2, #48]	; 0x30
 80020ae:	4b25      	ldr	r3, [pc, #148]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	f003 0304 	and.w	r3, r3, #4
 80020b6:	613b      	str	r3, [r7, #16]
 80020b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	2300      	movs	r3, #0
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	4b21      	ldr	r3, [pc, #132]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c2:	4a20      	ldr	r2, [pc, #128]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ca:	4b1e      	ldr	r3, [pc, #120]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 80020cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	60fb      	str	r3, [r7, #12]
 80020d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80020d6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020dc:	2312      	movs	r3, #18
 80020de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e0:	2300      	movs	r3, #0
 80020e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020e4:	2303      	movs	r3, #3
 80020e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80020e8:	2304      	movs	r3, #4
 80020ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020ec:	f107 0314 	add.w	r3, r7, #20
 80020f0:	4619      	mov	r1, r3
 80020f2:	4815      	ldr	r0, [pc, #84]	; (8002148 <HAL_I2C_MspInit+0xcc>)
 80020f4:	f000 fdee 	bl	8002cd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80020f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020fe:	2312      	movs	r3, #18
 8002100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002106:	2303      	movs	r3, #3
 8002108:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800210a:	2304      	movs	r3, #4
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <HAL_I2C_MspInit+0xd0>)
 8002116:	f000 fddd 	bl	8002cd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800211a:	2300      	movs	r3, #0
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	4b09      	ldr	r3, [pc, #36]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	4a08      	ldr	r2, [pc, #32]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 8002124:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002128:	6413      	str	r3, [r2, #64]	; 0x40
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <HAL_I2C_MspInit+0xc8>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002136:	bf00      	nop
 8002138:	3728      	adds	r7, #40	; 0x28
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40005c00 	.word	0x40005c00
 8002144:	40023800 	.word	0x40023800
 8002148:	40020800 	.word	0x40020800
 800214c:	40020000 	.word	0x40020000

08002150 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b08a      	sub	sp, #40	; 0x28
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2200      	movs	r2, #0
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	605a      	str	r2, [r3, #4]
 8002162:	609a      	str	r2, [r3, #8]
 8002164:	60da      	str	r2, [r3, #12]
 8002166:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a19      	ldr	r2, [pc, #100]	; (80021d4 <HAL_SPI_MspInit+0x84>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d12c      	bne.n	80021cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	613b      	str	r3, [r7, #16]
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <HAL_SPI_MspInit+0x88>)
 8002178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217a:	4a17      	ldr	r2, [pc, #92]	; (80021d8 <HAL_SPI_MspInit+0x88>)
 800217c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002180:	6453      	str	r3, [r2, #68]	; 0x44
 8002182:	4b15      	ldr	r3, [pc, #84]	; (80021d8 <HAL_SPI_MspInit+0x88>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800218a:	613b      	str	r3, [r7, #16]
 800218c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	60fb      	str	r3, [r7, #12]
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <HAL_SPI_MspInit+0x88>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	4a10      	ldr	r2, [pc, #64]	; (80021d8 <HAL_SPI_MspInit+0x88>)
 8002198:	f043 0320 	orr.w	r3, r3, #32
 800219c:	6313      	str	r3, [r2, #48]	; 0x30
 800219e:	4b0e      	ldr	r3, [pc, #56]	; (80021d8 <HAL_SPI_MspInit+0x88>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	f003 0320 	and.w	r3, r3, #32
 80021a6:	60fb      	str	r3, [r7, #12]
 80021a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80021aa:	f44f 7320 	mov.w	r3, #640	; 0x280
 80021ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021b0:	2302      	movs	r3, #2
 80021b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80021bc:	2305      	movs	r3, #5
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	4619      	mov	r1, r3
 80021c6:	4805      	ldr	r0, [pc, #20]	; (80021dc <HAL_SPI_MspInit+0x8c>)
 80021c8:	f000 fd84 	bl	8002cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }

}
 80021cc:	bf00      	nop
 80021ce:	3728      	adds	r7, #40	; 0x28
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40015000 	.word	0x40015000
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40021400 	.word	0x40021400

080021e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	; 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a19      	ldr	r2, [pc, #100]	; (8002264 <HAL_UART_MspInit+0x84>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d12c      	bne.n	800225c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002208:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800220a:	4a17      	ldr	r2, [pc, #92]	; (8002268 <HAL_UART_MspInit+0x88>)
 800220c:	f043 0310 	orr.w	r3, r3, #16
 8002210:	6453      	str	r3, [r2, #68]	; 0x44
 8002212:	4b15      	ldr	r3, [pc, #84]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002216:	f003 0310 	and.w	r3, r3, #16
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b11      	ldr	r3, [pc, #68]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a10      	ldr	r2, [pc, #64]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <HAL_UART_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800223a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800224c:	2307      	movs	r3, #7
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4805      	ldr	r0, [pc, #20]	; (800226c <HAL_UART_MspInit+0x8c>)
 8002258:	f000 fd3c 	bl	8002cd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3728      	adds	r7, #40	; 0x28
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40011000 	.word	0x40011000
 8002268:	40023800 	.word	0x40023800
 800226c:	40020000 	.word	0x40020000

08002270 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002284:	4b3b      	ldr	r3, [pc, #236]	; (8002374 <HAL_FMC_MspInit+0x104>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d16f      	bne.n	800236c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800228c:	4b39      	ldr	r3, [pc, #228]	; (8002374 <HAL_FMC_MspInit+0x104>)
 800228e:	2201      	movs	r2, #1
 8002290:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002292:	2300      	movs	r3, #0
 8002294:	603b      	str	r3, [r7, #0]
 8002296:	4b38      	ldr	r3, [pc, #224]	; (8002378 <HAL_FMC_MspInit+0x108>)
 8002298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800229a:	4a37      	ldr	r2, [pc, #220]	; (8002378 <HAL_FMC_MspInit+0x108>)
 800229c:	f043 0301 	orr.w	r3, r3, #1
 80022a0:	6393      	str	r3, [r2, #56]	; 0x38
 80022a2:	4b35      	ldr	r3, [pc, #212]	; (8002378 <HAL_FMC_MspInit+0x108>)
 80022a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	603b      	str	r3, [r7, #0]
 80022ac:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80022ae:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80022b2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_11|GPIO_PIN_12
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b4:	2302      	movs	r3, #2
 80022b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022bc:	2303      	movs	r3, #3
 80022be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022c0:	230c      	movs	r3, #12
 80022c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80022c4:	1d3b      	adds	r3, r7, #4
 80022c6:	4619      	mov	r1, r3
 80022c8:	482c      	ldr	r0, [pc, #176]	; (800237c <HAL_FMC_MspInit+0x10c>)
 80022ca:	f000 fd03 	bl	8002cd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80022ce:	2301      	movs	r3, #1
 80022d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d2:	2302      	movs	r3, #2
 80022d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022da:	2303      	movs	r3, #3
 80022dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022de:	230c      	movs	r3, #12
 80022e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	4619      	mov	r1, r3
 80022e6:	4826      	ldr	r0, [pc, #152]	; (8002380 <HAL_FMC_MspInit+0x110>)
 80022e8:	f000 fcf4 	bl	8002cd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 80022ec:	f248 1337 	movw	r3, #33079	; 0x8137
 80022f0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_8|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fa:	2303      	movs	r3, #3
 80022fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80022fe:	230c      	movs	r3, #12
 8002300:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4619      	mov	r1, r3
 8002306:	481f      	ldr	r0, [pc, #124]	; (8002384 <HAL_FMC_MspInit+0x114>)
 8002308:	f000 fce4 	bl	8002cd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800230c:	f64f 7383 	movw	r3, #65411	; 0xff83
 8002310:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800231e:	230c      	movs	r3, #12
 8002320:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002322:	1d3b      	adds	r3, r7, #4
 8002324:	4619      	mov	r1, r3
 8002326:	4818      	ldr	r0, [pc, #96]	; (8002388 <HAL_FMC_MspInit+0x118>)
 8002328:	f000 fcd4 	bl	8002cd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800232c:	f24c 7303 	movw	r3, #50947	; 0xc703
 8002330:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800233e:	230c      	movs	r3, #12
 8002340:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002342:	1d3b      	adds	r3, r7, #4
 8002344:	4619      	mov	r1, r3
 8002346:	4811      	ldr	r0, [pc, #68]	; (800238c <HAL_FMC_MspInit+0x11c>)
 8002348:	f000 fcc4 	bl	8002cd4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800234c:	2360      	movs	r3, #96	; 0x60
 800234e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002350:	2302      	movs	r3, #2
 8002352:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002354:	2300      	movs	r3, #0
 8002356:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002358:	2303      	movs	r3, #3
 800235a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800235c:	230c      	movs	r3, #12
 800235e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	4619      	mov	r1, r3
 8002364:	480a      	ldr	r0, [pc, #40]	; (8002390 <HAL_FMC_MspInit+0x120>)
 8002366:	f000 fcb5 	bl	8002cd4 <HAL_GPIO_Init>
 800236a:	e000      	b.n	800236e <HAL_FMC_MspInit+0xfe>
    return;
 800236c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800236e:	3718      	adds	r7, #24
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	200001cc 	.word	0x200001cc
 8002378:	40023800 	.word	0x40023800
 800237c:	40021400 	.word	0x40021400
 8002380:	40020800 	.word	0x40020800
 8002384:	40021800 	.word	0x40021800
 8002388:	40021000 	.word	0x40021000
 800238c:	40020c00 	.word	0x40020c00
 8002390:	40020400 	.word	0x40020400

08002394 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800239c:	f7ff ff68 	bl	8002270 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80023a0:	bf00      	nop
 80023a2:	3708      	adds	r7, #8
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80023ac:	e7fe      	b.n	80023ac <NMI_Handler+0x4>

080023ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ae:	b480      	push	{r7}
 80023b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023b2:	e7fe      	b.n	80023b2 <HardFault_Handler+0x4>

080023b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023b8:	e7fe      	b.n	80023b8 <MemManage_Handler+0x4>

080023ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023ba:	b480      	push	{r7}
 80023bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023be:	e7fe      	b.n	80023be <BusFault_Handler+0x4>

080023c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023c4:	e7fe      	b.n	80023c4 <UsageFault_Handler+0x4>

080023c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023c6:	b480      	push	{r7}
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ca:	bf00      	nop
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023d8:	bf00      	nop
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr

080023e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023e6:	bf00      	nop
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023f4:	f000 fb44 	bl	8002a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023f8:	bf00      	nop
 80023fa:	bd80      	pop	{r7, pc}

080023fc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e00a      	b.n	8002424 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800240e:	f3af 8000 	nop.w
 8002412:	4601      	mov	r1, r0
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	1c5a      	adds	r2, r3, #1
 8002418:	60ba      	str	r2, [r7, #8]
 800241a:	b2ca      	uxtb	r2, r1
 800241c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	3301      	adds	r3, #1
 8002422:	617b      	str	r3, [r7, #20]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	429a      	cmp	r2, r3
 800242a:	dbf0      	blt.n	800240e <_read+0x12>
  }

  return len;
 800242c:	687b      	ldr	r3, [r7, #4]
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	b086      	sub	sp, #24
 800243a:	af00      	add	r7, sp, #0
 800243c:	60f8      	str	r0, [r7, #12]
 800243e:	60b9      	str	r1, [r7, #8]
 8002440:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002442:	2300      	movs	r3, #0
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e009      	b.n	800245c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	1c5a      	adds	r2, r3, #1
 800244c:	60ba      	str	r2, [r7, #8]
 800244e:	781b      	ldrb	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f7ff fb5f 	bl	8001b14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3301      	adds	r3, #1
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697a      	ldr	r2, [r7, #20]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	429a      	cmp	r2, r3
 8002462:	dbf1      	blt.n	8002448 <_write+0x12>
  }
  return len;
 8002464:	687b      	ldr	r3, [r7, #4]
}
 8002466:	4618      	mov	r0, r3
 8002468:	3718      	adds	r7, #24
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}

0800246e <_close>:

int _close(int file)
{
 800246e:	b480      	push	{r7}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800247a:	4618      	mov	r0, r3
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002486:	b480      	push	{r7}
 8002488:	b083      	sub	sp, #12
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002496:	605a      	str	r2, [r3, #4]
  return 0;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	370c      	adds	r7, #12
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr

080024a6 <_isatty>:

int _isatty(int file)
{
 80024a6:	b480      	push	{r7}
 80024a8:	b083      	sub	sp, #12
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024ae:	2301      	movs	r3, #1
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c8:	2300      	movs	r3, #0
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3714      	adds	r7, #20
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024e0:	4a14      	ldr	r2, [pc, #80]	; (8002534 <_sbrk+0x5c>)
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <_sbrk+0x60>)
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024ec:	4b13      	ldr	r3, [pc, #76]	; (800253c <_sbrk+0x64>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d102      	bne.n	80024fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <_sbrk+0x64>)
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <_sbrk+0x68>)
 80024f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024fa:	4b10      	ldr	r3, [pc, #64]	; (800253c <_sbrk+0x64>)
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4413      	add	r3, r2
 8002502:	693a      	ldr	r2, [r7, #16]
 8002504:	429a      	cmp	r2, r3
 8002506:	d207      	bcs.n	8002518 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002508:	f003 fa4e 	bl	80059a8 <__errno>
 800250c:	4603      	mov	r3, r0
 800250e:	220c      	movs	r2, #12
 8002510:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002512:	f04f 33ff 	mov.w	r3, #4294967295
 8002516:	e009      	b.n	800252c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002518:	4b08      	ldr	r3, [pc, #32]	; (800253c <_sbrk+0x64>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800251e:	4b07      	ldr	r3, [pc, #28]	; (800253c <_sbrk+0x64>)
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4413      	add	r3, r2
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <_sbrk+0x64>)
 8002528:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800252a:	68fb      	ldr	r3, [r7, #12]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	20030000 	.word	0x20030000
 8002538:	00000400 	.word	0x00000400
 800253c:	200001d0 	.word	0x200001d0
 8002540:	200001f8 	.word	0x200001f8

08002544 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <SystemInit+0x20>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	4a05      	ldr	r2, [pc, #20]	; (8002564 <SystemInit+0x20>)
 8002550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <i2c_touch_read>:
volatile int touch_x = 0;
volatile int touch_y = 0;
volatile int touch_z = 0;

int i2c_touch_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t *buff, uint8_t buff_len)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af02      	add	r7, sp, #8
 800256e:	603a      	str	r2, [r7, #0]
 8002570:	461a      	mov	r2, r3
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
 8002576:	460b      	mov	r3, r1
 8002578:	71bb      	strb	r3, [r7, #6]
 800257a:	4613      	mov	r3, r2
 800257c:	717b      	strb	r3, [r7, #5]
  uint8_t reg_addr_aux = reg_addr;
 800257e:	79bb      	ldrb	r3, [r7, #6]
 8002580:	73fb      	strb	r3, [r7, #15]
  if (HAL_I2C_Master_Transmit(&hi2c3, slave_addr, &reg_addr_aux, 1, 100) != HAL_OK)
 8002582:	79fb      	ldrb	r3, [r7, #7]
 8002584:	b299      	uxth	r1, r3
 8002586:	f107 020f 	add.w	r2, r7, #15
 800258a:	2364      	movs	r3, #100	; 0x64
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2301      	movs	r3, #1
 8002590:	4811      	ldr	r0, [pc, #68]	; (80025d8 <i2c_touch_read+0x70>)
 8002592:	f000 fea9 	bl	80032e8 <HAL_I2C_Master_Transmit>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <i2c_touch_read+0x40>
  {
    printf("[I2C]TX_error\r\n");
 800259c:	480f      	ldr	r0, [pc, #60]	; (80025dc <i2c_touch_read+0x74>)
 800259e:	f003 fabb 	bl	8005b18 <puts>
    return -1;
 80025a2:	f04f 33ff 	mov.w	r3, #4294967295
 80025a6:	e013      	b.n	80025d0 <i2c_touch_read+0x68>
  }
  else
  {
    if (HAL_I2C_Master_Receive(&hi2c3, slave_addr, buff, buff_len, 100) != HAL_OK)
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	b299      	uxth	r1, r3
 80025ac:	797b      	ldrb	r3, [r7, #5]
 80025ae:	b29b      	uxth	r3, r3
 80025b0:	2264      	movs	r2, #100	; 0x64
 80025b2:	9200      	str	r2, [sp, #0]
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	4808      	ldr	r0, [pc, #32]	; (80025d8 <i2c_touch_read+0x70>)
 80025b8:	f000 ff94 	bl	80034e4 <HAL_I2C_Master_Receive>
 80025bc:	4603      	mov	r3, r0
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <i2c_touch_read+0x66>
    {
      printf("[I2C]RX_error\r\n");
 80025c2:	4807      	ldr	r0, [pc, #28]	; (80025e0 <i2c_touch_read+0x78>)
 80025c4:	f003 faa8 	bl	8005b18 <puts>
      return -1;
 80025c8:	f04f 33ff 	mov.w	r3, #4294967295
 80025cc:	e000      	b.n	80025d0 <i2c_touch_read+0x68>
    }
  }

  return 0;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}
 80025d8:	200000a8 	.word	0x200000a8
 80025dc:	08007f6c 	.word	0x08007f6c
 80025e0:	08007f7c 	.word	0x08007f7c

080025e4 <i2c_touch_write>:

int i2c_touch_write(uint8_t slave_addr, uint8_t *buff, uint8_t buff_len)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
 80025f0:	4613      	mov	r3, r2
 80025f2:	71bb      	strb	r3, [r7, #6]
  if (HAL_I2C_Master_Transmit(&hi2c3, slave_addr, buff, buff_len, 100) != HAL_OK)
 80025f4:	79fb      	ldrb	r3, [r7, #7]
 80025f6:	b299      	uxth	r1, r3
 80025f8:	79bb      	ldrb	r3, [r7, #6]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	2264      	movs	r2, #100	; 0x64
 80025fe:	9200      	str	r2, [sp, #0]
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	4808      	ldr	r0, [pc, #32]	; (8002624 <i2c_touch_write+0x40>)
 8002604:	f000 fe70 	bl	80032e8 <HAL_I2C_Master_Transmit>
 8002608:	4603      	mov	r3, r0
 800260a:	2b00      	cmp	r3, #0
 800260c:	d005      	beq.n	800261a <i2c_touch_write+0x36>
  {
    printf("[I2C]TX_error\r\n");
 800260e:	4806      	ldr	r0, [pc, #24]	; (8002628 <i2c_touch_write+0x44>)
 8002610:	f003 fa82 	bl	8005b18 <puts>
    return -1;
 8002614:	f04f 33ff 	mov.w	r3, #4294967295
 8002618:	e000      	b.n	800261c <i2c_touch_write+0x38>
  }
  return 0;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3708      	adds	r7, #8
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	200000a8 	.word	0x200000a8
 8002628:	08007f6c 	.word	0x08007f6c

0800262c <i2c_touch_init>:

void i2c_touch_init(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b082      	sub	sp, #8
 8002630:	af00      	add	r7, sp, #0


  uint8_t rx_data[2] = {0};
 8002632:	2300      	movs	r3, #0
 8002634:	80bb      	strh	r3, [r7, #4]
  uint8_t tx_data[2];

  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_CHIP_ID, rx_data, 2);
 8002636:	1d3a      	adds	r2, r7, #4
 8002638:	2302      	movs	r3, #2
 800263a:	2100      	movs	r1, #0
 800263c:	2082      	movs	r0, #130	; 0x82
 800263e:	f7ff ff93 	bl	8002568 <i2c_touch_read>
  printf("CHIP ID: %X %X\n", rx_data[0], rx_data[1]);
 8002642:	793b      	ldrb	r3, [r7, #4]
 8002644:	4619      	mov	r1, r3
 8002646:	797b      	ldrb	r3, [r7, #5]
 8002648:	461a      	mov	r2, r3
 800264a:	484f      	ldr	r0, [pc, #316]	; (8002788 <i2c_touch_init+0x15c>)
 800264c:	f003 f9de 	bl	8005a0c <iprintf>

  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_ID_VER, rx_data, 1);
 8002650:	1d3a      	adds	r2, r7, #4
 8002652:	2301      	movs	r3, #1
 8002654:	2102      	movs	r1, #2
 8002656:	2082      	movs	r0, #130	; 0x82
 8002658:	f7ff ff86 	bl	8002568 <i2c_touch_read>
  printf("ID VER: %X\n", rx_data[0]);
 800265c:	793b      	ldrb	r3, [r7, #4]
 800265e:	4619      	mov	r1, r3
 8002660:	484a      	ldr	r0, [pc, #296]	; (800278c <i2c_touch_init+0x160>)
 8002662:	f003 f9d3 	bl	8005a0c <iprintf>

  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_SYS_CTRL2, rx_data, 1);
 8002666:	1d3a      	adds	r2, r7, #4
 8002668:	2301      	movs	r3, #1
 800266a:	2104      	movs	r1, #4
 800266c:	2082      	movs	r0, #130	; 0x82
 800266e:	f7ff ff7b 	bl	8002568 <i2c_touch_read>
  printf("SYS CTRL2: %X\n", rx_data[0]);
 8002672:	793b      	ldrb	r3, [r7, #4]
 8002674:	4619      	mov	r1, r3
 8002676:	4846      	ldr	r0, [pc, #280]	; (8002790 <i2c_touch_init+0x164>)
 8002678:	f003 f9c8 	bl	8005a0c <iprintf>

  printf("Enable clocks for everything\n");
 800267c:	4845      	ldr	r0, [pc, #276]	; (8002794 <i2c_touch_init+0x168>)
 800267e:	f003 fa4b 	bl	8005b18 <puts>
  tx_data[0] = TOUCH_SYS_CTRL2;
 8002682:	2304      	movs	r3, #4
 8002684:	703b      	strb	r3, [r7, #0]
  tx_data[1] = 0x00; //Turn off TSC and ADC clocks
 8002686:	2300      	movs	r3, #0
 8002688:	707b      	strb	r3, [r7, #1]
  i2c_touch_write(I2C_TOUCH_ADDR, tx_data, 2);
 800268a:	463b      	mov	r3, r7
 800268c:	2202      	movs	r2, #2
 800268e:	4619      	mov	r1, r3
 8002690:	2082      	movs	r0, #130	; 0x82
 8002692:	f7ff ffa7 	bl	80025e4 <i2c_touch_write>
  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_SYS_CTRL2, rx_data, 1);
 8002696:	1d3a      	adds	r2, r7, #4
 8002698:	2301      	movs	r3, #1
 800269a:	2104      	movs	r1, #4
 800269c:	2082      	movs	r0, #130	; 0x82
 800269e:	f7ff ff63 	bl	8002568 <i2c_touch_read>
  printf("SYS CTRL2: %X\n", rx_data[0]);
 80026a2:	793b      	ldrb	r3, [r7, #4]
 80026a4:	4619      	mov	r1, r3
 80026a6:	483a      	ldr	r0, [pc, #232]	; (8002790 <i2c_touch_init+0x164>)
 80026a8:	f003 f9b0 	bl	8005a0c <iprintf>

  printf("Configure TSC, disable TSC\n");
 80026ac:	483a      	ldr	r0, [pc, #232]	; (8002798 <i2c_touch_init+0x16c>)
 80026ae:	f003 fa33 	bl	8005b18 <puts>
  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_TSC_CTRL, rx_data, 1);
 80026b2:	1d3a      	adds	r2, r7, #4
 80026b4:	2301      	movs	r3, #1
 80026b6:	2140      	movs	r1, #64	; 0x40
 80026b8:	2082      	movs	r0, #130	; 0x82
 80026ba:	f7ff ff55 	bl	8002568 <i2c_touch_read>
  printf("TSC CTRL: %X\n", rx_data[0]);
 80026be:	793b      	ldrb	r3, [r7, #4]
 80026c0:	4619      	mov	r1, r3
 80026c2:	4836      	ldr	r0, [pc, #216]	; (800279c <i2c_touch_init+0x170>)
 80026c4:	f003 f9a2 	bl	8005a0c <iprintf>
  tx_data[0] = TOUCH_TSC_CTRL;
 80026c8:	2340      	movs	r3, #64	; 0x40
 80026ca:	703b      	strb	r3, [r7, #0]
  tx_data[1] = 0x11; //Turn on TSC, 4 tracking index, TSC disable
 80026cc:	2311      	movs	r3, #17
 80026ce:	707b      	strb	r3, [r7, #1]
  i2c_touch_write(I2C_TOUCH_ADDR, tx_data, 2);
 80026d0:	463b      	mov	r3, r7
 80026d2:	2202      	movs	r2, #2
 80026d4:	4619      	mov	r1, r3
 80026d6:	2082      	movs	r0, #130	; 0x82
 80026d8:	f7ff ff84 	bl	80025e4 <i2c_touch_write>
  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_TSC_CTRL, rx_data, 1);
 80026dc:	1d3a      	adds	r2, r7, #4
 80026de:	2301      	movs	r3, #1
 80026e0:	2140      	movs	r1, #64	; 0x40
 80026e2:	2082      	movs	r0, #130	; 0x82
 80026e4:	f7ff ff40 	bl	8002568 <i2c_touch_read>
  printf("TSC CTRL: %X\n", rx_data[0]);
 80026e8:	793b      	ldrb	r3, [r7, #4]
 80026ea:	4619      	mov	r1, r3
 80026ec:	482b      	ldr	r0, [pc, #172]	; (800279c <i2c_touch_init+0x170>)
 80026ee:	f003 f98d 	bl	8005a0c <iprintf>

  printf("Configure CFG, 4 samples, delay 500ms, settling 500us\n");
 80026f2:	482b      	ldr	r0, [pc, #172]	; (80027a0 <i2c_touch_init+0x174>)
 80026f4:	f003 fa10 	bl	8005b18 <puts>
  tx_data[0] = TOUCH_TSC_CFG;
 80026f8:	2341      	movs	r3, #65	; 0x41
 80026fa:	703b      	strb	r3, [r7, #0]
  tx_data[1] = 0x9A; 
 80026fc:	239a      	movs	r3, #154	; 0x9a
 80026fe:	707b      	strb	r3, [r7, #1]
  i2c_touch_write(I2C_TOUCH_ADDR, tx_data, 2);
 8002700:	463b      	mov	r3, r7
 8002702:	2202      	movs	r2, #2
 8002704:	4619      	mov	r1, r3
 8002706:	2082      	movs	r0, #130	; 0x82
 8002708:	f7ff ff6c 	bl	80025e4 <i2c_touch_write>
  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_TSC_CFG, rx_data, 1);
 800270c:	1d3a      	adds	r2, r7, #4
 800270e:	2301      	movs	r3, #1
 8002710:	2141      	movs	r1, #65	; 0x41
 8002712:	2082      	movs	r0, #130	; 0x82
 8002714:	f7ff ff28 	bl	8002568 <i2c_touch_read>
  printf("TSC CFG: %X\n", rx_data[0]);
 8002718:	793b      	ldrb	r3, [r7, #4]
 800271a:	4619      	mov	r1, r3
 800271c:	4821      	ldr	r0, [pc, #132]	; (80027a4 <i2c_touch_init+0x178>)
 800271e:	f003 f975 	bl	8005a0c <iprintf>

  printf("Configure FIFO TH, 0xFF\n");
 8002722:	4821      	ldr	r0, [pc, #132]	; (80027a8 <i2c_touch_init+0x17c>)
 8002724:	f003 f9f8 	bl	8005b18 <puts>
  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_FIFO_TH, rx_data, 1);
 8002728:	1d3a      	adds	r2, r7, #4
 800272a:	2301      	movs	r3, #1
 800272c:	214a      	movs	r1, #74	; 0x4a
 800272e:	2082      	movs	r0, #130	; 0x82
 8002730:	f7ff ff1a 	bl	8002568 <i2c_touch_read>
  printf("FIFO TH: %X\n", rx_data[0]);
 8002734:	793b      	ldrb	r3, [r7, #4]
 8002736:	4619      	mov	r1, r3
 8002738:	481c      	ldr	r0, [pc, #112]	; (80027ac <i2c_touch_init+0x180>)
 800273a:	f003 f967 	bl	8005a0c <iprintf>
  tx_data[0] = TOUCH_FIFO_TH;
 800273e:	234a      	movs	r3, #74	; 0x4a
 8002740:	703b      	strb	r3, [r7, #0]
  tx_data[1] = 0x1; //Not zero!
 8002742:	2301      	movs	r3, #1
 8002744:	707b      	strb	r3, [r7, #1]
  i2c_touch_write(I2C_TOUCH_ADDR, tx_data, 2);
 8002746:	463b      	mov	r3, r7
 8002748:	2202      	movs	r2, #2
 800274a:	4619      	mov	r1, r3
 800274c:	2082      	movs	r0, #130	; 0x82
 800274e:	f7ff ff49 	bl	80025e4 <i2c_touch_write>
  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_FIFO_TH, rx_data, 1);
 8002752:	1d3a      	adds	r2, r7, #4
 8002754:	2301      	movs	r3, #1
 8002756:	214a      	movs	r1, #74	; 0x4a
 8002758:	2082      	movs	r0, #130	; 0x82
 800275a:	f7ff ff05 	bl	8002568 <i2c_touch_read>
  printf("FIFO TH: %X\n", rx_data[0]);
 800275e:	793b      	ldrb	r3, [r7, #4]
 8002760:	4619      	mov	r1, r3
 8002762:	4812      	ldr	r0, [pc, #72]	; (80027ac <i2c_touch_init+0x180>)
 8002764:	f003 f952 	bl	8005a0c <iprintf>

  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_SYS_CTRL2, rx_data, 1);
 8002768:	1d3a      	adds	r2, r7, #4
 800276a:	2301      	movs	r3, #1
 800276c:	2104      	movs	r1, #4
 800276e:	2082      	movs	r0, #130	; 0x82
 8002770:	f7ff fefa 	bl	8002568 <i2c_touch_read>
  printf("SYS CTRL2: %X\n", rx_data[0]);
 8002774:	793b      	ldrb	r3, [r7, #4]
 8002776:	4619      	mov	r1, r3
 8002778:	4805      	ldr	r0, [pc, #20]	; (8002790 <i2c_touch_init+0x164>)
 800277a:	f003 f947 	bl	8005a0c <iprintf>
}
 800277e:	bf00      	nop
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
 8002786:	bf00      	nop
 8002788:	08007f8c 	.word	0x08007f8c
 800278c:	08007f9c 	.word	0x08007f9c
 8002790:	08007fa8 	.word	0x08007fa8
 8002794:	08007fb8 	.word	0x08007fb8
 8002798:	08007fd8 	.word	0x08007fd8
 800279c:	08007ff4 	.word	0x08007ff4
 80027a0:	08008004 	.word	0x08008004
 80027a4:	0800803c 	.word	0x0800803c
 80027a8:	0800804c 	.word	0x0800804c
 80027ac:	08008064 	.word	0x08008064

080027b0 <i2c_touch_detect>:
  
int i2c_touch_detect(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b082      	sub	sp, #8
 80027b4:	af00      	add	r7, sp, #0
  uint8_t cmd_data[2];
  uint8_t rx_data;

  i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_TSC_CTRL, &rx_data, 1);
 80027b6:	1cfa      	adds	r2, r7, #3
 80027b8:	2301      	movs	r3, #1
 80027ba:	2140      	movs	r1, #64	; 0x40
 80027bc:	2082      	movs	r0, #130	; 0x82
 80027be:	f7ff fed3 	bl	8002568 <i2c_touch_read>

	uint8_t state = ((rx_data & (uint8_t) TOUCH_TSC_STAT) == (uint8_t) 0x80);
 80027c2:	78fb      	ldrb	r3, [r7, #3]
 80027c4:	b25b      	sxtb	r3, r3
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	09db      	lsrs	r3, r3, #7
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	71fb      	strb	r3, [r7, #7]

	if (state > 0)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00c      	beq.n	80027ee <i2c_touch_detect+0x3e>
	{
    uint8_t fifo_state = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	70bb      	strb	r3, [r7, #2]
    i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_FIFO_SIZE, &fifo_state, 1);
 80027d8:	1cba      	adds	r2, r7, #2
 80027da:	2301      	movs	r3, #1
 80027dc:	214c      	movs	r1, #76	; 0x4c
 80027de:	2082      	movs	r0, #130	; 0x82
 80027e0:	f7ff fec2 	bl	8002568 <i2c_touch_read>

		if (fifo_state > 0)
 80027e4:	78bb      	ldrb	r3, [r7, #2]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d016      	beq.n	8002818 <i2c_touch_detect+0x68>
			return 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	e016      	b.n	800281c <i2c_touch_detect+0x6c>
	}
	else
	{
		cmd_data[0] = TOUCH_FIFO_STA;
 80027ee:	234b      	movs	r3, #75	; 0x4b
 80027f0:	713b      	strb	r3, [r7, #4]

		/* Reset FIFO */
		cmd_data[1] = 0x01;
 80027f2:	2301      	movs	r3, #1
 80027f4:	717b      	strb	r3, [r7, #5]
    i2c_touch_write(I2C_TOUCH_ADDR, cmd_data, 2);
 80027f6:	1d3b      	adds	r3, r7, #4
 80027f8:	2202      	movs	r2, #2
 80027fa:	4619      	mov	r1, r3
 80027fc:	2082      	movs	r0, #130	; 0x82
 80027fe:	f7ff fef1 	bl	80025e4 <i2c_touch_write>

		/* Enable the FIFO again */
		cmd_data[1] = 0;
 8002802:	2300      	movs	r3, #0
 8002804:	717b      	strb	r3, [r7, #5]
    i2c_touch_write(I2C_TOUCH_ADDR, cmd_data, 2);
 8002806:	1d3b      	adds	r3, r7, #4
 8002808:	2202      	movs	r2, #2
 800280a:	4619      	mov	r1, r3
 800280c:	2082      	movs	r0, #130	; 0x82
 800280e:	f7ff fee9 	bl	80025e4 <i2c_touch_write>

    return -1;
 8002812:	f04f 33ff 	mov.w	r3, #4294967295
 8002816:	e001      	b.n	800281c <i2c_touch_detect+0x6c>
	}

  return -1;
 8002818:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281c:	4618      	mov	r0, r3
 800281e:	3708      	adds	r7, #8
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <i2c_touch_update>:

void i2c_touch_update(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b092      	sub	sp, #72	; 0x48
 8002828:	af02      	add	r7, sp, #8
  if (i2c_touch_detect() == 0)
 800282a:	f7ff ffc1 	bl	80027b0 <i2c_touch_detect>
 800282e:	4603      	mov	r3, r0
 8002830:	2b00      	cmp	r3, #0
 8002832:	f040 8090 	bne.w	8002956 <i2c_touch_update+0x132>
  {    
    uint8_t rx_data[2];
    i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_TSC_DATA_X, rx_data, 2);
 8002836:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800283a:	2302      	movs	r3, #2
 800283c:	214d      	movs	r1, #77	; 0x4d
 800283e:	2082      	movs	r0, #130	; 0x82
 8002840:	f7ff fe92 	bl	8002568 <i2c_touch_read>
    uint16_t x = rx_data[1] | (rx_data[0] << 8);
 8002844:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002848:	b21a      	sxth	r2, r3
 800284a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800284e:	021b      	lsls	r3, r3, #8
 8002850:	b21b      	sxth	r3, r3
 8002852:	4313      	orrs	r3, r2
 8002854:	b21b      	sxth	r3, r3
 8002856:	87fb      	strh	r3, [r7, #62]	; 0x3e

    i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_TSC_DATA_Y, rx_data, 2);
 8002858:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800285c:	2302      	movs	r3, #2
 800285e:	214f      	movs	r1, #79	; 0x4f
 8002860:	2082      	movs	r0, #130	; 0x82
 8002862:	f7ff fe81 	bl	8002568 <i2c_touch_read>
    uint16_t y = rx_data[1] | (rx_data[0] << 8);
 8002866:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800286a:	b21a      	sxth	r2, r3
 800286c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002870:	021b      	lsls	r3, r3, #8
 8002872:	b21b      	sxth	r3, r3
 8002874:	4313      	orrs	r3, r2
 8002876:	b21b      	sxth	r3, r3
 8002878:	873b      	strh	r3, [r7, #56]	; 0x38

    i2c_touch_read(I2C_TOUCH_ADDR, TOUCH_TSC_DATA_Z, rx_data, 2);
 800287a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800287e:	2302      	movs	r3, #2
 8002880:	2151      	movs	r1, #81	; 0x51
 8002882:	2082      	movs	r0, #130	; 0x82
 8002884:	f7ff fe70 	bl	8002568 <i2c_touch_read>
    uint16_t z = rx_data[1] | (rx_data[0] << 8);
 8002888:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800288c:	b21a      	sxth	r2, r3
 800288e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	b21b      	sxth	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b21b      	sxth	r3, r3
 800289a:	86fb      	strh	r3, [r7, #54]	; 0x36
    

#if 1
    y -= 360;               /* Y value first correction */
 800289c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800289e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80028a2:	873b      	strh	r3, [r7, #56]	; 0x38
    uint16_t yr = y / 11;   /* Y value second correction */
 80028a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80028a6:	4a2e      	ldr	r2, [pc, #184]	; (8002960 <i2c_touch_update+0x13c>)
 80028a8:	fba2 2303 	umull	r2, r3, r2, r3
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* Return y position value */
    if(yr <= 0)
 80028b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d102      	bne.n	80028bc <i2c_touch_update+0x98>
      yr = 0;
 80028b6:	2300      	movs	r3, #0
 80028b8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80028ba:	e006      	b.n	80028ca <i2c_touch_update+0xa6>
    else if (yr > TOUCH_Y_BOUND)
 80028bc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80028be:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80028c2:	d902      	bls.n	80028ca <i2c_touch_update+0xa6>
      yr = TOUCH_Y_BOUND - 1;
 80028c4:	f240 133f 	movw	r3, #319	; 0x13f
 80028c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    else;

    y = yr;
 80028ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80028cc:	873b      	strh	r3, [r7, #56]	; 0x38

    /* X value first correction */
    if (x <= 3000)
 80028ce:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80028d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80028d4:	4293      	cmp	r3, r2
 80028d6:	d805      	bhi.n	80028e4 <i2c_touch_update+0xc0>
      x = 3870 - x;
 80028d8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80028da:	f5c3 6371 	rsb	r3, r3, #3856	; 0xf10
 80028de:	330e      	adds	r3, #14
 80028e0:	87fb      	strh	r3, [r7, #62]	; 0x3e
 80028e2:	e004      	b.n	80028ee <i2c_touch_update+0xca>
    else
      x = 3800 - x;
 80028e4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80028e6:	f5c3 636d 	rsb	r3, r3, #3792	; 0xed0
 80028ea:	3308      	adds	r3, #8
 80028ec:	87fb      	strh	r3, [r7, #62]	; 0x3e

    /* X value second correction */
    uint16_t xr = x / 15;
 80028ee:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80028f0:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <i2c_touch_update+0x140>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	08db      	lsrs	r3, r3, #3
 80028f8:	877b      	strh	r3, [r7, #58]	; 0x3a

    /* Return X position value */
    if (xr <= 0)
 80028fa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d102      	bne.n	8002906 <i2c_touch_update+0xe2>
      xr = 0;
 8002900:	2300      	movs	r3, #0
 8002902:	877b      	strh	r3, [r7, #58]	; 0x3a
 8002904:	e004      	b.n	8002910 <i2c_touch_update+0xec>
    else if (xr > TOUCH_X_BOUND)
 8002906:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002908:	2bf0      	cmp	r3, #240	; 0xf0
 800290a:	d901      	bls.n	8002910 <i2c_touch_update+0xec>
        xr = TOUCH_X_BOUND - 1;
 800290c:	23ef      	movs	r3, #239	; 0xef
 800290e:	877b      	strh	r3, [r7, #58]	; 0x3a
    else;

    x = xr;
 8002910:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8002912:	87fb      	strh	r3, [r7, #62]	; 0x3e
 #endif

    touch_x = x;  /* Update the X position */
 8002914:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002916:	4a14      	ldr	r2, [pc, #80]	; (8002968 <i2c_touch_update+0x144>)
 8002918:	6013      	str	r3, [r2, #0]
    touch_y = y;  /* Update the Y position */
 800291a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800291c:	4a13      	ldr	r2, [pc, #76]	; (800296c <i2c_touch_update+0x148>)
 800291e:	6013      	str	r3, [r2, #0]
    touch_z = z;  /* Update the Z position */
 8002920:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002922:	4a13      	ldr	r2, [pc, #76]	; (8002970 <i2c_touch_update+0x14c>)
 8002924:	6013      	str	r3, [r2, #0]

    //printf("[Touched!] X:[%d] Y:[%d] Z:[%d]\r\n", touch_x, touch_y, touch_z);

    char buff[50];
    sprintf(buff, "[Touched!] X:[%d] Y:[%d] Z:[%d]\r\n", touch_x, touch_y, touch_z);
 8002926:	4b10      	ldr	r3, [pc, #64]	; (8002968 <i2c_touch_update+0x144>)
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	4b10      	ldr	r3, [pc, #64]	; (800296c <i2c_touch_update+0x148>)
 800292c:	6819      	ldr	r1, [r3, #0]
 800292e:	4b10      	ldr	r3, [pc, #64]	; (8002970 <i2c_touch_update+0x14c>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4638      	mov	r0, r7
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	460b      	mov	r3, r1
 8002938:	490e      	ldr	r1, [pc, #56]	; (8002974 <i2c_touch_update+0x150>)
 800293a:	f003 f8f5 	bl	8005b28 <siprintf>
    HAL_UART_Transmit(&huart1, (uint8_t *) buff,strlen(buff),300);
 800293e:	463b      	mov	r3, r7
 8002940:	4618      	mov	r0, r3
 8002942:	f7fd fc55 	bl	80001f0 <strlen>
 8002946:	4603      	mov	r3, r0
 8002948:	b29a      	uxth	r2, r3
 800294a:	4639      	mov	r1, r7
 800294c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002950:	4809      	ldr	r0, [pc, #36]	; (8002978 <i2c_touch_update+0x154>)
 8002952:	f002 fb9a 	bl	800508a <HAL_UART_Transmit>
    // CDC_Transmit_HS((uint8_t *) buff, (uint16_t) strlen(buff));
  }
}
 8002956:	bf00      	nop
 8002958:	3740      	adds	r7, #64	; 0x40
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	ba2e8ba3 	.word	0xba2e8ba3
 8002964:	88888889 	.word	0x88888889
 8002968:	200001d4 	.word	0x200001d4
 800296c:	200001d8 	.word	0x200001d8
 8002970:	200001dc 	.word	0x200001dc
 8002974:	08008074 	.word	0x08008074
 8002978:	20000154 	.word	0x20000154

0800297c <i2c_touch_handler>:

void i2c_touch_handler(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
	i2c_touch_update();
 8002980:	f7ff ff50 	bl	8002824 <i2c_touch_update>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}

08002988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800298c:	480d      	ldr	r0, [pc, #52]	; (80029c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800298e:	490e      	ldr	r1, [pc, #56]	; (80029c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002990:	4a0e      	ldr	r2, [pc, #56]	; (80029cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002994:	e002      	b.n	800299c <LoopCopyDataInit>

08002996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800299a:	3304      	adds	r3, #4

0800299c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800299c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800299e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029a0:	d3f9      	bcc.n	8002996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029a2:	4a0b      	ldr	r2, [pc, #44]	; (80029d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029a4:	4c0b      	ldr	r4, [pc, #44]	; (80029d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80029a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029a8:	e001      	b.n	80029ae <LoopFillZerobss>

080029aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029ac:	3204      	adds	r2, #4

080029ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029b0:	d3fb      	bcc.n	80029aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80029b2:	f7ff fdc7 	bl	8002544 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80029b6:	f002 fffd 	bl	80059b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029ba:	f7ff f8bd 	bl	8001b38 <main>
  bx  lr    
 80029be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80029c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80029c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80029cc:	08026b28 	.word	0x08026b28
  ldr r2, =_sbss
 80029d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80029d4:	200001f4 	.word	0x200001f4

080029d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029d8:	e7fe      	b.n	80029d8 <ADC_IRQHandler>
	...

080029dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_Init+0x40>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_Init+0x40>)
 80029e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80029ec:	4b0b      	ldr	r3, [pc, #44]	; (8002a1c <HAL_Init+0x40>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <HAL_Init+0x40>)
 80029f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029f8:	4b08      	ldr	r3, [pc, #32]	; (8002a1c <HAL_Init+0x40>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a07      	ldr	r2, [pc, #28]	; (8002a1c <HAL_Init+0x40>)
 80029fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a04:	2003      	movs	r0, #3
 8002a06:	f000 f931 	bl	8002c6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a0a:	200f      	movs	r0, #15
 8002a0c:	f000 f808 	bl	8002a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a10:	f7ff fb0c 	bl	800202c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a14:	2300      	movs	r3, #0
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	40023c00 	.word	0x40023c00

08002a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_InitTick+0x54>)
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4b12      	ldr	r3, [pc, #72]	; (8002a78 <HAL_InitTick+0x58>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	4619      	mov	r1, r3
 8002a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f000 f93b 	bl	8002cba <HAL_SYSTICK_Config>
 8002a44:	4603      	mov	r3, r0
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d001      	beq.n	8002a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00e      	b.n	8002a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2b0f      	cmp	r3, #15
 8002a52:	d80a      	bhi.n	8002a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a54:	2200      	movs	r2, #0
 8002a56:	6879      	ldr	r1, [r7, #4]
 8002a58:	f04f 30ff 	mov.w	r0, #4294967295
 8002a5c:	f000 f911 	bl	8002c82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a60:	4a06      	ldr	r2, [pc, #24]	; (8002a7c <HAL_InitTick+0x5c>)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a66:	2300      	movs	r3, #0
 8002a68:	e000      	b.n	8002a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000008 	.word	0x20000008
 8002a78:	20000010 	.word	0x20000010
 8002a7c:	2000000c 	.word	0x2000000c

08002a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a80:	b480      	push	{r7}
 8002a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a84:	4b06      	ldr	r3, [pc, #24]	; (8002aa0 <HAL_IncTick+0x20>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <HAL_IncTick+0x24>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4413      	add	r3, r2
 8002a90:	4a04      	ldr	r2, [pc, #16]	; (8002aa4 <HAL_IncTick+0x24>)
 8002a92:	6013      	str	r3, [r2, #0]
}
 8002a94:	bf00      	nop
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	20000010 	.word	0x20000010
 8002aa4:	200001e0 	.word	0x200001e0

08002aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8002aac:	4b03      	ldr	r3, [pc, #12]	; (8002abc <HAL_GetTick+0x14>)
 8002aae:	681b      	ldr	r3, [r3, #0]
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	200001e0 	.word	0x200001e0

08002ac0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ac8:	f7ff ffee 	bl	8002aa8 <HAL_GetTick>
 8002acc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ad8:	d005      	beq.n	8002ae6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_Delay+0x44>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002ae6:	bf00      	nop
 8002ae8:	f7ff ffde 	bl	8002aa8 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d8f7      	bhi.n	8002ae8 <HAL_Delay+0x28>
  {
  }
}
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	20000010 	.word	0x20000010

08002b08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	f003 0307 	and.w	r3, r3, #7
 8002b16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b18:	4b0c      	ldr	r3, [pc, #48]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b24:	4013      	ands	r3, r2
 8002b26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b3a:	4a04      	ldr	r2, [pc, #16]	; (8002b4c <__NVIC_SetPriorityGrouping+0x44>)
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	60d3      	str	r3, [r2, #12]
}
 8002b40:	bf00      	nop
 8002b42:	3714      	adds	r7, #20
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr
 8002b4c:	e000ed00 	.word	0xe000ed00

08002b50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b50:	b480      	push	{r7}
 8002b52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b54:	4b04      	ldr	r3, [pc, #16]	; (8002b68 <__NVIC_GetPriorityGrouping+0x18>)
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	0a1b      	lsrs	r3, r3, #8
 8002b5a:	f003 0307 	and.w	r3, r3, #7
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	4603      	mov	r3, r0
 8002b74:	6039      	str	r1, [r7, #0]
 8002b76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	db0a      	blt.n	8002b96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	b2da      	uxtb	r2, r3
 8002b84:	490c      	ldr	r1, [pc, #48]	; (8002bb8 <__NVIC_SetPriority+0x4c>)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	b2d2      	uxtb	r2, r2
 8002b8e:	440b      	add	r3, r1
 8002b90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b94:	e00a      	b.n	8002bac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4908      	ldr	r1, [pc, #32]	; (8002bbc <__NVIC_SetPriority+0x50>)
 8002b9c:	79fb      	ldrb	r3, [r7, #7]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3b04      	subs	r3, #4
 8002ba4:	0112      	lsls	r2, r2, #4
 8002ba6:	b2d2      	uxtb	r2, r2
 8002ba8:	440b      	add	r3, r1
 8002baa:	761a      	strb	r2, [r3, #24]
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	e000e100 	.word	0xe000e100
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b089      	sub	sp, #36	; 0x24
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	60f8      	str	r0, [r7, #12]
 8002bc8:	60b9      	str	r1, [r7, #8]
 8002bca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	f1c3 0307 	rsb	r3, r3, #7
 8002bda:	2b04      	cmp	r3, #4
 8002bdc:	bf28      	it	cs
 8002bde:	2304      	movcs	r3, #4
 8002be0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002be2:	69fb      	ldr	r3, [r7, #28]
 8002be4:	3304      	adds	r3, #4
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d902      	bls.n	8002bf0 <NVIC_EncodePriority+0x30>
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	3b03      	subs	r3, #3
 8002bee:	e000      	b.n	8002bf2 <NVIC_EncodePriority+0x32>
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfe:	43da      	mvns	r2, r3
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	401a      	ands	r2, r3
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c08:	f04f 31ff 	mov.w	r1, #4294967295
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c18:	4313      	orrs	r3, r2
         );
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3724      	adds	r7, #36	; 0x24
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
	...

08002c28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b082      	sub	sp, #8
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c38:	d301      	bcc.n	8002c3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e00f      	b.n	8002c5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c3e:	4a0a      	ldr	r2, [pc, #40]	; (8002c68 <SysTick_Config+0x40>)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c46:	210f      	movs	r1, #15
 8002c48:	f04f 30ff 	mov.w	r0, #4294967295
 8002c4c:	f7ff ff8e 	bl	8002b6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <SysTick_Config+0x40>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c56:	4b04      	ldr	r3, [pc, #16]	; (8002c68 <SysTick_Config+0x40>)
 8002c58:	2207      	movs	r2, #7
 8002c5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c5c:	2300      	movs	r3, #0
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3708      	adds	r7, #8
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	e000e010 	.word	0xe000e010

08002c6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b082      	sub	sp, #8
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff47 	bl	8002b08 <__NVIC_SetPriorityGrouping>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b086      	sub	sp, #24
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	4603      	mov	r3, r0
 8002c8a:	60b9      	str	r1, [r7, #8]
 8002c8c:	607a      	str	r2, [r7, #4]
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c90:	2300      	movs	r3, #0
 8002c92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c94:	f7ff ff5c 	bl	8002b50 <__NVIC_GetPriorityGrouping>
 8002c98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	6978      	ldr	r0, [r7, #20]
 8002ca0:	f7ff ff8e 	bl	8002bc0 <NVIC_EncodePriority>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff ff5d 	bl	8002b6c <__NVIC_SetPriority>
}
 8002cb2:	bf00      	nop
 8002cb4:	3718      	adds	r7, #24
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b082      	sub	sp, #8
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7ff ffb0 	bl	8002c28 <SysTick_Config>
 8002cc8:	4603      	mov	r3, r0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
	...

08002cd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b089      	sub	sp, #36	; 0x24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
 8002cdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002cea:	2300      	movs	r3, #0
 8002cec:	61fb      	str	r3, [r7, #28]
 8002cee:	e177      	b.n	8002fe0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002cf0:	2201      	movs	r2, #1
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4013      	ands	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	f040 8166 	bne.w	8002fda <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f003 0303 	and.w	r3, r3, #3
 8002d16:	2b01      	cmp	r3, #1
 8002d18:	d005      	beq.n	8002d26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d22:	2b02      	cmp	r3, #2
 8002d24:	d130      	bne.n	8002d88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	2203      	movs	r2, #3
 8002d32:	fa02 f303 	lsl.w	r3, r2, r3
 8002d36:	43db      	mvns	r3, r3
 8002d38:	69ba      	ldr	r2, [r7, #24]
 8002d3a:	4013      	ands	r3, r2
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	68da      	ldr	r2, [r3, #12]
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	005b      	lsls	r3, r3, #1
 8002d46:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	43db      	mvns	r3, r3
 8002d66:	69ba      	ldr	r2, [r7, #24]
 8002d68:	4013      	ands	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 0201 	and.w	r2, r3, #1
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	fa02 f303 	lsl.w	r3, r2, r3
 8002d7c:	69ba      	ldr	r2, [r7, #24]
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69ba      	ldr	r2, [r7, #24]
 8002d86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d017      	beq.n	8002dc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	2203      	movs	r2, #3
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689a      	ldr	r2, [r3, #8]
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	005b      	lsls	r3, r3, #1
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	69ba      	ldr	r2, [r7, #24]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0303 	and.w	r3, r3, #3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d123      	bne.n	8002e18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	08da      	lsrs	r2, r3, #3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3208      	adds	r2, #8
 8002dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ddc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	f003 0307 	and.w	r3, r3, #7
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	220f      	movs	r2, #15
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	691a      	ldr	r2, [r3, #16]
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	08da      	lsrs	r2, r3, #3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	3208      	adds	r2, #8
 8002e12:	69b9      	ldr	r1, [r7, #24]
 8002e14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	005b      	lsls	r3, r3, #1
 8002e22:	2203      	movs	r2, #3
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	43db      	mvns	r3, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f003 0203 	and.w	r2, r3, #3
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 80c0 	beq.w	8002fda <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	60fb      	str	r3, [r7, #12]
 8002e5e:	4b66      	ldr	r3, [pc, #408]	; (8002ff8 <HAL_GPIO_Init+0x324>)
 8002e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e62:	4a65      	ldr	r2, [pc, #404]	; (8002ff8 <HAL_GPIO_Init+0x324>)
 8002e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e68:	6453      	str	r3, [r2, #68]	; 0x44
 8002e6a:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <HAL_GPIO_Init+0x324>)
 8002e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e72:	60fb      	str	r3, [r7, #12]
 8002e74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e76:	4a61      	ldr	r2, [pc, #388]	; (8002ffc <HAL_GPIO_Init+0x328>)
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	089b      	lsrs	r3, r3, #2
 8002e7c:	3302      	adds	r3, #2
 8002e7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	220f      	movs	r2, #15
 8002e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	4a58      	ldr	r2, [pc, #352]	; (8003000 <HAL_GPIO_Init+0x32c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d037      	beq.n	8002f12 <HAL_GPIO_Init+0x23e>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	4a57      	ldr	r2, [pc, #348]	; (8003004 <HAL_GPIO_Init+0x330>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d031      	beq.n	8002f0e <HAL_GPIO_Init+0x23a>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a56      	ldr	r2, [pc, #344]	; (8003008 <HAL_GPIO_Init+0x334>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d02b      	beq.n	8002f0a <HAL_GPIO_Init+0x236>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a55      	ldr	r2, [pc, #340]	; (800300c <HAL_GPIO_Init+0x338>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d025      	beq.n	8002f06 <HAL_GPIO_Init+0x232>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a54      	ldr	r2, [pc, #336]	; (8003010 <HAL_GPIO_Init+0x33c>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d01f      	beq.n	8002f02 <HAL_GPIO_Init+0x22e>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a53      	ldr	r2, [pc, #332]	; (8003014 <HAL_GPIO_Init+0x340>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d019      	beq.n	8002efe <HAL_GPIO_Init+0x22a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_GPIO_Init+0x344>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d013      	beq.n	8002efa <HAL_GPIO_Init+0x226>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a51      	ldr	r2, [pc, #324]	; (800301c <HAL_GPIO_Init+0x348>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d00d      	beq.n	8002ef6 <HAL_GPIO_Init+0x222>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	4a50      	ldr	r2, [pc, #320]	; (8003020 <HAL_GPIO_Init+0x34c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d007      	beq.n	8002ef2 <HAL_GPIO_Init+0x21e>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	4a4f      	ldr	r2, [pc, #316]	; (8003024 <HAL_GPIO_Init+0x350>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d101      	bne.n	8002eee <HAL_GPIO_Init+0x21a>
 8002eea:	2309      	movs	r3, #9
 8002eec:	e012      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002eee:	230a      	movs	r3, #10
 8002ef0:	e010      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002ef2:	2308      	movs	r3, #8
 8002ef4:	e00e      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002ef6:	2307      	movs	r3, #7
 8002ef8:	e00c      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002efa:	2306      	movs	r3, #6
 8002efc:	e00a      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002efe:	2305      	movs	r3, #5
 8002f00:	e008      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f02:	2304      	movs	r3, #4
 8002f04:	e006      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f06:	2303      	movs	r3, #3
 8002f08:	e004      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f0a:	2302      	movs	r3, #2
 8002f0c:	e002      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_GPIO_Init+0x240>
 8002f12:	2300      	movs	r3, #0
 8002f14:	69fa      	ldr	r2, [r7, #28]
 8002f16:	f002 0203 	and.w	r2, r2, #3
 8002f1a:	0092      	lsls	r2, r2, #2
 8002f1c:	4093      	lsls	r3, r2
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	4313      	orrs	r3, r2
 8002f22:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f24:	4935      	ldr	r1, [pc, #212]	; (8002ffc <HAL_GPIO_Init+0x328>)
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	089b      	lsrs	r3, r3, #2
 8002f2a:	3302      	adds	r3, #2
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f32:	4b3d      	ldr	r3, [pc, #244]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	43db      	mvns	r3, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4013      	ands	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f4e:	69ba      	ldr	r2, [r7, #24]
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f56:	4a34      	ldr	r2, [pc, #208]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f5c:	4b32      	ldr	r3, [pc, #200]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d003      	beq.n	8002f80 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f80:	4a29      	ldr	r2, [pc, #164]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f86:	4b28      	ldr	r3, [pc, #160]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	4013      	ands	r3, r2
 8002f94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d003      	beq.n	8002faa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002faa:	4a1f      	ldr	r2, [pc, #124]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fb0:	4b1d      	ldr	r3, [pc, #116]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	43db      	mvns	r3, r3
 8002fba:	69ba      	ldr	r2, [r7, #24]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d003      	beq.n	8002fd4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	693b      	ldr	r3, [r7, #16]
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fd4:	4a14      	ldr	r2, [pc, #80]	; (8003028 <HAL_GPIO_Init+0x354>)
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	3301      	adds	r3, #1
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	2b0f      	cmp	r3, #15
 8002fe4:	f67f ae84 	bls.w	8002cf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3724      	adds	r7, #36	; 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	40013800 	.word	0x40013800
 8003000:	40020000 	.word	0x40020000
 8003004:	40020400 	.word	0x40020400
 8003008:	40020800 	.word	0x40020800
 800300c:	40020c00 	.word	0x40020c00
 8003010:	40021000 	.word	0x40021000
 8003014:	40021400 	.word	0x40021400
 8003018:	40021800 	.word	0x40021800
 800301c:	40021c00 	.word	0x40021c00
 8003020:	40022000 	.word	0x40022000
 8003024:	40022400 	.word	0x40022400
 8003028:	40013c00 	.word	0x40013c00

0800302c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	6078      	str	r0, [r7, #4]
 8003034:	460b      	mov	r3, r1
 8003036:	807b      	strh	r3, [r7, #2]
 8003038:	4613      	mov	r3, r2
 800303a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800303c:	787b      	ldrb	r3, [r7, #1]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d003      	beq.n	800304a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003042:	887a      	ldrh	r2, [r7, #2]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003048:	e003      	b.n	8003052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	041a      	lsls	r2, r3, #16
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	619a      	str	r2, [r3, #24]
}
 8003052:	bf00      	nop
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr
	...

08003060 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d101      	bne.n	8003072 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e12b      	b.n	80032ca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d106      	bne.n	800308c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fe fff8 	bl	800207c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2224      	movs	r2, #36	; 0x24
 8003090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f022 0201 	bic.w	r2, r2, #1
 80030a2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681a      	ldr	r2, [r3, #0]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030b2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030c2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c4:	f001 fc4c 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 80030c8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	4a81      	ldr	r2, [pc, #516]	; (80032d4 <HAL_I2C_Init+0x274>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d807      	bhi.n	80030e4 <HAL_I2C_Init+0x84>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4a80      	ldr	r2, [pc, #512]	; (80032d8 <HAL_I2C_Init+0x278>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	bf94      	ite	ls
 80030dc:	2301      	movls	r3, #1
 80030de:	2300      	movhi	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	e006      	b.n	80030f2 <HAL_I2C_Init+0x92>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	4a7d      	ldr	r2, [pc, #500]	; (80032dc <HAL_I2C_Init+0x27c>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	bf94      	ite	ls
 80030ec:	2301      	movls	r3, #1
 80030ee:	2300      	movhi	r3, #0
 80030f0:	b2db      	uxtb	r3, r3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e0e7      	b.n	80032ca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	4a78      	ldr	r2, [pc, #480]	; (80032e0 <HAL_I2C_Init+0x280>)
 80030fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003102:	0c9b      	lsrs	r3, r3, #18
 8003104:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	68ba      	ldr	r2, [r7, #8]
 8003116:	430a      	orrs	r2, r1
 8003118:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6a1b      	ldr	r3, [r3, #32]
 8003120:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a6a      	ldr	r2, [pc, #424]	; (80032d4 <HAL_I2C_Init+0x274>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d802      	bhi.n	8003134 <HAL_I2C_Init+0xd4>
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	3301      	adds	r3, #1
 8003132:	e009      	b.n	8003148 <HAL_I2C_Init+0xe8>
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800313a:	fb02 f303 	mul.w	r3, r2, r3
 800313e:	4a69      	ldr	r2, [pc, #420]	; (80032e4 <HAL_I2C_Init+0x284>)
 8003140:	fba2 2303 	umull	r2, r3, r2, r3
 8003144:	099b      	lsrs	r3, r3, #6
 8003146:	3301      	adds	r3, #1
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6812      	ldr	r2, [r2, #0]
 800314c:	430b      	orrs	r3, r1
 800314e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800315a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	495c      	ldr	r1, [pc, #368]	; (80032d4 <HAL_I2C_Init+0x274>)
 8003164:	428b      	cmp	r3, r1
 8003166:	d819      	bhi.n	800319c <HAL_I2C_Init+0x13c>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1e59      	subs	r1, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	fbb1 f3f3 	udiv	r3, r1, r3
 8003176:	1c59      	adds	r1, r3, #1
 8003178:	f640 73fc 	movw	r3, #4092	; 0xffc
 800317c:	400b      	ands	r3, r1
 800317e:	2b00      	cmp	r3, #0
 8003180:	d00a      	beq.n	8003198 <HAL_I2C_Init+0x138>
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	1e59      	subs	r1, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	005b      	lsls	r3, r3, #1
 800318c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003190:	3301      	adds	r3, #1
 8003192:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003196:	e051      	b.n	800323c <HAL_I2C_Init+0x1dc>
 8003198:	2304      	movs	r3, #4
 800319a:	e04f      	b.n	800323c <HAL_I2C_Init+0x1dc>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d111      	bne.n	80031c8 <HAL_I2C_Init+0x168>
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	1e58      	subs	r0, r3, #1
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6859      	ldr	r1, [r3, #4]
 80031ac:	460b      	mov	r3, r1
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	440b      	add	r3, r1
 80031b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031b6:	3301      	adds	r3, #1
 80031b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031bc:	2b00      	cmp	r3, #0
 80031be:	bf0c      	ite	eq
 80031c0:	2301      	moveq	r3, #1
 80031c2:	2300      	movne	r3, #0
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	e012      	b.n	80031ee <HAL_I2C_Init+0x18e>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	1e58      	subs	r0, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6859      	ldr	r1, [r3, #4]
 80031d0:	460b      	mov	r3, r1
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	440b      	add	r3, r1
 80031d6:	0099      	lsls	r1, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	fbb0 f3f3 	udiv	r3, r0, r3
 80031de:	3301      	adds	r3, #1
 80031e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	bf0c      	ite	eq
 80031e8:	2301      	moveq	r3, #1
 80031ea:	2300      	movne	r3, #0
 80031ec:	b2db      	uxtb	r3, r3
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d001      	beq.n	80031f6 <HAL_I2C_Init+0x196>
 80031f2:	2301      	movs	r3, #1
 80031f4:	e022      	b.n	800323c <HAL_I2C_Init+0x1dc>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d10e      	bne.n	800321c <HAL_I2C_Init+0x1bc>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	1e58      	subs	r0, r3, #1
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	460b      	mov	r3, r1
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	440b      	add	r3, r1
 800320c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003210:	3301      	adds	r3, #1
 8003212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003216:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800321a:	e00f      	b.n	800323c <HAL_I2C_Init+0x1dc>
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	1e58      	subs	r0, r3, #1
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6859      	ldr	r1, [r3, #4]
 8003224:	460b      	mov	r3, r1
 8003226:	009b      	lsls	r3, r3, #2
 8003228:	440b      	add	r3, r1
 800322a:	0099      	lsls	r1, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003232:	3301      	adds	r3, #1
 8003234:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003238:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	6809      	ldr	r1, [r1, #0]
 8003240:	4313      	orrs	r3, r2
 8003242:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69da      	ldr	r2, [r3, #28]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6a1b      	ldr	r3, [r3, #32]
 8003256:	431a      	orrs	r2, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800326a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6911      	ldr	r1, [r2, #16]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	68d2      	ldr	r2, [r2, #12]
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6812      	ldr	r2, [r2, #0]
 800327c:	430b      	orrs	r3, r1
 800327e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695a      	ldr	r2, [r3, #20]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	699b      	ldr	r3, [r3, #24]
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f042 0201 	orr.w	r2, r2, #1
 80032aa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2200      	movs	r2, #0
 80032b0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	3710      	adds	r7, #16
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	bf00      	nop
 80032d4:	000186a0 	.word	0x000186a0
 80032d8:	001e847f 	.word	0x001e847f
 80032dc:	003d08ff 	.word	0x003d08ff
 80032e0:	431bde83 	.word	0x431bde83
 80032e4:	10624dd3 	.word	0x10624dd3

080032e8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b088      	sub	sp, #32
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	607a      	str	r2, [r7, #4]
 80032f2:	461a      	mov	r2, r3
 80032f4:	460b      	mov	r3, r1
 80032f6:	817b      	strh	r3, [r7, #10]
 80032f8:	4613      	mov	r3, r2
 80032fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80032fc:	f7ff fbd4 	bl	8002aa8 <HAL_GetTick>
 8003300:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b20      	cmp	r3, #32
 800330c:	f040 80e0 	bne.w	80034d0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	2319      	movs	r3, #25
 8003316:	2201      	movs	r2, #1
 8003318:	4970      	ldr	r1, [pc, #448]	; (80034dc <HAL_I2C_Master_Transmit+0x1f4>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fc58 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
 8003328:	e0d3      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_I2C_Master_Transmit+0x50>
 8003334:	2302      	movs	r3, #2
 8003336:	e0cc      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d007      	beq.n	800335e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681a      	ldr	r2, [r3, #0]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0201 	orr.w	r2, r2, #1
 800335c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800336c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2221      	movs	r2, #33	; 0x21
 8003372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2210      	movs	r2, #16
 800337a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	687a      	ldr	r2, [r7, #4]
 8003388:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	893a      	ldrh	r2, [r7, #8]
 800338e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	4a50      	ldr	r2, [pc, #320]	; (80034e0 <HAL_I2C_Master_Transmit+0x1f8>)
 800339e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033a0:	8979      	ldrh	r1, [r7, #10]
 80033a2:	697b      	ldr	r3, [r7, #20]
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	68f8      	ldr	r0, [r7, #12]
 80033a8:	f000 fac2 	bl	8003930 <I2C_MasterRequestWrite>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e08d      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033b6:	2300      	movs	r3, #0
 80033b8:	613b      	str	r3, [r7, #16]
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695b      	ldr	r3, [r3, #20]
 80033c0:	613b      	str	r3, [r7, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	613b      	str	r3, [r7, #16]
 80033ca:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033cc:	e066      	b.n	800349c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	6a39      	ldr	r1, [r7, #32]
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fcd2 	bl	8003d7c <I2C_WaitOnTXEFlagUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00d      	beq.n	80033fa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	d107      	bne.n	80033f6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e06b      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	781a      	ldrb	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003414:	b29b      	uxth	r3, r3
 8003416:	3b01      	subs	r3, #1
 8003418:	b29a      	uxth	r2, r3
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003422:	3b01      	subs	r3, #1
 8003424:	b29a      	uxth	r2, r3
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	f003 0304 	and.w	r3, r3, #4
 8003434:	2b04      	cmp	r3, #4
 8003436:	d11b      	bne.n	8003470 <HAL_I2C_Master_Transmit+0x188>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	2b00      	cmp	r3, #0
 800343e:	d017      	beq.n	8003470 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003470:	697a      	ldr	r2, [r7, #20]
 8003472:	6a39      	ldr	r1, [r7, #32]
 8003474:	68f8      	ldr	r0, [r7, #12]
 8003476:	f000 fcc2 	bl	8003dfe <I2C_WaitOnBTFFlagUntilTimeout>
 800347a:	4603      	mov	r3, r0
 800347c:	2b00      	cmp	r3, #0
 800347e:	d00d      	beq.n	800349c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	2b04      	cmp	r3, #4
 8003486:	d107      	bne.n	8003498 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003496:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e01a      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d194      	bne.n	80033ce <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2220      	movs	r2, #32
 80034b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	e000      	b.n	80034d2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034d0:	2302      	movs	r3, #2
  }
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	00100002 	.word	0x00100002
 80034e0:	ffff0000 	.word	0xffff0000

080034e4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08c      	sub	sp, #48	; 0x30
 80034e8:	af02      	add	r7, sp, #8
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	607a      	str	r2, [r7, #4]
 80034ee:	461a      	mov	r2, r3
 80034f0:	460b      	mov	r3, r1
 80034f2:	817b      	strh	r3, [r7, #10]
 80034f4:	4613      	mov	r3, r2
 80034f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034f8:	f7ff fad6 	bl	8002aa8 <HAL_GetTick>
 80034fc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b20      	cmp	r3, #32
 8003508:	f040 820b 	bne.w	8003922 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800350c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350e:	9300      	str	r3, [sp, #0]
 8003510:	2319      	movs	r3, #25
 8003512:	2201      	movs	r2, #1
 8003514:	497c      	ldr	r1, [pc, #496]	; (8003708 <HAL_I2C_Master_Receive+0x224>)
 8003516:	68f8      	ldr	r0, [r7, #12]
 8003518:	f000 fb5a 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d001      	beq.n	8003526 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003522:	2302      	movs	r3, #2
 8003524:	e1fe      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800352c:	2b01      	cmp	r3, #1
 800352e:	d101      	bne.n	8003534 <HAL_I2C_Master_Receive+0x50>
 8003530:	2302      	movs	r3, #2
 8003532:	e1f7      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b01      	cmp	r3, #1
 8003548:	d007      	beq.n	800355a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f042 0201 	orr.w	r2, r2, #1
 8003558:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	681a      	ldr	r2, [r3, #0]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003568:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2222      	movs	r2, #34	; 0x22
 800356e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	2210      	movs	r2, #16
 8003576:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	893a      	ldrh	r2, [r7, #8]
 800358a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003590:	b29a      	uxth	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	4a5c      	ldr	r2, [pc, #368]	; (800370c <HAL_I2C_Master_Receive+0x228>)
 800359a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800359c:	8979      	ldrh	r1, [r7, #10]
 800359e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fa46 	bl	8003a34 <I2C_MasterRequestRead>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d001      	beq.n	80035b2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e1b8      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d113      	bne.n	80035e2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ba:	2300      	movs	r3, #0
 80035bc:	623b      	str	r3, [r7, #32]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	695b      	ldr	r3, [r3, #20]
 80035c4:	623b      	str	r3, [r7, #32]
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	623b      	str	r3, [r7, #32]
 80035ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035de:	601a      	str	r2, [r3, #0]
 80035e0:	e18c      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d11b      	bne.n	8003622 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fa:	2300      	movs	r3, #0
 80035fc:	61fb      	str	r3, [r7, #28]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	695b      	ldr	r3, [r3, #20]
 8003604:	61fb      	str	r3, [r7, #28]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	699b      	ldr	r3, [r3, #24]
 800360c:	61fb      	str	r3, [r7, #28]
 800360e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361e:	601a      	str	r2, [r3, #0]
 8003620:	e16c      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003626:	2b02      	cmp	r3, #2
 8003628:	d11b      	bne.n	8003662 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003638:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003648:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364a:	2300      	movs	r3, #0
 800364c:	61bb      	str	r3, [r7, #24]
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	695b      	ldr	r3, [r3, #20]
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699b      	ldr	r3, [r3, #24]
 800365c:	61bb      	str	r3, [r7, #24]
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	e14c      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003670:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003672:	2300      	movs	r3, #0
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	617b      	str	r3, [r7, #20]
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	699b      	ldr	r3, [r3, #24]
 8003684:	617b      	str	r3, [r7, #20]
 8003686:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003688:	e138      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368e:	2b03      	cmp	r3, #3
 8003690:	f200 80f1 	bhi.w	8003876 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003698:	2b01      	cmp	r3, #1
 800369a:	d123      	bne.n	80036e4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800369c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800369e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fbed 	bl	8003e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e139      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691a      	ldr	r2, [r3, #16]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	b2d2      	uxtb	r2, r2
 80036bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036cc:	3b01      	subs	r3, #1
 80036ce:	b29a      	uxth	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d8:	b29b      	uxth	r3, r3
 80036da:	3b01      	subs	r3, #1
 80036dc:	b29a      	uxth	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80036e2:	e10b      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e8:	2b02      	cmp	r3, #2
 80036ea:	d14e      	bne.n	800378a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f2:	2200      	movs	r2, #0
 80036f4:	4906      	ldr	r1, [pc, #24]	; (8003710 <HAL_I2C_Master_Receive+0x22c>)
 80036f6:	68f8      	ldr	r0, [r7, #12]
 80036f8:	f000 fa6a 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d008      	beq.n	8003714 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e10e      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
 8003706:	bf00      	nop
 8003708:	00100002 	.word	0x00100002
 800370c:	ffff0000 	.word	0xffff0000
 8003710:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003722:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003736:	1c5a      	adds	r2, r3, #1
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003740:	3b01      	subs	r3, #1
 8003742:	b29a      	uxth	r2, r3
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800374c:	b29b      	uxth	r3, r3
 800374e:	3b01      	subs	r3, #1
 8003750:	b29a      	uxth	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691a      	ldr	r2, [r3, #16]
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003760:	b2d2      	uxtb	r2, r2
 8003762:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003772:	3b01      	subs	r3, #1
 8003774:	b29a      	uxth	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29b      	uxth	r3, r3
 8003780:	3b01      	subs	r3, #1
 8003782:	b29a      	uxth	r2, r3
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003788:	e0b8      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003790:	2200      	movs	r2, #0
 8003792:	4966      	ldr	r1, [pc, #408]	; (800392c <HAL_I2C_Master_Receive+0x448>)
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f000 fa1b 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0bf      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037b2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691a      	ldr	r2, [r3, #16]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	b2d2      	uxtb	r2, r2
 80037c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d0:	3b01      	subs	r3, #1
 80037d2:	b29a      	uxth	r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037dc:	b29b      	uxth	r3, r3
 80037de:	3b01      	subs	r3, #1
 80037e0:	b29a      	uxth	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	9300      	str	r3, [sp, #0]
 80037ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ec:	2200      	movs	r2, #0
 80037ee:	494f      	ldr	r1, [pc, #316]	; (800392c <HAL_I2C_Master_Receive+0x448>)
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f9ed 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d001      	beq.n	8003800 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e091      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800380e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003822:	1c5a      	adds	r2, r3, #1
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800382c:	3b01      	subs	r3, #1
 800382e:	b29a      	uxth	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	691a      	ldr	r2, [r3, #16]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	b2d2      	uxtb	r2, r2
 800384e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003854:	1c5a      	adds	r2, r3, #1
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385e:	3b01      	subs	r3, #1
 8003860:	b29a      	uxth	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800386a:	b29b      	uxth	r3, r3
 800386c:	3b01      	subs	r3, #1
 800386e:	b29a      	uxth	r2, r3
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003874:	e042      	b.n	80038fc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003878:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 fb00 	bl	8003e80 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003880:	4603      	mov	r3, r0
 8003882:	2b00      	cmp	r3, #0
 8003884:	d001      	beq.n	800388a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e04c      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691a      	ldr	r2, [r3, #16]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389c:	1c5a      	adds	r2, r3, #1
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	3b01      	subs	r3, #1
 80038b6:	b29a      	uxth	r2, r3
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	f003 0304 	and.w	r3, r3, #4
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d118      	bne.n	80038fc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	691a      	ldr	r2, [r3, #16]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	1c5a      	adds	r2, r3, #1
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f2:	b29b      	uxth	r3, r3
 80038f4:	3b01      	subs	r3, #1
 80038f6:	b29a      	uxth	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	2b00      	cmp	r3, #0
 8003902:	f47f aec2 	bne.w	800368a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2220      	movs	r2, #32
 800390a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2200      	movs	r2, #0
 8003912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	e000      	b.n	8003924 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003922:	2302      	movs	r3, #2
  }
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bd80      	pop	{r7, pc}
 800392c:	00010004 	.word	0x00010004

08003930 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b088      	sub	sp, #32
 8003934:	af02      	add	r7, sp, #8
 8003936:	60f8      	str	r0, [r7, #12]
 8003938:	607a      	str	r2, [r7, #4]
 800393a:	603b      	str	r3, [r7, #0]
 800393c:	460b      	mov	r3, r1
 800393e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003944:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d006      	beq.n	800395a <I2C_MasterRequestWrite+0x2a>
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d003      	beq.n	800395a <I2C_MasterRequestWrite+0x2a>
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003958:	d108      	bne.n	800396c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	e00b      	b.n	8003984 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	2b12      	cmp	r3, #18
 8003972:	d107      	bne.n	8003984 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681a      	ldr	r2, [r3, #0]
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003982:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	9300      	str	r3, [sp, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003990:	68f8      	ldr	r0, [r7, #12]
 8003992:	f000 f91d 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00d      	beq.n	80039b8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039aa:	d103      	bne.n	80039b4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e035      	b.n	8003a24 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039c0:	d108      	bne.n	80039d4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	461a      	mov	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80039d0:	611a      	str	r2, [r3, #16]
 80039d2:	e01b      	b.n	8003a0c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80039d4:	897b      	ldrh	r3, [r7, #10]
 80039d6:	11db      	asrs	r3, r3, #7
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f003 0306 	and.w	r3, r3, #6
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	f063 030f 	orn	r3, r3, #15
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	490e      	ldr	r1, [pc, #56]	; (8003a2c <I2C_MasterRequestWrite+0xfc>)
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f943 	bl	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d001      	beq.n	8003a02 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e010      	b.n	8003a24 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003a02:	897b      	ldrh	r3, [r7, #10]
 8003a04:	b2da      	uxtb	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4907      	ldr	r1, [pc, #28]	; (8003a30 <I2C_MasterRequestWrite+0x100>)
 8003a12:	68f8      	ldr	r0, [r7, #12]
 8003a14:	f000 f933 	bl	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e000      	b.n	8003a24 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3718      	adds	r7, #24
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}
 8003a2c:	00010008 	.word	0x00010008
 8003a30:	00010002 	.word	0x00010002

08003a34 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b088      	sub	sp, #32
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	60f8      	str	r0, [r7, #12]
 8003a3c:	607a      	str	r2, [r7, #4]
 8003a3e:	603b      	str	r3, [r7, #0]
 8003a40:	460b      	mov	r3, r1
 8003a42:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003a58:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	2b08      	cmp	r3, #8
 8003a5e:	d006      	beq.n	8003a6e <I2C_MasterRequestRead+0x3a>
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d003      	beq.n	8003a6e <I2C_MasterRequestRead+0x3a>
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a6c:	d108      	bne.n	8003a80 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	e00b      	b.n	8003a98 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b11      	cmp	r3, #17
 8003a86:	d107      	bne.n	8003a98 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 f893 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d00d      	beq.n	8003acc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	d103      	bne.n	8003ac8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e079      	b.n	8003bc0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003ad4:	d108      	bne.n	8003ae8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ad6:	897b      	ldrh	r3, [r7, #10]
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	f043 0301 	orr.w	r3, r3, #1
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	611a      	str	r2, [r3, #16]
 8003ae6:	e05f      	b.n	8003ba8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ae8:	897b      	ldrh	r3, [r7, #10]
 8003aea:	11db      	asrs	r3, r3, #7
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	f003 0306 	and.w	r3, r3, #6
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	f063 030f 	orn	r3, r3, #15
 8003af8:	b2da      	uxtb	r2, r3
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	4930      	ldr	r1, [pc, #192]	; (8003bc8 <I2C_MasterRequestRead+0x194>)
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f000 f8b9 	bl	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d001      	beq.n	8003b16 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e054      	b.n	8003bc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003b16:	897b      	ldrh	r3, [r7, #10]
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	4929      	ldr	r1, [pc, #164]	; (8003bcc <I2C_MasterRequestRead+0x198>)
 8003b26:	68f8      	ldr	r0, [r7, #12]
 8003b28:	f000 f8a9 	bl	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003b32:	2301      	movs	r3, #1
 8003b34:	e044      	b.n	8003bc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b36:	2300      	movs	r3, #0
 8003b38:	613b      	str	r3, [r7, #16]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	613b      	str	r3, [r7, #16]
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	699b      	ldr	r3, [r3, #24]
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b5a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	9300      	str	r3, [sp, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b68:	68f8      	ldr	r0, [r7, #12]
 8003b6a:	f000 f831 	bl	8003bd0 <I2C_WaitOnFlagUntilTimeout>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d00d      	beq.n	8003b90 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b82:	d103      	bne.n	8003b8c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003b8c:	2303      	movs	r3, #3
 8003b8e:	e017      	b.n	8003bc0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b90:	897b      	ldrh	r3, [r7, #10]
 8003b92:	11db      	asrs	r3, r3, #7
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f003 0306 	and.w	r3, r3, #6
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	f063 030e 	orn	r3, r3, #14
 8003ba0:	b2da      	uxtb	r2, r3
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	4907      	ldr	r1, [pc, #28]	; (8003bcc <I2C_MasterRequestRead+0x198>)
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f865 	bl	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	00010008 	.word	0x00010008
 8003bcc:	00010002 	.word	0x00010002

08003bd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b084      	sub	sp, #16
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	603b      	str	r3, [r7, #0]
 8003bdc:	4613      	mov	r3, r2
 8003bde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003be0:	e025      	b.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003be8:	d021      	beq.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bea:	f7fe ff5d 	bl	8002aa8 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d302      	bcc.n	8003c00 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d116      	bne.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	2200      	movs	r2, #0
 8003c04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2220      	movs	r2, #32
 8003c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1a:	f043 0220 	orr.w	r2, r3, #32
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e023      	b.n	8003c76 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d10d      	bne.n	8003c54 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	695b      	ldr	r3, [r3, #20]
 8003c3e:	43da      	mvns	r2, r3
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	4013      	ands	r3, r2
 8003c44:	b29b      	uxth	r3, r3
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	bf0c      	ite	eq
 8003c4a:	2301      	moveq	r3, #1
 8003c4c:	2300      	movne	r3, #0
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	461a      	mov	r2, r3
 8003c52:	e00c      	b.n	8003c6e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	43da      	mvns	r2, r3
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	4013      	ands	r3, r2
 8003c60:	b29b      	uxth	r3, r3
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	bf0c      	ite	eq
 8003c66:	2301      	moveq	r3, #1
 8003c68:	2300      	movne	r3, #0
 8003c6a:	b2db      	uxtb	r3, r3
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	79fb      	ldrb	r3, [r7, #7]
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d0b6      	beq.n	8003be2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3710      	adds	r7, #16
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}

08003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c7e:	b580      	push	{r7, lr}
 8003c80:	b084      	sub	sp, #16
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	60b9      	str	r1, [r7, #8]
 8003c88:	607a      	str	r2, [r7, #4]
 8003c8a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c8c:	e051      	b.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c9c:	d123      	bne.n	8003ce6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cac:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cb6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2220      	movs	r2, #32
 8003cc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd2:	f043 0204 	orr.w	r2, r3, #4
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e046      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cec:	d021      	beq.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cee:	f7fe fedb 	bl	8002aa8 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d302      	bcc.n	8003d04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d116      	bne.n	8003d32 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2200      	movs	r2, #0
 8003d08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2220      	movs	r2, #32
 8003d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0220 	orr.w	r2, r3, #32
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e020      	b.n	8003d74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	0c1b      	lsrs	r3, r3, #16
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d10c      	bne.n	8003d56 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	43da      	mvns	r2, r3
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	4013      	ands	r3, r2
 8003d48:	b29b      	uxth	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	bf14      	ite	ne
 8003d4e:	2301      	movne	r3, #1
 8003d50:	2300      	moveq	r3, #0
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	e00b      	b.n	8003d6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d18d      	bne.n	8003c8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b084      	sub	sp, #16
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d88:	e02d      	b.n	8003de6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d8a:	68f8      	ldr	r0, [r7, #12]
 8003d8c:	f000 f8ce 	bl	8003f2c <I2C_IsAcknowledgeFailed>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e02d      	b.n	8003df6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003da0:	d021      	beq.n	8003de6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003da2:	f7fe fe81 	bl	8002aa8 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	68ba      	ldr	r2, [r7, #8]
 8003dae:	429a      	cmp	r2, r3
 8003db0:	d302      	bcc.n	8003db8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d116      	bne.n	8003de6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2220      	movs	r2, #32
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd2:	f043 0220 	orr.w	r2, r3, #32
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e007      	b.n	8003df6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	695b      	ldr	r3, [r3, #20]
 8003dec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003df0:	2b80      	cmp	r3, #128	; 0x80
 8003df2:	d1ca      	bne.n	8003d8a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3710      	adds	r7, #16
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}

08003dfe <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003dfe:	b580      	push	{r7, lr}
 8003e00:	b084      	sub	sp, #16
 8003e02:	af00      	add	r7, sp, #0
 8003e04:	60f8      	str	r0, [r7, #12]
 8003e06:	60b9      	str	r1, [r7, #8]
 8003e08:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e0a:	e02d      	b.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e0c:	68f8      	ldr	r0, [r7, #12]
 8003e0e:	f000 f88d 	bl	8003f2c <I2C_IsAcknowledgeFailed>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d001      	beq.n	8003e1c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e02d      	b.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1c:	68bb      	ldr	r3, [r7, #8]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d021      	beq.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e24:	f7fe fe40 	bl	8002aa8 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	68ba      	ldr	r2, [r7, #8]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d302      	bcc.n	8003e3a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d116      	bne.n	8003e68 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2220      	movs	r2, #32
 8003e44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e54:	f043 0220 	orr.w	r2, r3, #32
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e007      	b.n	8003e78 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	695b      	ldr	r3, [r3, #20]
 8003e6e:	f003 0304 	and.w	r3, r3, #4
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d1ca      	bne.n	8003e0c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e76:	2300      	movs	r3, #0
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3710      	adds	r7, #16
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	60f8      	str	r0, [r7, #12]
 8003e88:	60b9      	str	r1, [r7, #8]
 8003e8a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e8c:	e042      	b.n	8003f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	695b      	ldr	r3, [r3, #20]
 8003e94:	f003 0310 	and.w	r3, r3, #16
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d119      	bne.n	8003ed0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f06f 0210 	mvn.w	r2, #16
 8003ea4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e029      	b.n	8003f24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed0:	f7fe fdea 	bl	8002aa8 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	68ba      	ldr	r2, [r7, #8]
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d302      	bcc.n	8003ee6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d116      	bne.n	8003f14 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f00:	f043 0220 	orr.w	r2, r3, #32
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	e007      	b.n	8003f24 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b40      	cmp	r3, #64	; 0x40
 8003f20:	d1b5      	bne.n	8003e8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}

08003f2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f42:	d11b      	bne.n	8003f7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2200      	movs	r2, #0
 8003f52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2220      	movs	r2, #32
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2200      	movs	r2, #0
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f68:	f043 0204 	orr.w	r2, r3, #4
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e000      	b.n	8003f7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b20      	cmp	r3, #32
 8003f9e:	d129      	bne.n	8003ff4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2224      	movs	r2, #36	; 0x24
 8003fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f022 0201 	bic.w	r2, r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f022 0210 	bic.w	r2, r2, #16
 8003fc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	683a      	ldr	r2, [r7, #0]
 8003fd4:	430a      	orrs	r2, r1
 8003fd6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	e000      	b.n	8003ff6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003ff4:	2302      	movs	r3, #2
  }
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	370c      	adds	r7, #12
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr

08004002 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004002:	b480      	push	{r7}
 8004004:	b085      	sub	sp, #20
 8004006:	af00      	add	r7, sp, #0
 8004008:	6078      	str	r0, [r7, #4]
 800400a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800400c:	2300      	movs	r3, #0
 800400e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004016:	b2db      	uxtb	r3, r3
 8004018:	2b20      	cmp	r3, #32
 800401a:	d12a      	bne.n	8004072 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	; 0x24
 8004020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0201 	bic.w	r2, r2, #1
 8004032:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800403c:	89fb      	ldrh	r3, [r7, #14]
 800403e:	f023 030f 	bic.w	r3, r3, #15
 8004042:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	b29a      	uxth	r2, r3
 8004048:	89fb      	ldrh	r3, [r7, #14]
 800404a:	4313      	orrs	r3, r2
 800404c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	89fa      	ldrh	r2, [r7, #14]
 8004054:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f042 0201 	orr.w	r2, r2, #1
 8004064:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2220      	movs	r2, #32
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	e000      	b.n	8004074 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004072:	2302      	movs	r3, #2
  }
}
 8004074:	4618      	mov	r0, r3
 8004076:	3714      	adds	r7, #20
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b086      	sub	sp, #24
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d101      	bne.n	8004092 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e267      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 0301 	and.w	r3, r3, #1
 800409a:	2b00      	cmp	r3, #0
 800409c:	d075      	beq.n	800418a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800409e:	4b88      	ldr	r3, [pc, #544]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f003 030c 	and.w	r3, r3, #12
 80040a6:	2b04      	cmp	r3, #4
 80040a8:	d00c      	beq.n	80040c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040aa:	4b85      	ldr	r3, [pc, #532]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040b2:	2b08      	cmp	r3, #8
 80040b4:	d112      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80040b6:	4b82      	ldr	r3, [pc, #520]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040b8:	685b      	ldr	r3, [r3, #4]
 80040ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040c2:	d10b      	bne.n	80040dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040c4:	4b7e      	ldr	r3, [pc, #504]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d05b      	beq.n	8004188 <HAL_RCC_OscConfig+0x108>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d157      	bne.n	8004188 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	e242      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d106      	bne.n	80040f4 <HAL_RCC_OscConfig+0x74>
 80040e6:	4b76      	ldr	r3, [pc, #472]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	4a75      	ldr	r2, [pc, #468]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80040ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040f0:	6013      	str	r3, [r2, #0]
 80040f2:	e01d      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x98>
 80040fe:	4b70      	ldr	r3, [pc, #448]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a6f      	ldr	r2, [pc, #444]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004108:	6013      	str	r3, [r2, #0]
 800410a:	4b6d      	ldr	r3, [pc, #436]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a6c      	ldr	r2, [pc, #432]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004114:	6013      	str	r3, [r2, #0]
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0xb0>
 8004118:	4b69      	ldr	r3, [pc, #420]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a68      	ldr	r2, [pc, #416]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800411e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004122:	6013      	str	r3, [r2, #0]
 8004124:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a65      	ldr	r2, [pc, #404]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800412a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800412e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d013      	beq.n	8004160 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe fcb6 	bl	8002aa8 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004140:	f7fe fcb2 	bl	8002aa8 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b64      	cmp	r3, #100	; 0x64
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e207      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004152:	4b5b      	ldr	r3, [pc, #364]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0xc0>
 800415e:	e014      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004160:	f7fe fca2 	bl	8002aa8 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004168:	f7fe fc9e 	bl	8002aa8 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b64      	cmp	r3, #100	; 0x64
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e1f3      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800417a:	4b51      	ldr	r3, [pc, #324]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0xe8>
 8004186:	e000      	b.n	800418a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0302 	and.w	r3, r3, #2
 8004192:	2b00      	cmp	r3, #0
 8004194:	d063      	beq.n	800425e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004196:	4b4a      	ldr	r3, [pc, #296]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f003 030c 	and.w	r3, r3, #12
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d00b      	beq.n	80041ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041a2:	4b47      	ldr	r3, [pc, #284]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041aa:	2b08      	cmp	r3, #8
 80041ac:	d11c      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041ae:	4b44      	ldr	r3, [pc, #272]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d116      	bne.n	80041e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041ba:	4b41      	ldr	r3, [pc, #260]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d005      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e1c7      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041d2:	4b3b      	ldr	r3, [pc, #236]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	00db      	lsls	r3, r3, #3
 80041e0:	4937      	ldr	r1, [pc, #220]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80041e6:	e03a      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d020      	beq.n	8004232 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80041f0:	4b34      	ldr	r3, [pc, #208]	; (80042c4 <HAL_RCC_OscConfig+0x244>)
 80041f2:	2201      	movs	r2, #1
 80041f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe fc57 	bl	8002aa8 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041fe:	f7fe fc53 	bl	8002aa8 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e1a8      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004210:	4b2b      	ldr	r3, [pc, #172]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f003 0302 	and.w	r3, r3, #2
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800421c:	4b28      	ldr	r3, [pc, #160]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4925      	ldr	r1, [pc, #148]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 800422c:	4313      	orrs	r3, r2
 800422e:	600b      	str	r3, [r1, #0]
 8004230:	e015      	b.n	800425e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004232:	4b24      	ldr	r3, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x244>)
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004238:	f7fe fc36 	bl	8002aa8 <HAL_GetTick>
 800423c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800423e:	e008      	b.n	8004252 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004240:	f7fe fc32 	bl	8002aa8 <HAL_GetTick>
 8004244:	4602      	mov	r2, r0
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	1ad3      	subs	r3, r2, r3
 800424a:	2b02      	cmp	r3, #2
 800424c:	d901      	bls.n	8004252 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e187      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004252:	4b1b      	ldr	r3, [pc, #108]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f003 0302 	and.w	r3, r3, #2
 800425a:	2b00      	cmp	r3, #0
 800425c:	d1f0      	bne.n	8004240 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0308 	and.w	r3, r3, #8
 8004266:	2b00      	cmp	r3, #0
 8004268:	d036      	beq.n	80042d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	695b      	ldr	r3, [r3, #20]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d016      	beq.n	80042a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004272:	4b15      	ldr	r3, [pc, #84]	; (80042c8 <HAL_RCC_OscConfig+0x248>)
 8004274:	2201      	movs	r2, #1
 8004276:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004278:	f7fe fc16 	bl	8002aa8 <HAL_GetTick>
 800427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800427e:	e008      	b.n	8004292 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004280:	f7fe fc12 	bl	8002aa8 <HAL_GetTick>
 8004284:	4602      	mov	r2, r0
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	1ad3      	subs	r3, r2, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e167      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004292:	4b0b      	ldr	r3, [pc, #44]	; (80042c0 <HAL_RCC_OscConfig+0x240>)
 8004294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0f0      	beq.n	8004280 <HAL_RCC_OscConfig+0x200>
 800429e:	e01b      	b.n	80042d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042a0:	4b09      	ldr	r3, [pc, #36]	; (80042c8 <HAL_RCC_OscConfig+0x248>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a6:	f7fe fbff 	bl	8002aa8 <HAL_GetTick>
 80042aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042ac:	e00e      	b.n	80042cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042ae:	f7fe fbfb 	bl	8002aa8 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d907      	bls.n	80042cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80042bc:	2303      	movs	r3, #3
 80042be:	e150      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80042c0:	40023800 	.word	0x40023800
 80042c4:	42470000 	.word	0x42470000
 80042c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80042cc:	4b88      	ldr	r3, [pc, #544]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ea      	bne.n	80042ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f003 0304 	and.w	r3, r3, #4
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 8097 	beq.w	8004414 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80042e6:	2300      	movs	r3, #0
 80042e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042ea:	4b81      	ldr	r3, [pc, #516]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10f      	bne.n	8004316 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f6:	2300      	movs	r3, #0
 80042f8:	60bb      	str	r3, [r7, #8]
 80042fa:	4b7d      	ldr	r3, [pc, #500]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	4a7c      	ldr	r2, [pc, #496]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004300:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004304:	6413      	str	r3, [r2, #64]	; 0x40
 8004306:	4b7a      	ldr	r3, [pc, #488]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800430e:	60bb      	str	r3, [r7, #8]
 8004310:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004312:	2301      	movs	r3, #1
 8004314:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004316:	4b77      	ldr	r3, [pc, #476]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800431e:	2b00      	cmp	r3, #0
 8004320:	d118      	bne.n	8004354 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004322:	4b74      	ldr	r3, [pc, #464]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a73      	ldr	r2, [pc, #460]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 8004328:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800432c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800432e:	f7fe fbbb 	bl	8002aa8 <HAL_GetTick>
 8004332:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004334:	e008      	b.n	8004348 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004336:	f7fe fbb7 	bl	8002aa8 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	2b02      	cmp	r3, #2
 8004342:	d901      	bls.n	8004348 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004344:	2303      	movs	r3, #3
 8004346:	e10c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004348:	4b6a      	ldr	r3, [pc, #424]	; (80044f4 <HAL_RCC_OscConfig+0x474>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d0f0      	beq.n	8004336 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b01      	cmp	r3, #1
 800435a:	d106      	bne.n	800436a <HAL_RCC_OscConfig+0x2ea>
 800435c:	4b64      	ldr	r3, [pc, #400]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800435e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004360:	4a63      	ldr	r2, [pc, #396]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004362:	f043 0301 	orr.w	r3, r3, #1
 8004366:	6713      	str	r3, [r2, #112]	; 0x70
 8004368:	e01c      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2b05      	cmp	r3, #5
 8004370:	d10c      	bne.n	800438c <HAL_RCC_OscConfig+0x30c>
 8004372:	4b5f      	ldr	r3, [pc, #380]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004376:	4a5e      	ldr	r2, [pc, #376]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004378:	f043 0304 	orr.w	r3, r3, #4
 800437c:	6713      	str	r3, [r2, #112]	; 0x70
 800437e:	4b5c      	ldr	r3, [pc, #368]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004380:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004382:	4a5b      	ldr	r2, [pc, #364]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004384:	f043 0301 	orr.w	r3, r3, #1
 8004388:	6713      	str	r3, [r2, #112]	; 0x70
 800438a:	e00b      	b.n	80043a4 <HAL_RCC_OscConfig+0x324>
 800438c:	4b58      	ldr	r3, [pc, #352]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800438e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004390:	4a57      	ldr	r2, [pc, #348]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	6713      	str	r3, [r2, #112]	; 0x70
 8004398:	4b55      	ldr	r3, [pc, #340]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800439c:	4a54      	ldr	r2, [pc, #336]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800439e:	f023 0304 	bic.w	r3, r3, #4
 80043a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d015      	beq.n	80043d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043ac:	f7fe fb7c 	bl	8002aa8 <HAL_GetTick>
 80043b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043b2:	e00a      	b.n	80043ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043b4:	f7fe fb78 	bl	8002aa8 <HAL_GetTick>
 80043b8:	4602      	mov	r2, r0
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	1ad3      	subs	r3, r2, r3
 80043be:	f241 3288 	movw	r2, #5000	; 0x1388
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e0cb      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043ca:	4b49      	ldr	r3, [pc, #292]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d0ee      	beq.n	80043b4 <HAL_RCC_OscConfig+0x334>
 80043d6:	e014      	b.n	8004402 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7fe fb66 	bl	8002aa8 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043de:	e00a      	b.n	80043f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043e0:	f7fe fb62 	bl	8002aa8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e0b5      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043f6:	4b3e      	ldr	r3, [pc, #248]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80043f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1ee      	bne.n	80043e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d105      	bne.n	8004414 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004408:	4b39      	ldr	r3, [pc, #228]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440c:	4a38      	ldr	r2, [pc, #224]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 800440e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004412:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	699b      	ldr	r3, [r3, #24]
 8004418:	2b00      	cmp	r3, #0
 800441a:	f000 80a1 	beq.w	8004560 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800441e:	4b34      	ldr	r3, [pc, #208]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 030c 	and.w	r3, r3, #12
 8004426:	2b08      	cmp	r3, #8
 8004428:	d05c      	beq.n	80044e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699b      	ldr	r3, [r3, #24]
 800442e:	2b02      	cmp	r3, #2
 8004430:	d141      	bne.n	80044b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004432:	4b31      	ldr	r3, [pc, #196]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 8004434:	2200      	movs	r2, #0
 8004436:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004438:	f7fe fb36 	bl	8002aa8 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004440:	f7fe fb32 	bl	8002aa8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e087      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004452:	4b27      	ldr	r3, [pc, #156]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	69da      	ldr	r2, [r3, #28]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	431a      	orrs	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800446c:	019b      	lsls	r3, r3, #6
 800446e:	431a      	orrs	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004474:	085b      	lsrs	r3, r3, #1
 8004476:	3b01      	subs	r3, #1
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004480:	061b      	lsls	r3, r3, #24
 8004482:	491b      	ldr	r1, [pc, #108]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 8004484:	4313      	orrs	r3, r2
 8004486:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004488:	4b1b      	ldr	r3, [pc, #108]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 800448a:	2201      	movs	r2, #1
 800448c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800448e:	f7fe fb0b 	bl	8002aa8 <HAL_GetTick>
 8004492:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004494:	e008      	b.n	80044a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004496:	f7fe fb07 	bl	8002aa8 <HAL_GetTick>
 800449a:	4602      	mov	r2, r0
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	1ad3      	subs	r3, r2, r3
 80044a0:	2b02      	cmp	r3, #2
 80044a2:	d901      	bls.n	80044a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e05c      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044a8:	4b11      	ldr	r3, [pc, #68]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d0f0      	beq.n	8004496 <HAL_RCC_OscConfig+0x416>
 80044b4:	e054      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b6:	4b10      	ldr	r3, [pc, #64]	; (80044f8 <HAL_RCC_OscConfig+0x478>)
 80044b8:	2200      	movs	r2, #0
 80044ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044bc:	f7fe faf4 	bl	8002aa8 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c4:	f7fe faf0 	bl	8002aa8 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e045      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d6:	4b06      	ldr	r3, [pc, #24]	; (80044f0 <HAL_RCC_OscConfig+0x470>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1f0      	bne.n	80044c4 <HAL_RCC_OscConfig+0x444>
 80044e2:	e03d      	b.n	8004560 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	699b      	ldr	r3, [r3, #24]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d107      	bne.n	80044fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80044ec:	2301      	movs	r3, #1
 80044ee:	e038      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
 80044f0:	40023800 	.word	0x40023800
 80044f4:	40007000 	.word	0x40007000
 80044f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80044fc:	4b1b      	ldr	r3, [pc, #108]	; (800456c <HAL_RCC_OscConfig+0x4ec>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d028      	beq.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004514:	429a      	cmp	r2, r3
 8004516:	d121      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004522:	429a      	cmp	r2, r3
 8004524:	d11a      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800452c:	4013      	ands	r3, r2
 800452e:	687a      	ldr	r2, [r7, #4]
 8004530:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004532:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004534:	4293      	cmp	r3, r2
 8004536:	d111      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004542:	085b      	lsrs	r3, r3, #1
 8004544:	3b01      	subs	r3, #1
 8004546:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004548:	429a      	cmp	r2, r3
 800454a:	d107      	bne.n	800455c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004556:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e000      	b.n	8004562 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40023800 	.word	0x40023800

08004570 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e0cc      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d90c      	bls.n	80045ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b65      	ldr	r3, [pc, #404]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b63      	ldr	r3, [pc, #396]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e0b8      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d020      	beq.n	80045fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d005      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80045c4:	4b59      	ldr	r3, [pc, #356]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	4a58      	ldr	r2, [pc, #352]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80045ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0308 	and.w	r3, r3, #8
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80045dc:	4b53      	ldr	r3, [pc, #332]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	4a52      	ldr	r2, [pc, #328]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80045e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045e8:	4b50      	ldr	r3, [pc, #320]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	689b      	ldr	r3, [r3, #8]
 80045ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	494d      	ldr	r1, [pc, #308]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80045f6:	4313      	orrs	r3, r2
 80045f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d044      	beq.n	8004690 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d107      	bne.n	800461e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	4b47      	ldr	r3, [pc, #284]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d119      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800461a:	2301      	movs	r3, #1
 800461c:	e07f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d003      	beq.n	800462e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800462a:	2b03      	cmp	r3, #3
 800462c:	d107      	bne.n	800463e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800462e:	4b3f      	ldr	r3, [pc, #252]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d109      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800463e:	4b3b      	ldr	r3, [pc, #236]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e067      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800464e:	4b37      	ldr	r3, [pc, #220]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f023 0203 	bic.w	r2, r3, #3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	4934      	ldr	r1, [pc, #208]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 800465c:	4313      	orrs	r3, r2
 800465e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004660:	f7fe fa22 	bl	8002aa8 <HAL_GetTick>
 8004664:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004666:	e00a      	b.n	800467e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004668:	f7fe fa1e 	bl	8002aa8 <HAL_GetTick>
 800466c:	4602      	mov	r2, r0
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	1ad3      	subs	r3, r2, r3
 8004672:	f241 3288 	movw	r2, #5000	; 0x1388
 8004676:	4293      	cmp	r3, r2
 8004678:	d901      	bls.n	800467e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800467a:	2303      	movs	r3, #3
 800467c:	e04f      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800467e:	4b2b      	ldr	r3, [pc, #172]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f003 020c 	and.w	r2, r3, #12
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	009b      	lsls	r3, r3, #2
 800468c:	429a      	cmp	r2, r3
 800468e:	d1eb      	bne.n	8004668 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004690:	4b25      	ldr	r3, [pc, #148]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	683a      	ldr	r2, [r7, #0]
 800469a:	429a      	cmp	r2, r3
 800469c:	d20c      	bcs.n	80046b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800469e:	4b22      	ldr	r3, [pc, #136]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a0:	683a      	ldr	r2, [r7, #0]
 80046a2:	b2d2      	uxtb	r2, r2
 80046a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80046a6:	4b20      	ldr	r3, [pc, #128]	; (8004728 <HAL_RCC_ClockConfig+0x1b8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	683a      	ldr	r2, [r7, #0]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d001      	beq.n	80046b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80046b4:	2301      	movs	r3, #1
 80046b6:	e032      	b.n	800471e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0304 	and.w	r3, r3, #4
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d008      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80046c4:	4b19      	ldr	r3, [pc, #100]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	68db      	ldr	r3, [r3, #12]
 80046d0:	4916      	ldr	r1, [pc, #88]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0308 	and.w	r3, r3, #8
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d009      	beq.n	80046f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80046e2:	4b12      	ldr	r3, [pc, #72]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	691b      	ldr	r3, [r3, #16]
 80046ee:	00db      	lsls	r3, r3, #3
 80046f0:	490e      	ldr	r1, [pc, #56]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046f2:	4313      	orrs	r3, r2
 80046f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80046f6:	f000 f821 	bl	800473c <HAL_RCC_GetSysClockFreq>
 80046fa:	4602      	mov	r2, r0
 80046fc:	4b0b      	ldr	r3, [pc, #44]	; (800472c <HAL_RCC_ClockConfig+0x1bc>)
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	091b      	lsrs	r3, r3, #4
 8004702:	f003 030f 	and.w	r3, r3, #15
 8004706:	490a      	ldr	r1, [pc, #40]	; (8004730 <HAL_RCC_ClockConfig+0x1c0>)
 8004708:	5ccb      	ldrb	r3, [r1, r3]
 800470a:	fa22 f303 	lsr.w	r3, r2, r3
 800470e:	4a09      	ldr	r2, [pc, #36]	; (8004734 <HAL_RCC_ClockConfig+0x1c4>)
 8004710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <HAL_RCC_ClockConfig+0x1c8>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4618      	mov	r0, r3
 8004718:	f7fe f982 	bl	8002a20 <HAL_InitTick>

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3710      	adds	r7, #16
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}
 8004726:	bf00      	nop
 8004728:	40023c00 	.word	0x40023c00
 800472c:	40023800 	.word	0x40023800
 8004730:	08026890 	.word	0x08026890
 8004734:	20000008 	.word	0x20000008
 8004738:	2000000c 	.word	0x2000000c

0800473c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800473c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004740:	b094      	sub	sp, #80	; 0x50
 8004742:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	647b      	str	r3, [r7, #68]	; 0x44
 8004748:	2300      	movs	r3, #0
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	2300      	movs	r3, #0
 800474e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004750:	2300      	movs	r3, #0
 8004752:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004754:	4b79      	ldr	r3, [pc, #484]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
 800475c:	2b08      	cmp	r3, #8
 800475e:	d00d      	beq.n	800477c <HAL_RCC_GetSysClockFreq+0x40>
 8004760:	2b08      	cmp	r3, #8
 8004762:	f200 80e1 	bhi.w	8004928 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004766:	2b00      	cmp	r3, #0
 8004768:	d002      	beq.n	8004770 <HAL_RCC_GetSysClockFreq+0x34>
 800476a:	2b04      	cmp	r3, #4
 800476c:	d003      	beq.n	8004776 <HAL_RCC_GetSysClockFreq+0x3a>
 800476e:	e0db      	b.n	8004928 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004770:	4b73      	ldr	r3, [pc, #460]	; (8004940 <HAL_RCC_GetSysClockFreq+0x204>)
 8004772:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004774:	e0db      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004776:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_GetSysClockFreq+0x208>)
 8004778:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800477a:	e0d8      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800477c:	4b6f      	ldr	r3, [pc, #444]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004784:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004786:	4b6d      	ldr	r3, [pc, #436]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	2b00      	cmp	r3, #0
 8004790:	d063      	beq.n	800485a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004792:	4b6a      	ldr	r3, [pc, #424]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 8004794:	685b      	ldr	r3, [r3, #4]
 8004796:	099b      	lsrs	r3, r3, #6
 8004798:	2200      	movs	r2, #0
 800479a:	63bb      	str	r3, [r7, #56]	; 0x38
 800479c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047a4:	633b      	str	r3, [r7, #48]	; 0x30
 80047a6:	2300      	movs	r3, #0
 80047a8:	637b      	str	r3, [r7, #52]	; 0x34
 80047aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80047ae:	4622      	mov	r2, r4
 80047b0:	462b      	mov	r3, r5
 80047b2:	f04f 0000 	mov.w	r0, #0
 80047b6:	f04f 0100 	mov.w	r1, #0
 80047ba:	0159      	lsls	r1, r3, #5
 80047bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047c0:	0150      	lsls	r0, r2, #5
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4621      	mov	r1, r4
 80047c8:	1a51      	subs	r1, r2, r1
 80047ca:	6139      	str	r1, [r7, #16]
 80047cc:	4629      	mov	r1, r5
 80047ce:	eb63 0301 	sbc.w	r3, r3, r1
 80047d2:	617b      	str	r3, [r7, #20]
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80047e0:	4659      	mov	r1, fp
 80047e2:	018b      	lsls	r3, r1, #6
 80047e4:	4651      	mov	r1, sl
 80047e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80047ea:	4651      	mov	r1, sl
 80047ec:	018a      	lsls	r2, r1, #6
 80047ee:	4651      	mov	r1, sl
 80047f0:	ebb2 0801 	subs.w	r8, r2, r1
 80047f4:	4659      	mov	r1, fp
 80047f6:	eb63 0901 	sbc.w	r9, r3, r1
 80047fa:	f04f 0200 	mov.w	r2, #0
 80047fe:	f04f 0300 	mov.w	r3, #0
 8004802:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004806:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800480e:	4690      	mov	r8, r2
 8004810:	4699      	mov	r9, r3
 8004812:	4623      	mov	r3, r4
 8004814:	eb18 0303 	adds.w	r3, r8, r3
 8004818:	60bb      	str	r3, [r7, #8]
 800481a:	462b      	mov	r3, r5
 800481c:	eb49 0303 	adc.w	r3, r9, r3
 8004820:	60fb      	str	r3, [r7, #12]
 8004822:	f04f 0200 	mov.w	r2, #0
 8004826:	f04f 0300 	mov.w	r3, #0
 800482a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800482e:	4629      	mov	r1, r5
 8004830:	024b      	lsls	r3, r1, #9
 8004832:	4621      	mov	r1, r4
 8004834:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004838:	4621      	mov	r1, r4
 800483a:	024a      	lsls	r2, r1, #9
 800483c:	4610      	mov	r0, r2
 800483e:	4619      	mov	r1, r3
 8004840:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004842:	2200      	movs	r2, #0
 8004844:	62bb      	str	r3, [r7, #40]	; 0x28
 8004846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004848:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800484c:	f7fc f9a6 	bl	8000b9c <__aeabi_uldivmod>
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	4613      	mov	r3, r2
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	e058      	b.n	800490c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800485a:	4b38      	ldr	r3, [pc, #224]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	099b      	lsrs	r3, r3, #6
 8004860:	2200      	movs	r2, #0
 8004862:	4618      	mov	r0, r3
 8004864:	4611      	mov	r1, r2
 8004866:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800486a:	623b      	str	r3, [r7, #32]
 800486c:	2300      	movs	r3, #0
 800486e:	627b      	str	r3, [r7, #36]	; 0x24
 8004870:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004874:	4642      	mov	r2, r8
 8004876:	464b      	mov	r3, r9
 8004878:	f04f 0000 	mov.w	r0, #0
 800487c:	f04f 0100 	mov.w	r1, #0
 8004880:	0159      	lsls	r1, r3, #5
 8004882:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004886:	0150      	lsls	r0, r2, #5
 8004888:	4602      	mov	r2, r0
 800488a:	460b      	mov	r3, r1
 800488c:	4641      	mov	r1, r8
 800488e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004892:	4649      	mov	r1, r9
 8004894:	eb63 0b01 	sbc.w	fp, r3, r1
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80048a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80048a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80048ac:	ebb2 040a 	subs.w	r4, r2, sl
 80048b0:	eb63 050b 	sbc.w	r5, r3, fp
 80048b4:	f04f 0200 	mov.w	r2, #0
 80048b8:	f04f 0300 	mov.w	r3, #0
 80048bc:	00eb      	lsls	r3, r5, #3
 80048be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048c2:	00e2      	lsls	r2, r4, #3
 80048c4:	4614      	mov	r4, r2
 80048c6:	461d      	mov	r5, r3
 80048c8:	4643      	mov	r3, r8
 80048ca:	18e3      	adds	r3, r4, r3
 80048cc:	603b      	str	r3, [r7, #0]
 80048ce:	464b      	mov	r3, r9
 80048d0:	eb45 0303 	adc.w	r3, r5, r3
 80048d4:	607b      	str	r3, [r7, #4]
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048e2:	4629      	mov	r1, r5
 80048e4:	028b      	lsls	r3, r1, #10
 80048e6:	4621      	mov	r1, r4
 80048e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80048ec:	4621      	mov	r1, r4
 80048ee:	028a      	lsls	r2, r1, #10
 80048f0:	4610      	mov	r0, r2
 80048f2:	4619      	mov	r1, r3
 80048f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048f6:	2200      	movs	r2, #0
 80048f8:	61bb      	str	r3, [r7, #24]
 80048fa:	61fa      	str	r2, [r7, #28]
 80048fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004900:	f7fc f94c 	bl	8000b9c <__aeabi_uldivmod>
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4613      	mov	r3, r2
 800490a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <HAL_RCC_GetSysClockFreq+0x200>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	0c1b      	lsrs	r3, r3, #16
 8004912:	f003 0303 	and.w	r3, r3, #3
 8004916:	3301      	adds	r3, #1
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800491c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800491e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004920:	fbb2 f3f3 	udiv	r3, r2, r3
 8004924:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004926:	e002      	b.n	800492e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <HAL_RCC_GetSysClockFreq+0x204>)
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800492c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800492e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004930:	4618      	mov	r0, r3
 8004932:	3750      	adds	r7, #80	; 0x50
 8004934:	46bd      	mov	sp, r7
 8004936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800493a:	bf00      	nop
 800493c:	40023800 	.word	0x40023800
 8004940:	00f42400 	.word	0x00f42400
 8004944:	007a1200 	.word	0x007a1200

08004948 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004948:	b480      	push	{r7}
 800494a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800494c:	4b03      	ldr	r3, [pc, #12]	; (800495c <HAL_RCC_GetHCLKFreq+0x14>)
 800494e:	681b      	ldr	r3, [r3, #0]
}
 8004950:	4618      	mov	r0, r3
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr
 800495a:	bf00      	nop
 800495c:	20000008 	.word	0x20000008

08004960 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004964:	f7ff fff0 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004968:	4602      	mov	r2, r0
 800496a:	4b05      	ldr	r3, [pc, #20]	; (8004980 <HAL_RCC_GetPCLK1Freq+0x20>)
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	0a9b      	lsrs	r3, r3, #10
 8004970:	f003 0307 	and.w	r3, r3, #7
 8004974:	4903      	ldr	r1, [pc, #12]	; (8004984 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004976:	5ccb      	ldrb	r3, [r1, r3]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
}
 800497c:	4618      	mov	r0, r3
 800497e:	bd80      	pop	{r7, pc}
 8004980:	40023800 	.word	0x40023800
 8004984:	080268a0 	.word	0x080268a0

08004988 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800498c:	f7ff ffdc 	bl	8004948 <HAL_RCC_GetHCLKFreq>
 8004990:	4602      	mov	r2, r0
 8004992:	4b05      	ldr	r3, [pc, #20]	; (80049a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	0b5b      	lsrs	r3, r3, #13
 8004998:	f003 0307 	and.w	r3, r3, #7
 800499c:	4903      	ldr	r1, [pc, #12]	; (80049ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800499e:	5ccb      	ldrb	r3, [r1, r3]
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40023800 	.word	0x40023800
 80049ac:	080268a0 	.word	0x080268a0

080049b0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d101      	bne.n	80049c4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e025      	b.n	8004a10 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049ca:	b2db      	uxtb	r3, r3
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d106      	bne.n	80049de <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fd fcdb 	bl	8002394 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2202      	movs	r2, #2
 80049e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681a      	ldr	r2, [r3, #0]
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	3304      	adds	r3, #4
 80049ee:	4619      	mov	r1, r3
 80049f0:	4610      	mov	r0, r2
 80049f2:	f000 febf 	bl	8005774 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6818      	ldr	r0, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	461a      	mov	r2, r3
 8004a00:	6839      	ldr	r1, [r7, #0]
 8004a02:	f000 ff14 	bl	800582e <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8004a0e:	2300      	movs	r3, #0
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3708      	adds	r7, #8
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b086      	sub	sp, #24
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a2a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8004a2c:	7dfb      	ldrb	r3, [r7, #23]
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d101      	bne.n	8004a36 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8004a32:	2302      	movs	r3, #2
 8004a34:	e021      	b.n	8004a7a <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8004a36:	7dfb      	ldrb	r3, [r7, #23]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d002      	beq.n	8004a42 <HAL_SDRAM_SendCommand+0x2a>
 8004a3c:	7dfb      	ldrb	r3, [r7, #23]
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	d118      	bne.n	8004a74 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	2202      	movs	r2, #2
 8004a46:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 ff54 	bl	8005900 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d104      	bne.n	8004a6a <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2205      	movs	r2, #5
 8004a64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004a68:	e006      	b.n	8004a78 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8004a72:	e001      	b.n	8004a78 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <HAL_SDRAM_SetAutoRefreshNumber>:
  *                the configuration information for SDRAM module.
  * @param  AutoRefreshNumber The SDRAM auto Refresh number
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshNumber)
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b082      	sub	sp, #8
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004a92:	b2db      	uxtb	r3, r3
 8004a94:	2b02      	cmp	r3, #2
 8004a96:	d101      	bne.n	8004a9c <HAL_SDRAM_SetAutoRefreshNumber+0x1a>
  {
    return HAL_BUSY;
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e016      	b.n	8004aca <HAL_SDRAM_SetAutoRefreshNumber+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10f      	bne.n	8004ac8 <HAL_SDRAM_SetAutoRefreshNumber+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2202      	movs	r2, #2
 8004aac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Set the Auto-Refresh number */
    (void)FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance, AutoRefreshNumber);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	6839      	ldr	r1, [r7, #0]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f000 ff5f 	bl	800597a <FMC_SDRAM_SetAutoRefreshNumber>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	e000      	b.n	8004aca <HAL_SDRAM_SetAutoRefreshNumber+0x48>
    return HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3708      	adds	r7, #8
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
 8004ad8:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d101      	bne.n	8004ae4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	e07b      	b.n	8004bdc <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d108      	bne.n	8004afe <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004af4:	d009      	beq.n	8004b0a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	61da      	str	r2, [r3, #28]
 8004afc:	e005      	b.n	8004b0a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b16:	b2db      	uxtb	r3, r3
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d106      	bne.n	8004b2a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd fb13 	bl	8002150 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2202      	movs	r2, #2
 8004b2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b40:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5c:	431a      	orrs	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	691b      	ldr	r3, [r3, #16]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	f003 0301 	and.w	r3, r3, #1
 8004b70:	431a      	orrs	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b7a:	431a      	orrs	r2, r3
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69db      	ldr	r3, [r3, #28]
 8004b80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b84:	431a      	orrs	r2, r3
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b8e:	ea42 0103 	orr.w	r1, r2, r3
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b96:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	0c1b      	lsrs	r3, r3, #16
 8004ba8:	f003 0104 	and.w	r1, r3, #4
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb0:	f003 0210 	and.w	r2, r3, #16
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	430a      	orrs	r2, r1
 8004bba:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	69da      	ldr	r2, [r3, #28]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bca:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2201      	movs	r2, #1
 8004bd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3708      	adds	r7, #8
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b088      	sub	sp, #32
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	60b9      	str	r1, [r7, #8]
 8004bee:	603b      	str	r3, [r7, #0]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_SPI_Transmit+0x22>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e126      	b.n	8004e54 <HAL_SPI_Transmit+0x270>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c0e:	f7fd ff4b 	bl	8002aa8 <HAL_GetTick>
 8004c12:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c14:	88fb      	ldrh	r3, [r7, #6]
 8004c16:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c1e:	b2db      	uxtb	r3, r3
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d002      	beq.n	8004c2a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c24:	2302      	movs	r3, #2
 8004c26:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c28:	e10b      	b.n	8004e42 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d002      	beq.n	8004c36 <HAL_SPI_Transmit+0x52>
 8004c30:	88fb      	ldrh	r3, [r7, #6]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d102      	bne.n	8004c3c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c3a:	e102      	b.n	8004e42 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2203      	movs	r2, #3
 8004c40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	68ba      	ldr	r2, [r7, #8]
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	88fa      	ldrh	r2, [r7, #6]
 8004c54:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	88fa      	ldrh	r2, [r7, #6]
 8004c5a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2200      	movs	r2, #0
 8004c60:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2200      	movs	r2, #0
 8004c66:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2200      	movs	r2, #0
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c82:	d10f      	bne.n	8004ca4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c92:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cae:	2b40      	cmp	r3, #64	; 0x40
 8004cb0:	d007      	beq.n	8004cc2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cc0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cca:	d14b      	bne.n	8004d64 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Transmit+0xf6>
 8004cd4:	8afb      	ldrh	r3, [r7, #22]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d13e      	bne.n	8004d58 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cde:	881a      	ldrh	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cea:	1c9a      	adds	r2, r3, #2
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004cfe:	e02b      	b.n	8004d58 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f003 0302 	and.w	r3, r3, #2
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d112      	bne.n	8004d34 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d12:	881a      	ldrh	r2, [r3, #0]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	1c9a      	adds	r2, r3, #2
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d28:	b29b      	uxth	r3, r3
 8004d2a:	3b01      	subs	r3, #1
 8004d2c:	b29a      	uxth	r2, r3
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d32:	e011      	b.n	8004d58 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d34:	f7fd feb8 	bl	8002aa8 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d803      	bhi.n	8004d4c <HAL_SPI_Transmit+0x168>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d4a:	d102      	bne.n	8004d52 <HAL_SPI_Transmit+0x16e>
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d102      	bne.n	8004d58 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d56:	e074      	b.n	8004e42 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ce      	bne.n	8004d00 <HAL_SPI_Transmit+0x11c>
 8004d62:	e04c      	b.n	8004dfe <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d002      	beq.n	8004d72 <HAL_SPI_Transmit+0x18e>
 8004d6c:	8afb      	ldrh	r3, [r7, #22]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d140      	bne.n	8004df4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	330c      	adds	r3, #12
 8004d7c:	7812      	ldrb	r2, [r2, #0]
 8004d7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d8e:	b29b      	uxth	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	b29a      	uxth	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004d98:	e02c      	b.n	8004df4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d113      	bne.n	8004dd0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	7812      	ldrb	r2, [r2, #0]
 8004db4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	1c5a      	adds	r2, r3, #1
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	3b01      	subs	r3, #1
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	86da      	strh	r2, [r3, #54]	; 0x36
 8004dce:	e011      	b.n	8004df4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004dd0:	f7fd fe6a 	bl	8002aa8 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	683a      	ldr	r2, [r7, #0]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d803      	bhi.n	8004de8 <HAL_SPI_Transmit+0x204>
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004de6:	d102      	bne.n	8004dee <HAL_SPI_Transmit+0x20a>
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d102      	bne.n	8004df4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004df2:	e026      	b.n	8004e42 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004df8:	b29b      	uxth	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d1cd      	bne.n	8004d9a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004dfe:	69ba      	ldr	r2, [r7, #24]
 8004e00:	6839      	ldr	r1, [r7, #0]
 8004e02:	68f8      	ldr	r0, [r7, #12]
 8004e04:	f000 f8b2 	bl	8004f6c <SPI_EndRxTxTransaction>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	2220      	movs	r2, #32
 8004e12:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d10a      	bne.n	8004e32 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	68db      	ldr	r3, [r3, #12]
 8004e26:	613b      	str	r3, [r7, #16]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	613b      	str	r3, [r7, #16]
 8004e30:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d002      	beq.n	8004e40 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	77fb      	strb	r3, [r7, #31]
 8004e3e:	e000      	b.n	8004e42 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004e40:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2201      	movs	r2, #1
 8004e46:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3720      	adds	r7, #32
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}

08004e5c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b088      	sub	sp, #32
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	60f8      	str	r0, [r7, #12]
 8004e64:	60b9      	str	r1, [r7, #8]
 8004e66:	603b      	str	r3, [r7, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004e6c:	f7fd fe1c 	bl	8002aa8 <HAL_GetTick>
 8004e70:	4602      	mov	r2, r0
 8004e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e74:	1a9b      	subs	r3, r3, r2
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	4413      	add	r3, r2
 8004e7a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004e7c:	f7fd fe14 	bl	8002aa8 <HAL_GetTick>
 8004e80:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004e82:	4b39      	ldr	r3, [pc, #228]	; (8004f68 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	015b      	lsls	r3, r3, #5
 8004e88:	0d1b      	lsrs	r3, r3, #20
 8004e8a:	69fa      	ldr	r2, [r7, #28]
 8004e8c:	fb02 f303 	mul.w	r3, r2, r3
 8004e90:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e92:	e054      	b.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d050      	beq.n	8004f3e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004e9c:	f7fd fe04 	bl	8002aa8 <HAL_GetTick>
 8004ea0:	4602      	mov	r2, r0
 8004ea2:	69bb      	ldr	r3, [r7, #24]
 8004ea4:	1ad3      	subs	r3, r2, r3
 8004ea6:	69fa      	ldr	r2, [r7, #28]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d902      	bls.n	8004eb2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d13d      	bne.n	8004f2e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	685a      	ldr	r2, [r3, #4]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ec0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eca:	d111      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ed4:	d004      	beq.n	8004ee0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	689b      	ldr	r3, [r3, #8]
 8004eda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ede:	d107      	bne.n	8004ef0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eee:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ef8:	d10f      	bne.n	8004f1a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f08:	601a      	str	r2, [r3, #0]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f18:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2200      	movs	r2, #0
 8004f26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e017      	b.n	8004f5e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d101      	bne.n	8004f38 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	4013      	ands	r3, r2
 8004f48:	68ba      	ldr	r2, [r7, #8]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	bf0c      	ite	eq
 8004f4e:	2301      	moveq	r3, #1
 8004f50:	2300      	movne	r3, #0
 8004f52:	b2db      	uxtb	r3, r3
 8004f54:	461a      	mov	r2, r3
 8004f56:	79fb      	ldrb	r3, [r7, #7]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d19b      	bne.n	8004e94 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3720      	adds	r7, #32
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	20000008 	.word	0x20000008

08004f6c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b088      	sub	sp, #32
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004f78:	4b1b      	ldr	r3, [pc, #108]	; (8004fe8 <SPI_EndRxTxTransaction+0x7c>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1b      	ldr	r2, [pc, #108]	; (8004fec <SPI_EndRxTxTransaction+0x80>)
 8004f7e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f82:	0d5b      	lsrs	r3, r3, #21
 8004f84:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004f88:	fb02 f303 	mul.w	r3, r2, r3
 8004f8c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f96:	d112      	bne.n	8004fbe <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	9300      	str	r3, [sp, #0]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	2180      	movs	r1, #128	; 0x80
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f7ff ff5a 	bl	8004e5c <SPI_WaitFlagStateUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d016      	beq.n	8004fdc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb2:	f043 0220 	orr.w	r2, r3, #32
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004fba:	2303      	movs	r3, #3
 8004fbc:	e00f      	b.n	8004fde <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00a      	beq.n	8004fda <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fd4:	2b80      	cmp	r3, #128	; 0x80
 8004fd6:	d0f2      	beq.n	8004fbe <SPI_EndRxTxTransaction+0x52>
 8004fd8:	e000      	b.n	8004fdc <SPI_EndRxTxTransaction+0x70>
        break;
 8004fda:	bf00      	nop
  }

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3718      	adds	r7, #24
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000008 	.word	0x20000008
 8004fec:	165e9f81 	.word	0x165e9f81

08004ff0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b082      	sub	sp, #8
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d101      	bne.n	8005002 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ffe:	2301      	movs	r3, #1
 8005000:	e03f      	b.n	8005082 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005008:	b2db      	uxtb	r3, r3
 800500a:	2b00      	cmp	r3, #0
 800500c:	d106      	bne.n	800501c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f7fd f8e2 	bl	80021e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2224      	movs	r2, #36	; 0x24
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005032:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f929 	bl	800528c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005048:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695a      	ldr	r2, [r3, #20]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005058:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	68da      	ldr	r2, [r3, #12]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005068:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2220      	movs	r2, #32
 8005074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2220      	movs	r2, #32
 800507c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005080:	2300      	movs	r3, #0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}

0800508a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800508a:	b580      	push	{r7, lr}
 800508c:	b08a      	sub	sp, #40	; 0x28
 800508e:	af02      	add	r7, sp, #8
 8005090:	60f8      	str	r0, [r7, #12]
 8005092:	60b9      	str	r1, [r7, #8]
 8005094:	603b      	str	r3, [r7, #0]
 8005096:	4613      	mov	r3, r2
 8005098:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800509a:	2300      	movs	r3, #0
 800509c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	2b20      	cmp	r3, #32
 80050a8:	d17c      	bne.n	80051a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <HAL_UART_Transmit+0x2c>
 80050b0:	88fb      	ldrh	r3, [r7, #6]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e075      	b.n	80051a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d101      	bne.n	80050c8 <HAL_UART_Transmit+0x3e>
 80050c4:	2302      	movs	r3, #2
 80050c6:	e06e      	b.n	80051a6 <HAL_UART_Transmit+0x11c>
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2221      	movs	r2, #33	; 0x21
 80050da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80050de:	f7fd fce3 	bl	8002aa8 <HAL_GetTick>
 80050e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	88fa      	ldrh	r2, [r7, #6]
 80050e8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	88fa      	ldrh	r2, [r7, #6]
 80050ee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f8:	d108      	bne.n	800510c <HAL_UART_Transmit+0x82>
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d104      	bne.n	800510c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005102:	2300      	movs	r3, #0
 8005104:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005106:	68bb      	ldr	r3, [r7, #8]
 8005108:	61bb      	str	r3, [r7, #24]
 800510a:	e003      	b.n	8005114 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005110:	2300      	movs	r3, #0
 8005112:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800511c:	e02a      	b.n	8005174 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	9300      	str	r3, [sp, #0]
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2200      	movs	r2, #0
 8005126:	2180      	movs	r1, #128	; 0x80
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f000 f840 	bl	80051ae <UART_WaitOnFlagUntilTimeout>
 800512e:	4603      	mov	r3, r0
 8005130:	2b00      	cmp	r3, #0
 8005132:	d001      	beq.n	8005138 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e036      	b.n	80051a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d10b      	bne.n	8005156 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	881b      	ldrh	r3, [r3, #0]
 8005142:	461a      	mov	r2, r3
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800514c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	3302      	adds	r3, #2
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	e007      	b.n	8005166 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	781a      	ldrb	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005160:	69fb      	ldr	r3, [r7, #28]
 8005162:	3301      	adds	r3, #1
 8005164:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800516a:	b29b      	uxth	r3, r3
 800516c:	3b01      	subs	r3, #1
 800516e:	b29a      	uxth	r2, r3
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005178:	b29b      	uxth	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1cf      	bne.n	800511e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	2200      	movs	r2, #0
 8005186:	2140      	movs	r1, #64	; 0x40
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f000 f810 	bl	80051ae <UART_WaitOnFlagUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d001      	beq.n	8005198 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e006      	b.n	80051a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80051a0:	2300      	movs	r3, #0
 80051a2:	e000      	b.n	80051a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80051a4:	2302      	movs	r3, #2
  }
}
 80051a6:	4618      	mov	r0, r3
 80051a8:	3720      	adds	r7, #32
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b090      	sub	sp, #64	; 0x40
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	60f8      	str	r0, [r7, #12]
 80051b6:	60b9      	str	r1, [r7, #8]
 80051b8:	603b      	str	r3, [r7, #0]
 80051ba:	4613      	mov	r3, r2
 80051bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051be:	e050      	b.n	8005262 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051c6:	d04c      	beq.n	8005262 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80051c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d007      	beq.n	80051de <UART_WaitOnFlagUntilTimeout+0x30>
 80051ce:	f7fd fc6b 	bl	8002aa8 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051da:	429a      	cmp	r2, r3
 80051dc:	d241      	bcs.n	8005262 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	330c      	adds	r3, #12
 80051e4:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	e853 3f00 	ldrex	r3, [r3]
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051f4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	330c      	adds	r3, #12
 80051fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051fe:	637a      	str	r2, [r7, #52]	; 0x34
 8005200:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005202:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005204:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005206:	e841 2300 	strex	r3, r2, [r1]
 800520a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800520c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800520e:	2b00      	cmp	r3, #0
 8005210:	d1e5      	bne.n	80051de <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	3314      	adds	r3, #20
 8005218:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	e853 3f00 	ldrex	r3, [r3]
 8005220:	613b      	str	r3, [r7, #16]
   return(result);
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	63bb      	str	r3, [r7, #56]	; 0x38
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3314      	adds	r3, #20
 8005230:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005232:	623a      	str	r2, [r7, #32]
 8005234:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005236:	69f9      	ldr	r1, [r7, #28]
 8005238:	6a3a      	ldr	r2, [r7, #32]
 800523a:	e841 2300 	strex	r3, r2, [r1]
 800523e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005240:	69bb      	ldr	r3, [r7, #24]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1e5      	bne.n	8005212 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	2220      	movs	r2, #32
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e00f      	b.n	8005282 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	4013      	ands	r3, r2
 800526c:	68ba      	ldr	r2, [r7, #8]
 800526e:	429a      	cmp	r2, r3
 8005270:	bf0c      	ite	eq
 8005272:	2301      	moveq	r3, #1
 8005274:	2300      	movne	r3, #0
 8005276:	b2db      	uxtb	r3, r3
 8005278:	461a      	mov	r2, r3
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	429a      	cmp	r2, r3
 800527e:	d09f      	beq.n	80051c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3740      	adds	r7, #64	; 0x40
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
	...

0800528c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800528c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005290:	b0c0      	sub	sp, #256	; 0x100
 8005292:	af00      	add	r7, sp, #0
 8005294:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	691b      	ldr	r3, [r3, #16]
 80052a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a8:	68d9      	ldr	r1, [r3, #12]
 80052aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ae:	681a      	ldr	r2, [r3, #0]
 80052b0:	ea40 0301 	orr.w	r3, r0, r1
 80052b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ba:	689a      	ldr	r2, [r3, #8]
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	431a      	orrs	r2, r3
 80052cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d0:	69db      	ldr	r3, [r3, #28]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	68db      	ldr	r3, [r3, #12]
 80052e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052e4:	f021 010c 	bic.w	r1, r1, #12
 80052e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052f2:	430b      	orrs	r3, r1
 80052f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005302:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005306:	6999      	ldr	r1, [r3, #24]
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800530c:	681a      	ldr	r2, [r3, #0]
 800530e:	ea40 0301 	orr.w	r3, r0, r1
 8005312:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	681a      	ldr	r2, [r3, #0]
 800531a:	4b8f      	ldr	r3, [pc, #572]	; (8005558 <UART_SetConfig+0x2cc>)
 800531c:	429a      	cmp	r2, r3
 800531e:	d005      	beq.n	800532c <UART_SetConfig+0xa0>
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	681a      	ldr	r2, [r3, #0]
 8005326:	4b8d      	ldr	r3, [pc, #564]	; (800555c <UART_SetConfig+0x2d0>)
 8005328:	429a      	cmp	r2, r3
 800532a:	d104      	bne.n	8005336 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800532c:	f7ff fb2c 	bl	8004988 <HAL_RCC_GetPCLK2Freq>
 8005330:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005334:	e003      	b.n	800533e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005336:	f7ff fb13 	bl	8004960 <HAL_RCC_GetPCLK1Freq>
 800533a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	69db      	ldr	r3, [r3, #28]
 8005344:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005348:	f040 810c 	bne.w	8005564 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800534c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005350:	2200      	movs	r2, #0
 8005352:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005356:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800535a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800535e:	4622      	mov	r2, r4
 8005360:	462b      	mov	r3, r5
 8005362:	1891      	adds	r1, r2, r2
 8005364:	65b9      	str	r1, [r7, #88]	; 0x58
 8005366:	415b      	adcs	r3, r3
 8005368:	65fb      	str	r3, [r7, #92]	; 0x5c
 800536a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800536e:	4621      	mov	r1, r4
 8005370:	eb12 0801 	adds.w	r8, r2, r1
 8005374:	4629      	mov	r1, r5
 8005376:	eb43 0901 	adc.w	r9, r3, r1
 800537a:	f04f 0200 	mov.w	r2, #0
 800537e:	f04f 0300 	mov.w	r3, #0
 8005382:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005386:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800538a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800538e:	4690      	mov	r8, r2
 8005390:	4699      	mov	r9, r3
 8005392:	4623      	mov	r3, r4
 8005394:	eb18 0303 	adds.w	r3, r8, r3
 8005398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800539c:	462b      	mov	r3, r5
 800539e:	eb49 0303 	adc.w	r3, r9, r3
 80053a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053ba:	460b      	mov	r3, r1
 80053bc:	18db      	adds	r3, r3, r3
 80053be:	653b      	str	r3, [r7, #80]	; 0x50
 80053c0:	4613      	mov	r3, r2
 80053c2:	eb42 0303 	adc.w	r3, r2, r3
 80053c6:	657b      	str	r3, [r7, #84]	; 0x54
 80053c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053d0:	f7fb fbe4 	bl	8000b9c <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4b61      	ldr	r3, [pc, #388]	; (8005560 <UART_SetConfig+0x2d4>)
 80053da:	fba3 2302 	umull	r2, r3, r3, r2
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	011c      	lsls	r4, r3, #4
 80053e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053f4:	4642      	mov	r2, r8
 80053f6:	464b      	mov	r3, r9
 80053f8:	1891      	adds	r1, r2, r2
 80053fa:	64b9      	str	r1, [r7, #72]	; 0x48
 80053fc:	415b      	adcs	r3, r3
 80053fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005400:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005404:	4641      	mov	r1, r8
 8005406:	eb12 0a01 	adds.w	sl, r2, r1
 800540a:	4649      	mov	r1, r9
 800540c:	eb43 0b01 	adc.w	fp, r3, r1
 8005410:	f04f 0200 	mov.w	r2, #0
 8005414:	f04f 0300 	mov.w	r3, #0
 8005418:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800541c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005420:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005424:	4692      	mov	sl, r2
 8005426:	469b      	mov	fp, r3
 8005428:	4643      	mov	r3, r8
 800542a:	eb1a 0303 	adds.w	r3, sl, r3
 800542e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005432:	464b      	mov	r3, r9
 8005434:	eb4b 0303 	adc.w	r3, fp, r3
 8005438:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	2200      	movs	r2, #0
 8005444:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005448:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800544c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005450:	460b      	mov	r3, r1
 8005452:	18db      	adds	r3, r3, r3
 8005454:	643b      	str	r3, [r7, #64]	; 0x40
 8005456:	4613      	mov	r3, r2
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	647b      	str	r3, [r7, #68]	; 0x44
 800545e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005462:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005466:	f7fb fb99 	bl	8000b9c <__aeabi_uldivmod>
 800546a:	4602      	mov	r2, r0
 800546c:	460b      	mov	r3, r1
 800546e:	4611      	mov	r1, r2
 8005470:	4b3b      	ldr	r3, [pc, #236]	; (8005560 <UART_SetConfig+0x2d4>)
 8005472:	fba3 2301 	umull	r2, r3, r3, r1
 8005476:	095b      	lsrs	r3, r3, #5
 8005478:	2264      	movs	r2, #100	; 0x64
 800547a:	fb02 f303 	mul.w	r3, r2, r3
 800547e:	1acb      	subs	r3, r1, r3
 8005480:	00db      	lsls	r3, r3, #3
 8005482:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005486:	4b36      	ldr	r3, [pc, #216]	; (8005560 <UART_SetConfig+0x2d4>)
 8005488:	fba3 2302 	umull	r2, r3, r3, r2
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005494:	441c      	add	r4, r3
 8005496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054a8:	4642      	mov	r2, r8
 80054aa:	464b      	mov	r3, r9
 80054ac:	1891      	adds	r1, r2, r2
 80054ae:	63b9      	str	r1, [r7, #56]	; 0x38
 80054b0:	415b      	adcs	r3, r3
 80054b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054b8:	4641      	mov	r1, r8
 80054ba:	1851      	adds	r1, r2, r1
 80054bc:	6339      	str	r1, [r7, #48]	; 0x30
 80054be:	4649      	mov	r1, r9
 80054c0:	414b      	adcs	r3, r1
 80054c2:	637b      	str	r3, [r7, #52]	; 0x34
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054d0:	4659      	mov	r1, fp
 80054d2:	00cb      	lsls	r3, r1, #3
 80054d4:	4651      	mov	r1, sl
 80054d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054da:	4651      	mov	r1, sl
 80054dc:	00ca      	lsls	r2, r1, #3
 80054de:	4610      	mov	r0, r2
 80054e0:	4619      	mov	r1, r3
 80054e2:	4603      	mov	r3, r0
 80054e4:	4642      	mov	r2, r8
 80054e6:	189b      	adds	r3, r3, r2
 80054e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054ec:	464b      	mov	r3, r9
 80054ee:	460a      	mov	r2, r1
 80054f0:	eb42 0303 	adc.w	r3, r2, r3
 80054f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005504:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005508:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800550c:	460b      	mov	r3, r1
 800550e:	18db      	adds	r3, r3, r3
 8005510:	62bb      	str	r3, [r7, #40]	; 0x28
 8005512:	4613      	mov	r3, r2
 8005514:	eb42 0303 	adc.w	r3, r2, r3
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
 800551a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800551e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005522:	f7fb fb3b 	bl	8000b9c <__aeabi_uldivmod>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4b0d      	ldr	r3, [pc, #52]	; (8005560 <UART_SetConfig+0x2d4>)
 800552c:	fba3 1302 	umull	r1, r3, r3, r2
 8005530:	095b      	lsrs	r3, r3, #5
 8005532:	2164      	movs	r1, #100	; 0x64
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	1ad3      	subs	r3, r2, r3
 800553a:	00db      	lsls	r3, r3, #3
 800553c:	3332      	adds	r3, #50	; 0x32
 800553e:	4a08      	ldr	r2, [pc, #32]	; (8005560 <UART_SetConfig+0x2d4>)
 8005540:	fba2 2303 	umull	r2, r3, r2, r3
 8005544:	095b      	lsrs	r3, r3, #5
 8005546:	f003 0207 	and.w	r2, r3, #7
 800554a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	4422      	add	r2, r4
 8005552:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005554:	e105      	b.n	8005762 <UART_SetConfig+0x4d6>
 8005556:	bf00      	nop
 8005558:	40011000 	.word	0x40011000
 800555c:	40011400 	.word	0x40011400
 8005560:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005568:	2200      	movs	r2, #0
 800556a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800556e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005572:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005576:	4642      	mov	r2, r8
 8005578:	464b      	mov	r3, r9
 800557a:	1891      	adds	r1, r2, r2
 800557c:	6239      	str	r1, [r7, #32]
 800557e:	415b      	adcs	r3, r3
 8005580:	627b      	str	r3, [r7, #36]	; 0x24
 8005582:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005586:	4641      	mov	r1, r8
 8005588:	1854      	adds	r4, r2, r1
 800558a:	4649      	mov	r1, r9
 800558c:	eb43 0501 	adc.w	r5, r3, r1
 8005590:	f04f 0200 	mov.w	r2, #0
 8005594:	f04f 0300 	mov.w	r3, #0
 8005598:	00eb      	lsls	r3, r5, #3
 800559a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800559e:	00e2      	lsls	r2, r4, #3
 80055a0:	4614      	mov	r4, r2
 80055a2:	461d      	mov	r5, r3
 80055a4:	4643      	mov	r3, r8
 80055a6:	18e3      	adds	r3, r4, r3
 80055a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055ac:	464b      	mov	r3, r9
 80055ae:	eb45 0303 	adc.w	r3, r5, r3
 80055b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055c6:	f04f 0200 	mov.w	r2, #0
 80055ca:	f04f 0300 	mov.w	r3, #0
 80055ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055d2:	4629      	mov	r1, r5
 80055d4:	008b      	lsls	r3, r1, #2
 80055d6:	4621      	mov	r1, r4
 80055d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055dc:	4621      	mov	r1, r4
 80055de:	008a      	lsls	r2, r1, #2
 80055e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055e4:	f7fb fada 	bl	8000b9c <__aeabi_uldivmod>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4b60      	ldr	r3, [pc, #384]	; (8005770 <UART_SetConfig+0x4e4>)
 80055ee:	fba3 2302 	umull	r2, r3, r3, r2
 80055f2:	095b      	lsrs	r3, r3, #5
 80055f4:	011c      	lsls	r4, r3, #4
 80055f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055fa:	2200      	movs	r2, #0
 80055fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005600:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005604:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005608:	4642      	mov	r2, r8
 800560a:	464b      	mov	r3, r9
 800560c:	1891      	adds	r1, r2, r2
 800560e:	61b9      	str	r1, [r7, #24]
 8005610:	415b      	adcs	r3, r3
 8005612:	61fb      	str	r3, [r7, #28]
 8005614:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005618:	4641      	mov	r1, r8
 800561a:	1851      	adds	r1, r2, r1
 800561c:	6139      	str	r1, [r7, #16]
 800561e:	4649      	mov	r1, r9
 8005620:	414b      	adcs	r3, r1
 8005622:	617b      	str	r3, [r7, #20]
 8005624:	f04f 0200 	mov.w	r2, #0
 8005628:	f04f 0300 	mov.w	r3, #0
 800562c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005630:	4659      	mov	r1, fp
 8005632:	00cb      	lsls	r3, r1, #3
 8005634:	4651      	mov	r1, sl
 8005636:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800563a:	4651      	mov	r1, sl
 800563c:	00ca      	lsls	r2, r1, #3
 800563e:	4610      	mov	r0, r2
 8005640:	4619      	mov	r1, r3
 8005642:	4603      	mov	r3, r0
 8005644:	4642      	mov	r2, r8
 8005646:	189b      	adds	r3, r3, r2
 8005648:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800564c:	464b      	mov	r3, r9
 800564e:	460a      	mov	r2, r1
 8005650:	eb42 0303 	adc.w	r3, r2, r3
 8005654:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	67bb      	str	r3, [r7, #120]	; 0x78
 8005662:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005664:	f04f 0200 	mov.w	r2, #0
 8005668:	f04f 0300 	mov.w	r3, #0
 800566c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005670:	4649      	mov	r1, r9
 8005672:	008b      	lsls	r3, r1, #2
 8005674:	4641      	mov	r1, r8
 8005676:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800567a:	4641      	mov	r1, r8
 800567c:	008a      	lsls	r2, r1, #2
 800567e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005682:	f7fb fa8b 	bl	8000b9c <__aeabi_uldivmod>
 8005686:	4602      	mov	r2, r0
 8005688:	460b      	mov	r3, r1
 800568a:	4b39      	ldr	r3, [pc, #228]	; (8005770 <UART_SetConfig+0x4e4>)
 800568c:	fba3 1302 	umull	r1, r3, r3, r2
 8005690:	095b      	lsrs	r3, r3, #5
 8005692:	2164      	movs	r1, #100	; 0x64
 8005694:	fb01 f303 	mul.w	r3, r1, r3
 8005698:	1ad3      	subs	r3, r2, r3
 800569a:	011b      	lsls	r3, r3, #4
 800569c:	3332      	adds	r3, #50	; 0x32
 800569e:	4a34      	ldr	r2, [pc, #208]	; (8005770 <UART_SetConfig+0x4e4>)
 80056a0:	fba2 2303 	umull	r2, r3, r2, r3
 80056a4:	095b      	lsrs	r3, r3, #5
 80056a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056aa:	441c      	add	r4, r3
 80056ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b0:	2200      	movs	r2, #0
 80056b2:	673b      	str	r3, [r7, #112]	; 0x70
 80056b4:	677a      	str	r2, [r7, #116]	; 0x74
 80056b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056ba:	4642      	mov	r2, r8
 80056bc:	464b      	mov	r3, r9
 80056be:	1891      	adds	r1, r2, r2
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	415b      	adcs	r3, r3
 80056c4:	60fb      	str	r3, [r7, #12]
 80056c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056ca:	4641      	mov	r1, r8
 80056cc:	1851      	adds	r1, r2, r1
 80056ce:	6039      	str	r1, [r7, #0]
 80056d0:	4649      	mov	r1, r9
 80056d2:	414b      	adcs	r3, r1
 80056d4:	607b      	str	r3, [r7, #4]
 80056d6:	f04f 0200 	mov.w	r2, #0
 80056da:	f04f 0300 	mov.w	r3, #0
 80056de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056e2:	4659      	mov	r1, fp
 80056e4:	00cb      	lsls	r3, r1, #3
 80056e6:	4651      	mov	r1, sl
 80056e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056ec:	4651      	mov	r1, sl
 80056ee:	00ca      	lsls	r2, r1, #3
 80056f0:	4610      	mov	r0, r2
 80056f2:	4619      	mov	r1, r3
 80056f4:	4603      	mov	r3, r0
 80056f6:	4642      	mov	r2, r8
 80056f8:	189b      	adds	r3, r3, r2
 80056fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80056fc:	464b      	mov	r3, r9
 80056fe:	460a      	mov	r2, r1
 8005700:	eb42 0303 	adc.w	r3, r2, r3
 8005704:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005706:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	2200      	movs	r2, #0
 800570e:	663b      	str	r3, [r7, #96]	; 0x60
 8005710:	667a      	str	r2, [r7, #100]	; 0x64
 8005712:	f04f 0200 	mov.w	r2, #0
 8005716:	f04f 0300 	mov.w	r3, #0
 800571a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800571e:	4649      	mov	r1, r9
 8005720:	008b      	lsls	r3, r1, #2
 8005722:	4641      	mov	r1, r8
 8005724:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005728:	4641      	mov	r1, r8
 800572a:	008a      	lsls	r2, r1, #2
 800572c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005730:	f7fb fa34 	bl	8000b9c <__aeabi_uldivmod>
 8005734:	4602      	mov	r2, r0
 8005736:	460b      	mov	r3, r1
 8005738:	4b0d      	ldr	r3, [pc, #52]	; (8005770 <UART_SetConfig+0x4e4>)
 800573a:	fba3 1302 	umull	r1, r3, r3, r2
 800573e:	095b      	lsrs	r3, r3, #5
 8005740:	2164      	movs	r1, #100	; 0x64
 8005742:	fb01 f303 	mul.w	r3, r1, r3
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	011b      	lsls	r3, r3, #4
 800574a:	3332      	adds	r3, #50	; 0x32
 800574c:	4a08      	ldr	r2, [pc, #32]	; (8005770 <UART_SetConfig+0x4e4>)
 800574e:	fba2 2303 	umull	r2, r3, r2, r3
 8005752:	095b      	lsrs	r3, r3, #5
 8005754:	f003 020f 	and.w	r2, r3, #15
 8005758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4422      	add	r2, r4
 8005760:	609a      	str	r2, [r3, #8]
}
 8005762:	bf00      	nop
 8005764:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005768:	46bd      	mov	sp, r7
 800576a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800576e:	bf00      	nop
 8005770:	51eb851f 	.word	0x51eb851f

08005774 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8005774:	b480      	push	{r7}
 8005776:	b083      	sub	sp, #12
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d123      	bne.n	80057ce <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800578e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	6851      	ldr	r1, [r2, #4]
 8005796:	683a      	ldr	r2, [r7, #0]
 8005798:	6892      	ldr	r2, [r2, #8]
 800579a:	4311      	orrs	r1, r2
 800579c:	683a      	ldr	r2, [r7, #0]
 800579e:	68d2      	ldr	r2, [r2, #12]
 80057a0:	4311      	orrs	r1, r2
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	6912      	ldr	r2, [r2, #16]
 80057a6:	4311      	orrs	r1, r2
 80057a8:	683a      	ldr	r2, [r7, #0]
 80057aa:	6952      	ldr	r2, [r2, #20]
 80057ac:	4311      	orrs	r1, r2
 80057ae:	683a      	ldr	r2, [r7, #0]
 80057b0:	6992      	ldr	r2, [r2, #24]
 80057b2:	4311      	orrs	r1, r2
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	69d2      	ldr	r2, [r2, #28]
 80057b8:	4311      	orrs	r1, r2
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	6a12      	ldr	r2, [r2, #32]
 80057be:	4311      	orrs	r1, r2
 80057c0:	683a      	ldr	r2, [r7, #0]
 80057c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80057c4:	430a      	orrs	r2, r1
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	e028      	b.n	8005820 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	69d9      	ldr	r1, [r3, #28]
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	6a1b      	ldr	r3, [r3, #32]
 80057de:	4319      	orrs	r1, r3
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	430b      	orrs	r3, r1
 80057e6:	431a      	orrs	r2, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80057f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80057f8:	683a      	ldr	r2, [r7, #0]
 80057fa:	6851      	ldr	r1, [r2, #4]
 80057fc:	683a      	ldr	r2, [r7, #0]
 80057fe:	6892      	ldr	r2, [r2, #8]
 8005800:	4311      	orrs	r1, r2
 8005802:	683a      	ldr	r2, [r7, #0]
 8005804:	68d2      	ldr	r2, [r2, #12]
 8005806:	4311      	orrs	r1, r2
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	6912      	ldr	r2, [r2, #16]
 800580c:	4311      	orrs	r1, r2
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	6952      	ldr	r2, [r2, #20]
 8005812:	4311      	orrs	r1, r2
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	6992      	ldr	r2, [r2, #24]
 8005818:	430a      	orrs	r2, r1
 800581a:	431a      	orrs	r2, r3
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8005820:	2300      	movs	r3, #0
}
 8005822:	4618      	mov	r0, r3
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr

0800582e <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800582e:	b480      	push	{r7}
 8005830:	b085      	sub	sp, #20
 8005832:	af00      	add	r7, sp, #0
 8005834:	60f8      	str	r0, [r7, #12]
 8005836:	60b9      	str	r1, [r7, #8]
 8005838:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d128      	bne.n	8005892 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	1e59      	subs	r1, r3, #1
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	3b01      	subs	r3, #1
 8005854:	011b      	lsls	r3, r3, #4
 8005856:	4319      	orrs	r1, r3
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	3b01      	subs	r3, #1
 800585e:	021b      	lsls	r3, r3, #8
 8005860:	4319      	orrs	r1, r3
 8005862:	68bb      	ldr	r3, [r7, #8]
 8005864:	68db      	ldr	r3, [r3, #12]
 8005866:	3b01      	subs	r3, #1
 8005868:	031b      	lsls	r3, r3, #12
 800586a:	4319      	orrs	r1, r3
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	691b      	ldr	r3, [r3, #16]
 8005870:	3b01      	subs	r3, #1
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	4319      	orrs	r1, r3
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	695b      	ldr	r3, [r3, #20]
 800587a:	3b01      	subs	r3, #1
 800587c:	051b      	lsls	r3, r3, #20
 800587e:	4319      	orrs	r1, r3
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	699b      	ldr	r3, [r3, #24]
 8005884:	3b01      	subs	r3, #1
 8005886:	061b      	lsls	r3, r3, #24
 8005888:	430b      	orrs	r3, r1
 800588a:	431a      	orrs	r2, r3
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	609a      	str	r2, [r3, #8]
 8005890:	e02f      	b.n	80058f2 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800589a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	68d2      	ldr	r2, [r2, #12]
 80058a2:	3a01      	subs	r2, #1
 80058a4:	0311      	lsls	r1, r2, #12
 80058a6:	68ba      	ldr	r2, [r7, #8]
 80058a8:	6952      	ldr	r2, [r2, #20]
 80058aa:	3a01      	subs	r2, #1
 80058ac:	0512      	lsls	r2, r2, #20
 80058ae:	430a      	orrs	r2, r1
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	1e59      	subs	r1, r3, #1
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	3b01      	subs	r3, #1
 80058ca:	011b      	lsls	r3, r3, #4
 80058cc:	4319      	orrs	r1, r3
 80058ce:	68bb      	ldr	r3, [r7, #8]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	3b01      	subs	r3, #1
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	4319      	orrs	r1, r3
 80058d8:	68bb      	ldr	r3, [r7, #8]
 80058da:	691b      	ldr	r3, [r3, #16]
 80058dc:	3b01      	subs	r3, #1
 80058de:	041b      	lsls	r3, r3, #16
 80058e0:	4319      	orrs	r1, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	699b      	ldr	r3, [r3, #24]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	061b      	lsls	r3, r3, #24
 80058ea:	430b      	orrs	r3, r1
 80058ec:	431a      	orrs	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80058f2:	2300      	movs	r3, #0
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b086      	sub	sp, #24
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 800590c:	2300      	movs	r3, #0
 800590e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	691b      	ldr	r3, [r3, #16]
 8005914:	0d9b      	lsrs	r3, r3, #22
 8005916:	059b      	lsls	r3, r3, #22
 8005918:	68ba      	ldr	r2, [r7, #8]
 800591a:	6811      	ldr	r1, [r2, #0]
 800591c:	68ba      	ldr	r2, [r7, #8]
 800591e:	6852      	ldr	r2, [r2, #4]
 8005920:	4311      	orrs	r1, r2
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	6892      	ldr	r2, [r2, #8]
 8005926:	3a01      	subs	r2, #1
 8005928:	0152      	lsls	r2, r2, #5
 800592a:	4311      	orrs	r1, r2
 800592c:	68ba      	ldr	r2, [r7, #8]
 800592e:	68d2      	ldr	r2, [r2, #12]
 8005930:	0252      	lsls	r2, r2, #9
 8005932:	430a      	orrs	r2, r1
 8005934:	431a      	orrs	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 800593a:	f7fd f8b5 	bl	8002aa8 <HAL_GetTick>
 800593e:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005940:	e010      	b.n	8005964 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005948:	d00c      	beq.n	8005964 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2b00      	cmp	r3, #0
 800594e:	d007      	beq.n	8005960 <FMC_SDRAM_SendCommand+0x60>
 8005950:	f7fd f8aa 	bl	8002aa8 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	697b      	ldr	r3, [r7, #20]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d201      	bcs.n	8005964 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8005960:	2303      	movs	r3, #3
 8005962:	e006      	b.n	8005972 <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	699b      	ldr	r3, [r3, #24]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b20      	cmp	r3, #32
 800596e:	d0e8      	beq.n	8005942 <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8005970:	2300      	movs	r3, #0
}
 8005972:	4618      	mov	r0, r3
 8005974:	3718      	adds	r7, #24
 8005976:	46bd      	mov	sp, r7
 8005978:	bd80      	pop	{r7, pc}

0800597a <FMC_SDRAM_SetAutoRefreshNumber>:
  * @param  AutoRefreshNumber Specifies the auto Refresh number.
  * @retval None
  */
HAL_StatusTypeDef FMC_SDRAM_SetAutoRefreshNumber(FMC_SDRAM_TypeDef *Device,
                                                 uint32_t AutoRefreshNumber)
{
 800597a:	b480      	push	{r7}
 800597c:	b083      	sub	sp, #12
 800597e:	af00      	add	r7, sp, #0
 8005980:	6078      	str	r0, [r7, #4]
 8005982:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(AutoRefreshNumber));

  /* Set the Auto-refresh number in command register */
  MODIFY_REG(Device->SDCMR, FMC_SDCMR_NRFS, ((AutoRefreshNumber - 1U) << FMC_SDCMR_NRFS_Pos));
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	f423 72f0 	bic.w	r2, r3, #480	; 0x1e0
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	3b01      	subs	r3, #1
 8005990:	015b      	lsls	r3, r3, #5
 8005992:	431a      	orrs	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 8005998:	2300      	movs	r3, #0
}
 800599a:	4618      	mov	r0, r3
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr
	...

080059a8 <__errno>:
 80059a8:	4b01      	ldr	r3, [pc, #4]	; (80059b0 <__errno+0x8>)
 80059aa:	6818      	ldr	r0, [r3, #0]
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	20000014 	.word	0x20000014

080059b4 <__libc_init_array>:
 80059b4:	b570      	push	{r4, r5, r6, lr}
 80059b6:	4d0d      	ldr	r5, [pc, #52]	; (80059ec <__libc_init_array+0x38>)
 80059b8:	4c0d      	ldr	r4, [pc, #52]	; (80059f0 <__libc_init_array+0x3c>)
 80059ba:	1b64      	subs	r4, r4, r5
 80059bc:	10a4      	asrs	r4, r4, #2
 80059be:	2600      	movs	r6, #0
 80059c0:	42a6      	cmp	r6, r4
 80059c2:	d109      	bne.n	80059d8 <__libc_init_array+0x24>
 80059c4:	4d0b      	ldr	r5, [pc, #44]	; (80059f4 <__libc_init_array+0x40>)
 80059c6:	4c0c      	ldr	r4, [pc, #48]	; (80059f8 <__libc_init_array+0x44>)
 80059c8:	f002 faa0 	bl	8007f0c <_init>
 80059cc:	1b64      	subs	r4, r4, r5
 80059ce:	10a4      	asrs	r4, r4, #2
 80059d0:	2600      	movs	r6, #0
 80059d2:	42a6      	cmp	r6, r4
 80059d4:	d105      	bne.n	80059e2 <__libc_init_array+0x2e>
 80059d6:	bd70      	pop	{r4, r5, r6, pc}
 80059d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80059dc:	4798      	blx	r3
 80059de:	3601      	adds	r6, #1
 80059e0:	e7ee      	b.n	80059c0 <__libc_init_array+0xc>
 80059e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80059e6:	4798      	blx	r3
 80059e8:	3601      	adds	r6, #1
 80059ea:	e7f2      	b.n	80059d2 <__libc_init_array+0x1e>
 80059ec:	08026b20 	.word	0x08026b20
 80059f0:	08026b20 	.word	0x08026b20
 80059f4:	08026b20 	.word	0x08026b20
 80059f8:	08026b24 	.word	0x08026b24

080059fc <memset>:
 80059fc:	4402      	add	r2, r0
 80059fe:	4603      	mov	r3, r0
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d100      	bne.n	8005a06 <memset+0xa>
 8005a04:	4770      	bx	lr
 8005a06:	f803 1b01 	strb.w	r1, [r3], #1
 8005a0a:	e7f9      	b.n	8005a00 <memset+0x4>

08005a0c <iprintf>:
 8005a0c:	b40f      	push	{r0, r1, r2, r3}
 8005a0e:	4b0a      	ldr	r3, [pc, #40]	; (8005a38 <iprintf+0x2c>)
 8005a10:	b513      	push	{r0, r1, r4, lr}
 8005a12:	681c      	ldr	r4, [r3, #0]
 8005a14:	b124      	cbz	r4, 8005a20 <iprintf+0x14>
 8005a16:	69a3      	ldr	r3, [r4, #24]
 8005a18:	b913      	cbnz	r3, 8005a20 <iprintf+0x14>
 8005a1a:	4620      	mov	r0, r4
 8005a1c:	f000 fa7e 	bl	8005f1c <__sinit>
 8005a20:	ab05      	add	r3, sp, #20
 8005a22:	9a04      	ldr	r2, [sp, #16]
 8005a24:	68a1      	ldr	r1, [r4, #8]
 8005a26:	9301      	str	r3, [sp, #4]
 8005a28:	4620      	mov	r0, r4
 8005a2a:	f000 fde3 	bl	80065f4 <_vfiprintf_r>
 8005a2e:	b002      	add	sp, #8
 8005a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a34:	b004      	add	sp, #16
 8005a36:	4770      	bx	lr
 8005a38:	20000014 	.word	0x20000014

08005a3c <_puts_r>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	460e      	mov	r6, r1
 8005a40:	4605      	mov	r5, r0
 8005a42:	b118      	cbz	r0, 8005a4c <_puts_r+0x10>
 8005a44:	6983      	ldr	r3, [r0, #24]
 8005a46:	b90b      	cbnz	r3, 8005a4c <_puts_r+0x10>
 8005a48:	f000 fa68 	bl	8005f1c <__sinit>
 8005a4c:	69ab      	ldr	r3, [r5, #24]
 8005a4e:	68ac      	ldr	r4, [r5, #8]
 8005a50:	b913      	cbnz	r3, 8005a58 <_puts_r+0x1c>
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 fa62 	bl	8005f1c <__sinit>
 8005a58:	4b2c      	ldr	r3, [pc, #176]	; (8005b0c <_puts_r+0xd0>)
 8005a5a:	429c      	cmp	r4, r3
 8005a5c:	d120      	bne.n	8005aa0 <_puts_r+0x64>
 8005a5e:	686c      	ldr	r4, [r5, #4]
 8005a60:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005a62:	07db      	lsls	r3, r3, #31
 8005a64:	d405      	bmi.n	8005a72 <_puts_r+0x36>
 8005a66:	89a3      	ldrh	r3, [r4, #12]
 8005a68:	0598      	lsls	r0, r3, #22
 8005a6a:	d402      	bmi.n	8005a72 <_puts_r+0x36>
 8005a6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005a6e:	f000 faf3 	bl	8006058 <__retarget_lock_acquire_recursive>
 8005a72:	89a3      	ldrh	r3, [r4, #12]
 8005a74:	0719      	lsls	r1, r3, #28
 8005a76:	d51d      	bpl.n	8005ab4 <_puts_r+0x78>
 8005a78:	6923      	ldr	r3, [r4, #16]
 8005a7a:	b1db      	cbz	r3, 8005ab4 <_puts_r+0x78>
 8005a7c:	3e01      	subs	r6, #1
 8005a7e:	68a3      	ldr	r3, [r4, #8]
 8005a80:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005a84:	3b01      	subs	r3, #1
 8005a86:	60a3      	str	r3, [r4, #8]
 8005a88:	bb39      	cbnz	r1, 8005ada <_puts_r+0x9e>
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	da38      	bge.n	8005b00 <_puts_r+0xc4>
 8005a8e:	4622      	mov	r2, r4
 8005a90:	210a      	movs	r1, #10
 8005a92:	4628      	mov	r0, r5
 8005a94:	f000 f868 	bl	8005b68 <__swbuf_r>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d011      	beq.n	8005ac0 <_puts_r+0x84>
 8005a9c:	250a      	movs	r5, #10
 8005a9e:	e011      	b.n	8005ac4 <_puts_r+0x88>
 8005aa0:	4b1b      	ldr	r3, [pc, #108]	; (8005b10 <_puts_r+0xd4>)
 8005aa2:	429c      	cmp	r4, r3
 8005aa4:	d101      	bne.n	8005aaa <_puts_r+0x6e>
 8005aa6:	68ac      	ldr	r4, [r5, #8]
 8005aa8:	e7da      	b.n	8005a60 <_puts_r+0x24>
 8005aaa:	4b1a      	ldr	r3, [pc, #104]	; (8005b14 <_puts_r+0xd8>)
 8005aac:	429c      	cmp	r4, r3
 8005aae:	bf08      	it	eq
 8005ab0:	68ec      	ldreq	r4, [r5, #12]
 8005ab2:	e7d5      	b.n	8005a60 <_puts_r+0x24>
 8005ab4:	4621      	mov	r1, r4
 8005ab6:	4628      	mov	r0, r5
 8005ab8:	f000 f8a8 	bl	8005c0c <__swsetup_r>
 8005abc:	2800      	cmp	r0, #0
 8005abe:	d0dd      	beq.n	8005a7c <_puts_r+0x40>
 8005ac0:	f04f 35ff 	mov.w	r5, #4294967295
 8005ac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ac6:	07da      	lsls	r2, r3, #31
 8005ac8:	d405      	bmi.n	8005ad6 <_puts_r+0x9a>
 8005aca:	89a3      	ldrh	r3, [r4, #12]
 8005acc:	059b      	lsls	r3, r3, #22
 8005ace:	d402      	bmi.n	8005ad6 <_puts_r+0x9a>
 8005ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005ad2:	f000 fac2 	bl	800605a <__retarget_lock_release_recursive>
 8005ad6:	4628      	mov	r0, r5
 8005ad8:	bd70      	pop	{r4, r5, r6, pc}
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	da04      	bge.n	8005ae8 <_puts_r+0xac>
 8005ade:	69a2      	ldr	r2, [r4, #24]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	dc06      	bgt.n	8005af2 <_puts_r+0xb6>
 8005ae4:	290a      	cmp	r1, #10
 8005ae6:	d004      	beq.n	8005af2 <_puts_r+0xb6>
 8005ae8:	6823      	ldr	r3, [r4, #0]
 8005aea:	1c5a      	adds	r2, r3, #1
 8005aec:	6022      	str	r2, [r4, #0]
 8005aee:	7019      	strb	r1, [r3, #0]
 8005af0:	e7c5      	b.n	8005a7e <_puts_r+0x42>
 8005af2:	4622      	mov	r2, r4
 8005af4:	4628      	mov	r0, r5
 8005af6:	f000 f837 	bl	8005b68 <__swbuf_r>
 8005afa:	3001      	adds	r0, #1
 8005afc:	d1bf      	bne.n	8005a7e <_puts_r+0x42>
 8005afe:	e7df      	b.n	8005ac0 <_puts_r+0x84>
 8005b00:	6823      	ldr	r3, [r4, #0]
 8005b02:	250a      	movs	r5, #10
 8005b04:	1c5a      	adds	r2, r3, #1
 8005b06:	6022      	str	r2, [r4, #0]
 8005b08:	701d      	strb	r5, [r3, #0]
 8005b0a:	e7db      	b.n	8005ac4 <_puts_r+0x88>
 8005b0c:	080268cc 	.word	0x080268cc
 8005b10:	080268ec 	.word	0x080268ec
 8005b14:	080268ac 	.word	0x080268ac

08005b18 <puts>:
 8005b18:	4b02      	ldr	r3, [pc, #8]	; (8005b24 <puts+0xc>)
 8005b1a:	4601      	mov	r1, r0
 8005b1c:	6818      	ldr	r0, [r3, #0]
 8005b1e:	f7ff bf8d 	b.w	8005a3c <_puts_r>
 8005b22:	bf00      	nop
 8005b24:	20000014 	.word	0x20000014

08005b28 <siprintf>:
 8005b28:	b40e      	push	{r1, r2, r3}
 8005b2a:	b500      	push	{lr}
 8005b2c:	b09c      	sub	sp, #112	; 0x70
 8005b2e:	ab1d      	add	r3, sp, #116	; 0x74
 8005b30:	9002      	str	r0, [sp, #8]
 8005b32:	9006      	str	r0, [sp, #24]
 8005b34:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005b38:	4809      	ldr	r0, [pc, #36]	; (8005b60 <siprintf+0x38>)
 8005b3a:	9107      	str	r1, [sp, #28]
 8005b3c:	9104      	str	r1, [sp, #16]
 8005b3e:	4909      	ldr	r1, [pc, #36]	; (8005b64 <siprintf+0x3c>)
 8005b40:	f853 2b04 	ldr.w	r2, [r3], #4
 8005b44:	9105      	str	r1, [sp, #20]
 8005b46:	6800      	ldr	r0, [r0, #0]
 8005b48:	9301      	str	r3, [sp, #4]
 8005b4a:	a902      	add	r1, sp, #8
 8005b4c:	f000 fc28 	bl	80063a0 <_svfiprintf_r>
 8005b50:	9b02      	ldr	r3, [sp, #8]
 8005b52:	2200      	movs	r2, #0
 8005b54:	701a      	strb	r2, [r3, #0]
 8005b56:	b01c      	add	sp, #112	; 0x70
 8005b58:	f85d eb04 	ldr.w	lr, [sp], #4
 8005b5c:	b003      	add	sp, #12
 8005b5e:	4770      	bx	lr
 8005b60:	20000014 	.word	0x20000014
 8005b64:	ffff0208 	.word	0xffff0208

08005b68 <__swbuf_r>:
 8005b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b6a:	460e      	mov	r6, r1
 8005b6c:	4614      	mov	r4, r2
 8005b6e:	4605      	mov	r5, r0
 8005b70:	b118      	cbz	r0, 8005b7a <__swbuf_r+0x12>
 8005b72:	6983      	ldr	r3, [r0, #24]
 8005b74:	b90b      	cbnz	r3, 8005b7a <__swbuf_r+0x12>
 8005b76:	f000 f9d1 	bl	8005f1c <__sinit>
 8005b7a:	4b21      	ldr	r3, [pc, #132]	; (8005c00 <__swbuf_r+0x98>)
 8005b7c:	429c      	cmp	r4, r3
 8005b7e:	d12b      	bne.n	8005bd8 <__swbuf_r+0x70>
 8005b80:	686c      	ldr	r4, [r5, #4]
 8005b82:	69a3      	ldr	r3, [r4, #24]
 8005b84:	60a3      	str	r3, [r4, #8]
 8005b86:	89a3      	ldrh	r3, [r4, #12]
 8005b88:	071a      	lsls	r2, r3, #28
 8005b8a:	d52f      	bpl.n	8005bec <__swbuf_r+0x84>
 8005b8c:	6923      	ldr	r3, [r4, #16]
 8005b8e:	b36b      	cbz	r3, 8005bec <__swbuf_r+0x84>
 8005b90:	6923      	ldr	r3, [r4, #16]
 8005b92:	6820      	ldr	r0, [r4, #0]
 8005b94:	1ac0      	subs	r0, r0, r3
 8005b96:	6963      	ldr	r3, [r4, #20]
 8005b98:	b2f6      	uxtb	r6, r6
 8005b9a:	4283      	cmp	r3, r0
 8005b9c:	4637      	mov	r7, r6
 8005b9e:	dc04      	bgt.n	8005baa <__swbuf_r+0x42>
 8005ba0:	4621      	mov	r1, r4
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	f000 f926 	bl	8005df4 <_fflush_r>
 8005ba8:	bb30      	cbnz	r0, 8005bf8 <__swbuf_r+0x90>
 8005baa:	68a3      	ldr	r3, [r4, #8]
 8005bac:	3b01      	subs	r3, #1
 8005bae:	60a3      	str	r3, [r4, #8]
 8005bb0:	6823      	ldr	r3, [r4, #0]
 8005bb2:	1c5a      	adds	r2, r3, #1
 8005bb4:	6022      	str	r2, [r4, #0]
 8005bb6:	701e      	strb	r6, [r3, #0]
 8005bb8:	6963      	ldr	r3, [r4, #20]
 8005bba:	3001      	adds	r0, #1
 8005bbc:	4283      	cmp	r3, r0
 8005bbe:	d004      	beq.n	8005bca <__swbuf_r+0x62>
 8005bc0:	89a3      	ldrh	r3, [r4, #12]
 8005bc2:	07db      	lsls	r3, r3, #31
 8005bc4:	d506      	bpl.n	8005bd4 <__swbuf_r+0x6c>
 8005bc6:	2e0a      	cmp	r6, #10
 8005bc8:	d104      	bne.n	8005bd4 <__swbuf_r+0x6c>
 8005bca:	4621      	mov	r1, r4
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 f911 	bl	8005df4 <_fflush_r>
 8005bd2:	b988      	cbnz	r0, 8005bf8 <__swbuf_r+0x90>
 8005bd4:	4638      	mov	r0, r7
 8005bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005bd8:	4b0a      	ldr	r3, [pc, #40]	; (8005c04 <__swbuf_r+0x9c>)
 8005bda:	429c      	cmp	r4, r3
 8005bdc:	d101      	bne.n	8005be2 <__swbuf_r+0x7a>
 8005bde:	68ac      	ldr	r4, [r5, #8]
 8005be0:	e7cf      	b.n	8005b82 <__swbuf_r+0x1a>
 8005be2:	4b09      	ldr	r3, [pc, #36]	; (8005c08 <__swbuf_r+0xa0>)
 8005be4:	429c      	cmp	r4, r3
 8005be6:	bf08      	it	eq
 8005be8:	68ec      	ldreq	r4, [r5, #12]
 8005bea:	e7ca      	b.n	8005b82 <__swbuf_r+0x1a>
 8005bec:	4621      	mov	r1, r4
 8005bee:	4628      	mov	r0, r5
 8005bf0:	f000 f80c 	bl	8005c0c <__swsetup_r>
 8005bf4:	2800      	cmp	r0, #0
 8005bf6:	d0cb      	beq.n	8005b90 <__swbuf_r+0x28>
 8005bf8:	f04f 37ff 	mov.w	r7, #4294967295
 8005bfc:	e7ea      	b.n	8005bd4 <__swbuf_r+0x6c>
 8005bfe:	bf00      	nop
 8005c00:	080268cc 	.word	0x080268cc
 8005c04:	080268ec 	.word	0x080268ec
 8005c08:	080268ac 	.word	0x080268ac

08005c0c <__swsetup_r>:
 8005c0c:	4b32      	ldr	r3, [pc, #200]	; (8005cd8 <__swsetup_r+0xcc>)
 8005c0e:	b570      	push	{r4, r5, r6, lr}
 8005c10:	681d      	ldr	r5, [r3, #0]
 8005c12:	4606      	mov	r6, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	b125      	cbz	r5, 8005c22 <__swsetup_r+0x16>
 8005c18:	69ab      	ldr	r3, [r5, #24]
 8005c1a:	b913      	cbnz	r3, 8005c22 <__swsetup_r+0x16>
 8005c1c:	4628      	mov	r0, r5
 8005c1e:	f000 f97d 	bl	8005f1c <__sinit>
 8005c22:	4b2e      	ldr	r3, [pc, #184]	; (8005cdc <__swsetup_r+0xd0>)
 8005c24:	429c      	cmp	r4, r3
 8005c26:	d10f      	bne.n	8005c48 <__swsetup_r+0x3c>
 8005c28:	686c      	ldr	r4, [r5, #4]
 8005c2a:	89a3      	ldrh	r3, [r4, #12]
 8005c2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005c30:	0719      	lsls	r1, r3, #28
 8005c32:	d42c      	bmi.n	8005c8e <__swsetup_r+0x82>
 8005c34:	06dd      	lsls	r5, r3, #27
 8005c36:	d411      	bmi.n	8005c5c <__swsetup_r+0x50>
 8005c38:	2309      	movs	r3, #9
 8005c3a:	6033      	str	r3, [r6, #0]
 8005c3c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005c40:	81a3      	strh	r3, [r4, #12]
 8005c42:	f04f 30ff 	mov.w	r0, #4294967295
 8005c46:	e03e      	b.n	8005cc6 <__swsetup_r+0xba>
 8005c48:	4b25      	ldr	r3, [pc, #148]	; (8005ce0 <__swsetup_r+0xd4>)
 8005c4a:	429c      	cmp	r4, r3
 8005c4c:	d101      	bne.n	8005c52 <__swsetup_r+0x46>
 8005c4e:	68ac      	ldr	r4, [r5, #8]
 8005c50:	e7eb      	b.n	8005c2a <__swsetup_r+0x1e>
 8005c52:	4b24      	ldr	r3, [pc, #144]	; (8005ce4 <__swsetup_r+0xd8>)
 8005c54:	429c      	cmp	r4, r3
 8005c56:	bf08      	it	eq
 8005c58:	68ec      	ldreq	r4, [r5, #12]
 8005c5a:	e7e6      	b.n	8005c2a <__swsetup_r+0x1e>
 8005c5c:	0758      	lsls	r0, r3, #29
 8005c5e:	d512      	bpl.n	8005c86 <__swsetup_r+0x7a>
 8005c60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c62:	b141      	cbz	r1, 8005c76 <__swsetup_r+0x6a>
 8005c64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c68:	4299      	cmp	r1, r3
 8005c6a:	d002      	beq.n	8005c72 <__swsetup_r+0x66>
 8005c6c:	4630      	mov	r0, r6
 8005c6e:	f000 fa5b 	bl	8006128 <_free_r>
 8005c72:	2300      	movs	r3, #0
 8005c74:	6363      	str	r3, [r4, #52]	; 0x34
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	2300      	movs	r3, #0
 8005c80:	6063      	str	r3, [r4, #4]
 8005c82:	6923      	ldr	r3, [r4, #16]
 8005c84:	6023      	str	r3, [r4, #0]
 8005c86:	89a3      	ldrh	r3, [r4, #12]
 8005c88:	f043 0308 	orr.w	r3, r3, #8
 8005c8c:	81a3      	strh	r3, [r4, #12]
 8005c8e:	6923      	ldr	r3, [r4, #16]
 8005c90:	b94b      	cbnz	r3, 8005ca6 <__swsetup_r+0x9a>
 8005c92:	89a3      	ldrh	r3, [r4, #12]
 8005c94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c9c:	d003      	beq.n	8005ca6 <__swsetup_r+0x9a>
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	4630      	mov	r0, r6
 8005ca2:	f000 fa01 	bl	80060a8 <__smakebuf_r>
 8005ca6:	89a0      	ldrh	r0, [r4, #12]
 8005ca8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005cac:	f010 0301 	ands.w	r3, r0, #1
 8005cb0:	d00a      	beq.n	8005cc8 <__swsetup_r+0xbc>
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60a3      	str	r3, [r4, #8]
 8005cb6:	6963      	ldr	r3, [r4, #20]
 8005cb8:	425b      	negs	r3, r3
 8005cba:	61a3      	str	r3, [r4, #24]
 8005cbc:	6923      	ldr	r3, [r4, #16]
 8005cbe:	b943      	cbnz	r3, 8005cd2 <__swsetup_r+0xc6>
 8005cc0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005cc4:	d1ba      	bne.n	8005c3c <__swsetup_r+0x30>
 8005cc6:	bd70      	pop	{r4, r5, r6, pc}
 8005cc8:	0781      	lsls	r1, r0, #30
 8005cca:	bf58      	it	pl
 8005ccc:	6963      	ldrpl	r3, [r4, #20]
 8005cce:	60a3      	str	r3, [r4, #8]
 8005cd0:	e7f4      	b.n	8005cbc <__swsetup_r+0xb0>
 8005cd2:	2000      	movs	r0, #0
 8005cd4:	e7f7      	b.n	8005cc6 <__swsetup_r+0xba>
 8005cd6:	bf00      	nop
 8005cd8:	20000014 	.word	0x20000014
 8005cdc:	080268cc 	.word	0x080268cc
 8005ce0:	080268ec 	.word	0x080268ec
 8005ce4:	080268ac 	.word	0x080268ac

08005ce8 <__sflush_r>:
 8005ce8:	898a      	ldrh	r2, [r1, #12]
 8005cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cee:	4605      	mov	r5, r0
 8005cf0:	0710      	lsls	r0, r2, #28
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	d458      	bmi.n	8005da8 <__sflush_r+0xc0>
 8005cf6:	684b      	ldr	r3, [r1, #4]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	dc05      	bgt.n	8005d08 <__sflush_r+0x20>
 8005cfc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	dc02      	bgt.n	8005d08 <__sflush_r+0x20>
 8005d02:	2000      	movs	r0, #0
 8005d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d0a:	2e00      	cmp	r6, #0
 8005d0c:	d0f9      	beq.n	8005d02 <__sflush_r+0x1a>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d14:	682f      	ldr	r7, [r5, #0]
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	d032      	beq.n	8005d80 <__sflush_r+0x98>
 8005d1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d1c:	89a3      	ldrh	r3, [r4, #12]
 8005d1e:	075a      	lsls	r2, r3, #29
 8005d20:	d505      	bpl.n	8005d2e <__sflush_r+0x46>
 8005d22:	6863      	ldr	r3, [r4, #4]
 8005d24:	1ac0      	subs	r0, r0, r3
 8005d26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d28:	b10b      	cbz	r3, 8005d2e <__sflush_r+0x46>
 8005d2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005d2c:	1ac0      	subs	r0, r0, r3
 8005d2e:	2300      	movs	r3, #0
 8005d30:	4602      	mov	r2, r0
 8005d32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d34:	6a21      	ldr	r1, [r4, #32]
 8005d36:	4628      	mov	r0, r5
 8005d38:	47b0      	blx	r6
 8005d3a:	1c43      	adds	r3, r0, #1
 8005d3c:	89a3      	ldrh	r3, [r4, #12]
 8005d3e:	d106      	bne.n	8005d4e <__sflush_r+0x66>
 8005d40:	6829      	ldr	r1, [r5, #0]
 8005d42:	291d      	cmp	r1, #29
 8005d44:	d82c      	bhi.n	8005da0 <__sflush_r+0xb8>
 8005d46:	4a2a      	ldr	r2, [pc, #168]	; (8005df0 <__sflush_r+0x108>)
 8005d48:	40ca      	lsrs	r2, r1
 8005d4a:	07d6      	lsls	r6, r2, #31
 8005d4c:	d528      	bpl.n	8005da0 <__sflush_r+0xb8>
 8005d4e:	2200      	movs	r2, #0
 8005d50:	6062      	str	r2, [r4, #4]
 8005d52:	04d9      	lsls	r1, r3, #19
 8005d54:	6922      	ldr	r2, [r4, #16]
 8005d56:	6022      	str	r2, [r4, #0]
 8005d58:	d504      	bpl.n	8005d64 <__sflush_r+0x7c>
 8005d5a:	1c42      	adds	r2, r0, #1
 8005d5c:	d101      	bne.n	8005d62 <__sflush_r+0x7a>
 8005d5e:	682b      	ldr	r3, [r5, #0]
 8005d60:	b903      	cbnz	r3, 8005d64 <__sflush_r+0x7c>
 8005d62:	6560      	str	r0, [r4, #84]	; 0x54
 8005d64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d66:	602f      	str	r7, [r5, #0]
 8005d68:	2900      	cmp	r1, #0
 8005d6a:	d0ca      	beq.n	8005d02 <__sflush_r+0x1a>
 8005d6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005d70:	4299      	cmp	r1, r3
 8005d72:	d002      	beq.n	8005d7a <__sflush_r+0x92>
 8005d74:	4628      	mov	r0, r5
 8005d76:	f000 f9d7 	bl	8006128 <_free_r>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	6360      	str	r0, [r4, #52]	; 0x34
 8005d7e:	e7c1      	b.n	8005d04 <__sflush_r+0x1c>
 8005d80:	6a21      	ldr	r1, [r4, #32]
 8005d82:	2301      	movs	r3, #1
 8005d84:	4628      	mov	r0, r5
 8005d86:	47b0      	blx	r6
 8005d88:	1c41      	adds	r1, r0, #1
 8005d8a:	d1c7      	bne.n	8005d1c <__sflush_r+0x34>
 8005d8c:	682b      	ldr	r3, [r5, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d0c4      	beq.n	8005d1c <__sflush_r+0x34>
 8005d92:	2b1d      	cmp	r3, #29
 8005d94:	d001      	beq.n	8005d9a <__sflush_r+0xb2>
 8005d96:	2b16      	cmp	r3, #22
 8005d98:	d101      	bne.n	8005d9e <__sflush_r+0xb6>
 8005d9a:	602f      	str	r7, [r5, #0]
 8005d9c:	e7b1      	b.n	8005d02 <__sflush_r+0x1a>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005da4:	81a3      	strh	r3, [r4, #12]
 8005da6:	e7ad      	b.n	8005d04 <__sflush_r+0x1c>
 8005da8:	690f      	ldr	r7, [r1, #16]
 8005daa:	2f00      	cmp	r7, #0
 8005dac:	d0a9      	beq.n	8005d02 <__sflush_r+0x1a>
 8005dae:	0793      	lsls	r3, r2, #30
 8005db0:	680e      	ldr	r6, [r1, #0]
 8005db2:	bf08      	it	eq
 8005db4:	694b      	ldreq	r3, [r1, #20]
 8005db6:	600f      	str	r7, [r1, #0]
 8005db8:	bf18      	it	ne
 8005dba:	2300      	movne	r3, #0
 8005dbc:	eba6 0807 	sub.w	r8, r6, r7
 8005dc0:	608b      	str	r3, [r1, #8]
 8005dc2:	f1b8 0f00 	cmp.w	r8, #0
 8005dc6:	dd9c      	ble.n	8005d02 <__sflush_r+0x1a>
 8005dc8:	6a21      	ldr	r1, [r4, #32]
 8005dca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005dcc:	4643      	mov	r3, r8
 8005dce:	463a      	mov	r2, r7
 8005dd0:	4628      	mov	r0, r5
 8005dd2:	47b0      	blx	r6
 8005dd4:	2800      	cmp	r0, #0
 8005dd6:	dc06      	bgt.n	8005de6 <__sflush_r+0xfe>
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dde:	81a3      	strh	r3, [r4, #12]
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	e78e      	b.n	8005d04 <__sflush_r+0x1c>
 8005de6:	4407      	add	r7, r0
 8005de8:	eba8 0800 	sub.w	r8, r8, r0
 8005dec:	e7e9      	b.n	8005dc2 <__sflush_r+0xda>
 8005dee:	bf00      	nop
 8005df0:	20400001 	.word	0x20400001

08005df4 <_fflush_r>:
 8005df4:	b538      	push	{r3, r4, r5, lr}
 8005df6:	690b      	ldr	r3, [r1, #16]
 8005df8:	4605      	mov	r5, r0
 8005dfa:	460c      	mov	r4, r1
 8005dfc:	b913      	cbnz	r3, 8005e04 <_fflush_r+0x10>
 8005dfe:	2500      	movs	r5, #0
 8005e00:	4628      	mov	r0, r5
 8005e02:	bd38      	pop	{r3, r4, r5, pc}
 8005e04:	b118      	cbz	r0, 8005e0e <_fflush_r+0x1a>
 8005e06:	6983      	ldr	r3, [r0, #24]
 8005e08:	b90b      	cbnz	r3, 8005e0e <_fflush_r+0x1a>
 8005e0a:	f000 f887 	bl	8005f1c <__sinit>
 8005e0e:	4b14      	ldr	r3, [pc, #80]	; (8005e60 <_fflush_r+0x6c>)
 8005e10:	429c      	cmp	r4, r3
 8005e12:	d11b      	bne.n	8005e4c <_fflush_r+0x58>
 8005e14:	686c      	ldr	r4, [r5, #4]
 8005e16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d0ef      	beq.n	8005dfe <_fflush_r+0xa>
 8005e1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e20:	07d0      	lsls	r0, r2, #31
 8005e22:	d404      	bmi.n	8005e2e <_fflush_r+0x3a>
 8005e24:	0599      	lsls	r1, r3, #22
 8005e26:	d402      	bmi.n	8005e2e <_fflush_r+0x3a>
 8005e28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e2a:	f000 f915 	bl	8006058 <__retarget_lock_acquire_recursive>
 8005e2e:	4628      	mov	r0, r5
 8005e30:	4621      	mov	r1, r4
 8005e32:	f7ff ff59 	bl	8005ce8 <__sflush_r>
 8005e36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005e38:	07da      	lsls	r2, r3, #31
 8005e3a:	4605      	mov	r5, r0
 8005e3c:	d4e0      	bmi.n	8005e00 <_fflush_r+0xc>
 8005e3e:	89a3      	ldrh	r3, [r4, #12]
 8005e40:	059b      	lsls	r3, r3, #22
 8005e42:	d4dd      	bmi.n	8005e00 <_fflush_r+0xc>
 8005e44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e46:	f000 f908 	bl	800605a <__retarget_lock_release_recursive>
 8005e4a:	e7d9      	b.n	8005e00 <_fflush_r+0xc>
 8005e4c:	4b05      	ldr	r3, [pc, #20]	; (8005e64 <_fflush_r+0x70>)
 8005e4e:	429c      	cmp	r4, r3
 8005e50:	d101      	bne.n	8005e56 <_fflush_r+0x62>
 8005e52:	68ac      	ldr	r4, [r5, #8]
 8005e54:	e7df      	b.n	8005e16 <_fflush_r+0x22>
 8005e56:	4b04      	ldr	r3, [pc, #16]	; (8005e68 <_fflush_r+0x74>)
 8005e58:	429c      	cmp	r4, r3
 8005e5a:	bf08      	it	eq
 8005e5c:	68ec      	ldreq	r4, [r5, #12]
 8005e5e:	e7da      	b.n	8005e16 <_fflush_r+0x22>
 8005e60:	080268cc 	.word	0x080268cc
 8005e64:	080268ec 	.word	0x080268ec
 8005e68:	080268ac 	.word	0x080268ac

08005e6c <std>:
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	b510      	push	{r4, lr}
 8005e70:	4604      	mov	r4, r0
 8005e72:	e9c0 3300 	strd	r3, r3, [r0]
 8005e76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e7a:	6083      	str	r3, [r0, #8]
 8005e7c:	8181      	strh	r1, [r0, #12]
 8005e7e:	6643      	str	r3, [r0, #100]	; 0x64
 8005e80:	81c2      	strh	r2, [r0, #14]
 8005e82:	6183      	str	r3, [r0, #24]
 8005e84:	4619      	mov	r1, r3
 8005e86:	2208      	movs	r2, #8
 8005e88:	305c      	adds	r0, #92	; 0x5c
 8005e8a:	f7ff fdb7 	bl	80059fc <memset>
 8005e8e:	4b05      	ldr	r3, [pc, #20]	; (8005ea4 <std+0x38>)
 8005e90:	6263      	str	r3, [r4, #36]	; 0x24
 8005e92:	4b05      	ldr	r3, [pc, #20]	; (8005ea8 <std+0x3c>)
 8005e94:	62a3      	str	r3, [r4, #40]	; 0x28
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <std+0x40>)
 8005e98:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005e9a:	4b05      	ldr	r3, [pc, #20]	; (8005eb0 <std+0x44>)
 8005e9c:	6224      	str	r4, [r4, #32]
 8005e9e:	6323      	str	r3, [r4, #48]	; 0x30
 8005ea0:	bd10      	pop	{r4, pc}
 8005ea2:	bf00      	nop
 8005ea4:	08006b9d 	.word	0x08006b9d
 8005ea8:	08006bbf 	.word	0x08006bbf
 8005eac:	08006bf7 	.word	0x08006bf7
 8005eb0:	08006c1b 	.word	0x08006c1b

08005eb4 <_cleanup_r>:
 8005eb4:	4901      	ldr	r1, [pc, #4]	; (8005ebc <_cleanup_r+0x8>)
 8005eb6:	f000 b8af 	b.w	8006018 <_fwalk_reent>
 8005eba:	bf00      	nop
 8005ebc:	08005df5 	.word	0x08005df5

08005ec0 <__sfmoreglue>:
 8005ec0:	b570      	push	{r4, r5, r6, lr}
 8005ec2:	2268      	movs	r2, #104	; 0x68
 8005ec4:	1e4d      	subs	r5, r1, #1
 8005ec6:	4355      	muls	r5, r2
 8005ec8:	460e      	mov	r6, r1
 8005eca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005ece:	f000 f997 	bl	8006200 <_malloc_r>
 8005ed2:	4604      	mov	r4, r0
 8005ed4:	b140      	cbz	r0, 8005ee8 <__sfmoreglue+0x28>
 8005ed6:	2100      	movs	r1, #0
 8005ed8:	e9c0 1600 	strd	r1, r6, [r0]
 8005edc:	300c      	adds	r0, #12
 8005ede:	60a0      	str	r0, [r4, #8]
 8005ee0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005ee4:	f7ff fd8a 	bl	80059fc <memset>
 8005ee8:	4620      	mov	r0, r4
 8005eea:	bd70      	pop	{r4, r5, r6, pc}

08005eec <__sfp_lock_acquire>:
 8005eec:	4801      	ldr	r0, [pc, #4]	; (8005ef4 <__sfp_lock_acquire+0x8>)
 8005eee:	f000 b8b3 	b.w	8006058 <__retarget_lock_acquire_recursive>
 8005ef2:	bf00      	nop
 8005ef4:	200001e5 	.word	0x200001e5

08005ef8 <__sfp_lock_release>:
 8005ef8:	4801      	ldr	r0, [pc, #4]	; (8005f00 <__sfp_lock_release+0x8>)
 8005efa:	f000 b8ae 	b.w	800605a <__retarget_lock_release_recursive>
 8005efe:	bf00      	nop
 8005f00:	200001e5 	.word	0x200001e5

08005f04 <__sinit_lock_acquire>:
 8005f04:	4801      	ldr	r0, [pc, #4]	; (8005f0c <__sinit_lock_acquire+0x8>)
 8005f06:	f000 b8a7 	b.w	8006058 <__retarget_lock_acquire_recursive>
 8005f0a:	bf00      	nop
 8005f0c:	200001e6 	.word	0x200001e6

08005f10 <__sinit_lock_release>:
 8005f10:	4801      	ldr	r0, [pc, #4]	; (8005f18 <__sinit_lock_release+0x8>)
 8005f12:	f000 b8a2 	b.w	800605a <__retarget_lock_release_recursive>
 8005f16:	bf00      	nop
 8005f18:	200001e6 	.word	0x200001e6

08005f1c <__sinit>:
 8005f1c:	b510      	push	{r4, lr}
 8005f1e:	4604      	mov	r4, r0
 8005f20:	f7ff fff0 	bl	8005f04 <__sinit_lock_acquire>
 8005f24:	69a3      	ldr	r3, [r4, #24]
 8005f26:	b11b      	cbz	r3, 8005f30 <__sinit+0x14>
 8005f28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f2c:	f7ff bff0 	b.w	8005f10 <__sinit_lock_release>
 8005f30:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005f34:	6523      	str	r3, [r4, #80]	; 0x50
 8005f36:	4b13      	ldr	r3, [pc, #76]	; (8005f84 <__sinit+0x68>)
 8005f38:	4a13      	ldr	r2, [pc, #76]	; (8005f88 <__sinit+0x6c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	62a2      	str	r2, [r4, #40]	; 0x28
 8005f3e:	42a3      	cmp	r3, r4
 8005f40:	bf04      	itt	eq
 8005f42:	2301      	moveq	r3, #1
 8005f44:	61a3      	streq	r3, [r4, #24]
 8005f46:	4620      	mov	r0, r4
 8005f48:	f000 f820 	bl	8005f8c <__sfp>
 8005f4c:	6060      	str	r0, [r4, #4]
 8005f4e:	4620      	mov	r0, r4
 8005f50:	f000 f81c 	bl	8005f8c <__sfp>
 8005f54:	60a0      	str	r0, [r4, #8]
 8005f56:	4620      	mov	r0, r4
 8005f58:	f000 f818 	bl	8005f8c <__sfp>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	60e0      	str	r0, [r4, #12]
 8005f60:	2104      	movs	r1, #4
 8005f62:	6860      	ldr	r0, [r4, #4]
 8005f64:	f7ff ff82 	bl	8005e6c <std>
 8005f68:	68a0      	ldr	r0, [r4, #8]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	2109      	movs	r1, #9
 8005f6e:	f7ff ff7d 	bl	8005e6c <std>
 8005f72:	68e0      	ldr	r0, [r4, #12]
 8005f74:	2202      	movs	r2, #2
 8005f76:	2112      	movs	r1, #18
 8005f78:	f7ff ff78 	bl	8005e6c <std>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	61a3      	str	r3, [r4, #24]
 8005f80:	e7d2      	b.n	8005f28 <__sinit+0xc>
 8005f82:	bf00      	nop
 8005f84:	080268a8 	.word	0x080268a8
 8005f88:	08005eb5 	.word	0x08005eb5

08005f8c <__sfp>:
 8005f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f8e:	4607      	mov	r7, r0
 8005f90:	f7ff ffac 	bl	8005eec <__sfp_lock_acquire>
 8005f94:	4b1e      	ldr	r3, [pc, #120]	; (8006010 <__sfp+0x84>)
 8005f96:	681e      	ldr	r6, [r3, #0]
 8005f98:	69b3      	ldr	r3, [r6, #24]
 8005f9a:	b913      	cbnz	r3, 8005fa2 <__sfp+0x16>
 8005f9c:	4630      	mov	r0, r6
 8005f9e:	f7ff ffbd 	bl	8005f1c <__sinit>
 8005fa2:	3648      	adds	r6, #72	; 0x48
 8005fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005fa8:	3b01      	subs	r3, #1
 8005faa:	d503      	bpl.n	8005fb4 <__sfp+0x28>
 8005fac:	6833      	ldr	r3, [r6, #0]
 8005fae:	b30b      	cbz	r3, 8005ff4 <__sfp+0x68>
 8005fb0:	6836      	ldr	r6, [r6, #0]
 8005fb2:	e7f7      	b.n	8005fa4 <__sfp+0x18>
 8005fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005fb8:	b9d5      	cbnz	r5, 8005ff0 <__sfp+0x64>
 8005fba:	4b16      	ldr	r3, [pc, #88]	; (8006014 <__sfp+0x88>)
 8005fbc:	60e3      	str	r3, [r4, #12]
 8005fbe:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005fc2:	6665      	str	r5, [r4, #100]	; 0x64
 8005fc4:	f000 f847 	bl	8006056 <__retarget_lock_init_recursive>
 8005fc8:	f7ff ff96 	bl	8005ef8 <__sfp_lock_release>
 8005fcc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005fd0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005fd4:	6025      	str	r5, [r4, #0]
 8005fd6:	61a5      	str	r5, [r4, #24]
 8005fd8:	2208      	movs	r2, #8
 8005fda:	4629      	mov	r1, r5
 8005fdc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005fe0:	f7ff fd0c 	bl	80059fc <memset>
 8005fe4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005fe8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005fec:	4620      	mov	r0, r4
 8005fee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ff0:	3468      	adds	r4, #104	; 0x68
 8005ff2:	e7d9      	b.n	8005fa8 <__sfp+0x1c>
 8005ff4:	2104      	movs	r1, #4
 8005ff6:	4638      	mov	r0, r7
 8005ff8:	f7ff ff62 	bl	8005ec0 <__sfmoreglue>
 8005ffc:	4604      	mov	r4, r0
 8005ffe:	6030      	str	r0, [r6, #0]
 8006000:	2800      	cmp	r0, #0
 8006002:	d1d5      	bne.n	8005fb0 <__sfp+0x24>
 8006004:	f7ff ff78 	bl	8005ef8 <__sfp_lock_release>
 8006008:	230c      	movs	r3, #12
 800600a:	603b      	str	r3, [r7, #0]
 800600c:	e7ee      	b.n	8005fec <__sfp+0x60>
 800600e:	bf00      	nop
 8006010:	080268a8 	.word	0x080268a8
 8006014:	ffff0001 	.word	0xffff0001

08006018 <_fwalk_reent>:
 8006018:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800601c:	4606      	mov	r6, r0
 800601e:	4688      	mov	r8, r1
 8006020:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006024:	2700      	movs	r7, #0
 8006026:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800602a:	f1b9 0901 	subs.w	r9, r9, #1
 800602e:	d505      	bpl.n	800603c <_fwalk_reent+0x24>
 8006030:	6824      	ldr	r4, [r4, #0]
 8006032:	2c00      	cmp	r4, #0
 8006034:	d1f7      	bne.n	8006026 <_fwalk_reent+0xe>
 8006036:	4638      	mov	r0, r7
 8006038:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800603c:	89ab      	ldrh	r3, [r5, #12]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d907      	bls.n	8006052 <_fwalk_reent+0x3a>
 8006042:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006046:	3301      	adds	r3, #1
 8006048:	d003      	beq.n	8006052 <_fwalk_reent+0x3a>
 800604a:	4629      	mov	r1, r5
 800604c:	4630      	mov	r0, r6
 800604e:	47c0      	blx	r8
 8006050:	4307      	orrs	r7, r0
 8006052:	3568      	adds	r5, #104	; 0x68
 8006054:	e7e9      	b.n	800602a <_fwalk_reent+0x12>

08006056 <__retarget_lock_init_recursive>:
 8006056:	4770      	bx	lr

08006058 <__retarget_lock_acquire_recursive>:
 8006058:	4770      	bx	lr

0800605a <__retarget_lock_release_recursive>:
 800605a:	4770      	bx	lr

0800605c <__swhatbuf_r>:
 800605c:	b570      	push	{r4, r5, r6, lr}
 800605e:	460e      	mov	r6, r1
 8006060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006064:	2900      	cmp	r1, #0
 8006066:	b096      	sub	sp, #88	; 0x58
 8006068:	4614      	mov	r4, r2
 800606a:	461d      	mov	r5, r3
 800606c:	da08      	bge.n	8006080 <__swhatbuf_r+0x24>
 800606e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	602a      	str	r2, [r5, #0]
 8006076:	061a      	lsls	r2, r3, #24
 8006078:	d410      	bmi.n	800609c <__swhatbuf_r+0x40>
 800607a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800607e:	e00e      	b.n	800609e <__swhatbuf_r+0x42>
 8006080:	466a      	mov	r2, sp
 8006082:	f000 fdf1 	bl	8006c68 <_fstat_r>
 8006086:	2800      	cmp	r0, #0
 8006088:	dbf1      	blt.n	800606e <__swhatbuf_r+0x12>
 800608a:	9a01      	ldr	r2, [sp, #4]
 800608c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006090:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006094:	425a      	negs	r2, r3
 8006096:	415a      	adcs	r2, r3
 8006098:	602a      	str	r2, [r5, #0]
 800609a:	e7ee      	b.n	800607a <__swhatbuf_r+0x1e>
 800609c:	2340      	movs	r3, #64	; 0x40
 800609e:	2000      	movs	r0, #0
 80060a0:	6023      	str	r3, [r4, #0]
 80060a2:	b016      	add	sp, #88	; 0x58
 80060a4:	bd70      	pop	{r4, r5, r6, pc}
	...

080060a8 <__smakebuf_r>:
 80060a8:	898b      	ldrh	r3, [r1, #12]
 80060aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80060ac:	079d      	lsls	r5, r3, #30
 80060ae:	4606      	mov	r6, r0
 80060b0:	460c      	mov	r4, r1
 80060b2:	d507      	bpl.n	80060c4 <__smakebuf_r+0x1c>
 80060b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80060b8:	6023      	str	r3, [r4, #0]
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	2301      	movs	r3, #1
 80060be:	6163      	str	r3, [r4, #20]
 80060c0:	b002      	add	sp, #8
 80060c2:	bd70      	pop	{r4, r5, r6, pc}
 80060c4:	ab01      	add	r3, sp, #4
 80060c6:	466a      	mov	r2, sp
 80060c8:	f7ff ffc8 	bl	800605c <__swhatbuf_r>
 80060cc:	9900      	ldr	r1, [sp, #0]
 80060ce:	4605      	mov	r5, r0
 80060d0:	4630      	mov	r0, r6
 80060d2:	f000 f895 	bl	8006200 <_malloc_r>
 80060d6:	b948      	cbnz	r0, 80060ec <__smakebuf_r+0x44>
 80060d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060dc:	059a      	lsls	r2, r3, #22
 80060de:	d4ef      	bmi.n	80060c0 <__smakebuf_r+0x18>
 80060e0:	f023 0303 	bic.w	r3, r3, #3
 80060e4:	f043 0302 	orr.w	r3, r3, #2
 80060e8:	81a3      	strh	r3, [r4, #12]
 80060ea:	e7e3      	b.n	80060b4 <__smakebuf_r+0xc>
 80060ec:	4b0d      	ldr	r3, [pc, #52]	; (8006124 <__smakebuf_r+0x7c>)
 80060ee:	62b3      	str	r3, [r6, #40]	; 0x28
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	6020      	str	r0, [r4, #0]
 80060f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f8:	81a3      	strh	r3, [r4, #12]
 80060fa:	9b00      	ldr	r3, [sp, #0]
 80060fc:	6163      	str	r3, [r4, #20]
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	6120      	str	r0, [r4, #16]
 8006102:	b15b      	cbz	r3, 800611c <__smakebuf_r+0x74>
 8006104:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006108:	4630      	mov	r0, r6
 800610a:	f000 fdbf 	bl	8006c8c <_isatty_r>
 800610e:	b128      	cbz	r0, 800611c <__smakebuf_r+0x74>
 8006110:	89a3      	ldrh	r3, [r4, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	f043 0301 	orr.w	r3, r3, #1
 800611a:	81a3      	strh	r3, [r4, #12]
 800611c:	89a0      	ldrh	r0, [r4, #12]
 800611e:	4305      	orrs	r5, r0
 8006120:	81a5      	strh	r5, [r4, #12]
 8006122:	e7cd      	b.n	80060c0 <__smakebuf_r+0x18>
 8006124:	08005eb5 	.word	0x08005eb5

08006128 <_free_r>:
 8006128:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800612a:	2900      	cmp	r1, #0
 800612c:	d044      	beq.n	80061b8 <_free_r+0x90>
 800612e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006132:	9001      	str	r0, [sp, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	f1a1 0404 	sub.w	r4, r1, #4
 800613a:	bfb8      	it	lt
 800613c:	18e4      	addlt	r4, r4, r3
 800613e:	f000 fdef 	bl	8006d20 <__malloc_lock>
 8006142:	4a1e      	ldr	r2, [pc, #120]	; (80061bc <_free_r+0x94>)
 8006144:	9801      	ldr	r0, [sp, #4]
 8006146:	6813      	ldr	r3, [r2, #0]
 8006148:	b933      	cbnz	r3, 8006158 <_free_r+0x30>
 800614a:	6063      	str	r3, [r4, #4]
 800614c:	6014      	str	r4, [r2, #0]
 800614e:	b003      	add	sp, #12
 8006150:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006154:	f000 bdea 	b.w	8006d2c <__malloc_unlock>
 8006158:	42a3      	cmp	r3, r4
 800615a:	d908      	bls.n	800616e <_free_r+0x46>
 800615c:	6825      	ldr	r5, [r4, #0]
 800615e:	1961      	adds	r1, r4, r5
 8006160:	428b      	cmp	r3, r1
 8006162:	bf01      	itttt	eq
 8006164:	6819      	ldreq	r1, [r3, #0]
 8006166:	685b      	ldreq	r3, [r3, #4]
 8006168:	1949      	addeq	r1, r1, r5
 800616a:	6021      	streq	r1, [r4, #0]
 800616c:	e7ed      	b.n	800614a <_free_r+0x22>
 800616e:	461a      	mov	r2, r3
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	b10b      	cbz	r3, 8006178 <_free_r+0x50>
 8006174:	42a3      	cmp	r3, r4
 8006176:	d9fa      	bls.n	800616e <_free_r+0x46>
 8006178:	6811      	ldr	r1, [r2, #0]
 800617a:	1855      	adds	r5, r2, r1
 800617c:	42a5      	cmp	r5, r4
 800617e:	d10b      	bne.n	8006198 <_free_r+0x70>
 8006180:	6824      	ldr	r4, [r4, #0]
 8006182:	4421      	add	r1, r4
 8006184:	1854      	adds	r4, r2, r1
 8006186:	42a3      	cmp	r3, r4
 8006188:	6011      	str	r1, [r2, #0]
 800618a:	d1e0      	bne.n	800614e <_free_r+0x26>
 800618c:	681c      	ldr	r4, [r3, #0]
 800618e:	685b      	ldr	r3, [r3, #4]
 8006190:	6053      	str	r3, [r2, #4]
 8006192:	4421      	add	r1, r4
 8006194:	6011      	str	r1, [r2, #0]
 8006196:	e7da      	b.n	800614e <_free_r+0x26>
 8006198:	d902      	bls.n	80061a0 <_free_r+0x78>
 800619a:	230c      	movs	r3, #12
 800619c:	6003      	str	r3, [r0, #0]
 800619e:	e7d6      	b.n	800614e <_free_r+0x26>
 80061a0:	6825      	ldr	r5, [r4, #0]
 80061a2:	1961      	adds	r1, r4, r5
 80061a4:	428b      	cmp	r3, r1
 80061a6:	bf04      	itt	eq
 80061a8:	6819      	ldreq	r1, [r3, #0]
 80061aa:	685b      	ldreq	r3, [r3, #4]
 80061ac:	6063      	str	r3, [r4, #4]
 80061ae:	bf04      	itt	eq
 80061b0:	1949      	addeq	r1, r1, r5
 80061b2:	6021      	streq	r1, [r4, #0]
 80061b4:	6054      	str	r4, [r2, #4]
 80061b6:	e7ca      	b.n	800614e <_free_r+0x26>
 80061b8:	b003      	add	sp, #12
 80061ba:	bd30      	pop	{r4, r5, pc}
 80061bc:	200001e8 	.word	0x200001e8

080061c0 <sbrk_aligned>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	4e0e      	ldr	r6, [pc, #56]	; (80061fc <sbrk_aligned+0x3c>)
 80061c4:	460c      	mov	r4, r1
 80061c6:	6831      	ldr	r1, [r6, #0]
 80061c8:	4605      	mov	r5, r0
 80061ca:	b911      	cbnz	r1, 80061d2 <sbrk_aligned+0x12>
 80061cc:	f000 fcd6 	bl	8006b7c <_sbrk_r>
 80061d0:	6030      	str	r0, [r6, #0]
 80061d2:	4621      	mov	r1, r4
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 fcd1 	bl	8006b7c <_sbrk_r>
 80061da:	1c43      	adds	r3, r0, #1
 80061dc:	d00a      	beq.n	80061f4 <sbrk_aligned+0x34>
 80061de:	1cc4      	adds	r4, r0, #3
 80061e0:	f024 0403 	bic.w	r4, r4, #3
 80061e4:	42a0      	cmp	r0, r4
 80061e6:	d007      	beq.n	80061f8 <sbrk_aligned+0x38>
 80061e8:	1a21      	subs	r1, r4, r0
 80061ea:	4628      	mov	r0, r5
 80061ec:	f000 fcc6 	bl	8006b7c <_sbrk_r>
 80061f0:	3001      	adds	r0, #1
 80061f2:	d101      	bne.n	80061f8 <sbrk_aligned+0x38>
 80061f4:	f04f 34ff 	mov.w	r4, #4294967295
 80061f8:	4620      	mov	r0, r4
 80061fa:	bd70      	pop	{r4, r5, r6, pc}
 80061fc:	200001ec 	.word	0x200001ec

08006200 <_malloc_r>:
 8006200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006204:	1ccd      	adds	r5, r1, #3
 8006206:	f025 0503 	bic.w	r5, r5, #3
 800620a:	3508      	adds	r5, #8
 800620c:	2d0c      	cmp	r5, #12
 800620e:	bf38      	it	cc
 8006210:	250c      	movcc	r5, #12
 8006212:	2d00      	cmp	r5, #0
 8006214:	4607      	mov	r7, r0
 8006216:	db01      	blt.n	800621c <_malloc_r+0x1c>
 8006218:	42a9      	cmp	r1, r5
 800621a:	d905      	bls.n	8006228 <_malloc_r+0x28>
 800621c:	230c      	movs	r3, #12
 800621e:	603b      	str	r3, [r7, #0]
 8006220:	2600      	movs	r6, #0
 8006222:	4630      	mov	r0, r6
 8006224:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006228:	4e2e      	ldr	r6, [pc, #184]	; (80062e4 <_malloc_r+0xe4>)
 800622a:	f000 fd79 	bl	8006d20 <__malloc_lock>
 800622e:	6833      	ldr	r3, [r6, #0]
 8006230:	461c      	mov	r4, r3
 8006232:	bb34      	cbnz	r4, 8006282 <_malloc_r+0x82>
 8006234:	4629      	mov	r1, r5
 8006236:	4638      	mov	r0, r7
 8006238:	f7ff ffc2 	bl	80061c0 <sbrk_aligned>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	4604      	mov	r4, r0
 8006240:	d14d      	bne.n	80062de <_malloc_r+0xde>
 8006242:	6834      	ldr	r4, [r6, #0]
 8006244:	4626      	mov	r6, r4
 8006246:	2e00      	cmp	r6, #0
 8006248:	d140      	bne.n	80062cc <_malloc_r+0xcc>
 800624a:	6823      	ldr	r3, [r4, #0]
 800624c:	4631      	mov	r1, r6
 800624e:	4638      	mov	r0, r7
 8006250:	eb04 0803 	add.w	r8, r4, r3
 8006254:	f000 fc92 	bl	8006b7c <_sbrk_r>
 8006258:	4580      	cmp	r8, r0
 800625a:	d13a      	bne.n	80062d2 <_malloc_r+0xd2>
 800625c:	6821      	ldr	r1, [r4, #0]
 800625e:	3503      	adds	r5, #3
 8006260:	1a6d      	subs	r5, r5, r1
 8006262:	f025 0503 	bic.w	r5, r5, #3
 8006266:	3508      	adds	r5, #8
 8006268:	2d0c      	cmp	r5, #12
 800626a:	bf38      	it	cc
 800626c:	250c      	movcc	r5, #12
 800626e:	4629      	mov	r1, r5
 8006270:	4638      	mov	r0, r7
 8006272:	f7ff ffa5 	bl	80061c0 <sbrk_aligned>
 8006276:	3001      	adds	r0, #1
 8006278:	d02b      	beq.n	80062d2 <_malloc_r+0xd2>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	442b      	add	r3, r5
 800627e:	6023      	str	r3, [r4, #0]
 8006280:	e00e      	b.n	80062a0 <_malloc_r+0xa0>
 8006282:	6822      	ldr	r2, [r4, #0]
 8006284:	1b52      	subs	r2, r2, r5
 8006286:	d41e      	bmi.n	80062c6 <_malloc_r+0xc6>
 8006288:	2a0b      	cmp	r2, #11
 800628a:	d916      	bls.n	80062ba <_malloc_r+0xba>
 800628c:	1961      	adds	r1, r4, r5
 800628e:	42a3      	cmp	r3, r4
 8006290:	6025      	str	r5, [r4, #0]
 8006292:	bf18      	it	ne
 8006294:	6059      	strne	r1, [r3, #4]
 8006296:	6863      	ldr	r3, [r4, #4]
 8006298:	bf08      	it	eq
 800629a:	6031      	streq	r1, [r6, #0]
 800629c:	5162      	str	r2, [r4, r5]
 800629e:	604b      	str	r3, [r1, #4]
 80062a0:	4638      	mov	r0, r7
 80062a2:	f104 060b 	add.w	r6, r4, #11
 80062a6:	f000 fd41 	bl	8006d2c <__malloc_unlock>
 80062aa:	f026 0607 	bic.w	r6, r6, #7
 80062ae:	1d23      	adds	r3, r4, #4
 80062b0:	1af2      	subs	r2, r6, r3
 80062b2:	d0b6      	beq.n	8006222 <_malloc_r+0x22>
 80062b4:	1b9b      	subs	r3, r3, r6
 80062b6:	50a3      	str	r3, [r4, r2]
 80062b8:	e7b3      	b.n	8006222 <_malloc_r+0x22>
 80062ba:	6862      	ldr	r2, [r4, #4]
 80062bc:	42a3      	cmp	r3, r4
 80062be:	bf0c      	ite	eq
 80062c0:	6032      	streq	r2, [r6, #0]
 80062c2:	605a      	strne	r2, [r3, #4]
 80062c4:	e7ec      	b.n	80062a0 <_malloc_r+0xa0>
 80062c6:	4623      	mov	r3, r4
 80062c8:	6864      	ldr	r4, [r4, #4]
 80062ca:	e7b2      	b.n	8006232 <_malloc_r+0x32>
 80062cc:	4634      	mov	r4, r6
 80062ce:	6876      	ldr	r6, [r6, #4]
 80062d0:	e7b9      	b.n	8006246 <_malloc_r+0x46>
 80062d2:	230c      	movs	r3, #12
 80062d4:	603b      	str	r3, [r7, #0]
 80062d6:	4638      	mov	r0, r7
 80062d8:	f000 fd28 	bl	8006d2c <__malloc_unlock>
 80062dc:	e7a1      	b.n	8006222 <_malloc_r+0x22>
 80062de:	6025      	str	r5, [r4, #0]
 80062e0:	e7de      	b.n	80062a0 <_malloc_r+0xa0>
 80062e2:	bf00      	nop
 80062e4:	200001e8 	.word	0x200001e8

080062e8 <__ssputs_r>:
 80062e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80062ec:	688e      	ldr	r6, [r1, #8]
 80062ee:	429e      	cmp	r6, r3
 80062f0:	4682      	mov	sl, r0
 80062f2:	460c      	mov	r4, r1
 80062f4:	4690      	mov	r8, r2
 80062f6:	461f      	mov	r7, r3
 80062f8:	d838      	bhi.n	800636c <__ssputs_r+0x84>
 80062fa:	898a      	ldrh	r2, [r1, #12]
 80062fc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006300:	d032      	beq.n	8006368 <__ssputs_r+0x80>
 8006302:	6825      	ldr	r5, [r4, #0]
 8006304:	6909      	ldr	r1, [r1, #16]
 8006306:	eba5 0901 	sub.w	r9, r5, r1
 800630a:	6965      	ldr	r5, [r4, #20]
 800630c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006310:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006314:	3301      	adds	r3, #1
 8006316:	444b      	add	r3, r9
 8006318:	106d      	asrs	r5, r5, #1
 800631a:	429d      	cmp	r5, r3
 800631c:	bf38      	it	cc
 800631e:	461d      	movcc	r5, r3
 8006320:	0553      	lsls	r3, r2, #21
 8006322:	d531      	bpl.n	8006388 <__ssputs_r+0xa0>
 8006324:	4629      	mov	r1, r5
 8006326:	f7ff ff6b 	bl	8006200 <_malloc_r>
 800632a:	4606      	mov	r6, r0
 800632c:	b950      	cbnz	r0, 8006344 <__ssputs_r+0x5c>
 800632e:	230c      	movs	r3, #12
 8006330:	f8ca 3000 	str.w	r3, [sl]
 8006334:	89a3      	ldrh	r3, [r4, #12]
 8006336:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800633a:	81a3      	strh	r3, [r4, #12]
 800633c:	f04f 30ff 	mov.w	r0, #4294967295
 8006340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006344:	6921      	ldr	r1, [r4, #16]
 8006346:	464a      	mov	r2, r9
 8006348:	f000 fcc2 	bl	8006cd0 <memcpy>
 800634c:	89a3      	ldrh	r3, [r4, #12]
 800634e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006356:	81a3      	strh	r3, [r4, #12]
 8006358:	6126      	str	r6, [r4, #16]
 800635a:	6165      	str	r5, [r4, #20]
 800635c:	444e      	add	r6, r9
 800635e:	eba5 0509 	sub.w	r5, r5, r9
 8006362:	6026      	str	r6, [r4, #0]
 8006364:	60a5      	str	r5, [r4, #8]
 8006366:	463e      	mov	r6, r7
 8006368:	42be      	cmp	r6, r7
 800636a:	d900      	bls.n	800636e <__ssputs_r+0x86>
 800636c:	463e      	mov	r6, r7
 800636e:	6820      	ldr	r0, [r4, #0]
 8006370:	4632      	mov	r2, r6
 8006372:	4641      	mov	r1, r8
 8006374:	f000 fcba 	bl	8006cec <memmove>
 8006378:	68a3      	ldr	r3, [r4, #8]
 800637a:	1b9b      	subs	r3, r3, r6
 800637c:	60a3      	str	r3, [r4, #8]
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	4433      	add	r3, r6
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	2000      	movs	r0, #0
 8006386:	e7db      	b.n	8006340 <__ssputs_r+0x58>
 8006388:	462a      	mov	r2, r5
 800638a:	f000 fcd5 	bl	8006d38 <_realloc_r>
 800638e:	4606      	mov	r6, r0
 8006390:	2800      	cmp	r0, #0
 8006392:	d1e1      	bne.n	8006358 <__ssputs_r+0x70>
 8006394:	6921      	ldr	r1, [r4, #16]
 8006396:	4650      	mov	r0, sl
 8006398:	f7ff fec6 	bl	8006128 <_free_r>
 800639c:	e7c7      	b.n	800632e <__ssputs_r+0x46>
	...

080063a0 <_svfiprintf_r>:
 80063a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063a4:	4698      	mov	r8, r3
 80063a6:	898b      	ldrh	r3, [r1, #12]
 80063a8:	061b      	lsls	r3, r3, #24
 80063aa:	b09d      	sub	sp, #116	; 0x74
 80063ac:	4607      	mov	r7, r0
 80063ae:	460d      	mov	r5, r1
 80063b0:	4614      	mov	r4, r2
 80063b2:	d50e      	bpl.n	80063d2 <_svfiprintf_r+0x32>
 80063b4:	690b      	ldr	r3, [r1, #16]
 80063b6:	b963      	cbnz	r3, 80063d2 <_svfiprintf_r+0x32>
 80063b8:	2140      	movs	r1, #64	; 0x40
 80063ba:	f7ff ff21 	bl	8006200 <_malloc_r>
 80063be:	6028      	str	r0, [r5, #0]
 80063c0:	6128      	str	r0, [r5, #16]
 80063c2:	b920      	cbnz	r0, 80063ce <_svfiprintf_r+0x2e>
 80063c4:	230c      	movs	r3, #12
 80063c6:	603b      	str	r3, [r7, #0]
 80063c8:	f04f 30ff 	mov.w	r0, #4294967295
 80063cc:	e0d1      	b.n	8006572 <_svfiprintf_r+0x1d2>
 80063ce:	2340      	movs	r3, #64	; 0x40
 80063d0:	616b      	str	r3, [r5, #20]
 80063d2:	2300      	movs	r3, #0
 80063d4:	9309      	str	r3, [sp, #36]	; 0x24
 80063d6:	2320      	movs	r3, #32
 80063d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80063dc:	f8cd 800c 	str.w	r8, [sp, #12]
 80063e0:	2330      	movs	r3, #48	; 0x30
 80063e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800658c <_svfiprintf_r+0x1ec>
 80063e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80063ea:	f04f 0901 	mov.w	r9, #1
 80063ee:	4623      	mov	r3, r4
 80063f0:	469a      	mov	sl, r3
 80063f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80063f6:	b10a      	cbz	r2, 80063fc <_svfiprintf_r+0x5c>
 80063f8:	2a25      	cmp	r2, #37	; 0x25
 80063fa:	d1f9      	bne.n	80063f0 <_svfiprintf_r+0x50>
 80063fc:	ebba 0b04 	subs.w	fp, sl, r4
 8006400:	d00b      	beq.n	800641a <_svfiprintf_r+0x7a>
 8006402:	465b      	mov	r3, fp
 8006404:	4622      	mov	r2, r4
 8006406:	4629      	mov	r1, r5
 8006408:	4638      	mov	r0, r7
 800640a:	f7ff ff6d 	bl	80062e8 <__ssputs_r>
 800640e:	3001      	adds	r0, #1
 8006410:	f000 80aa 	beq.w	8006568 <_svfiprintf_r+0x1c8>
 8006414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006416:	445a      	add	r2, fp
 8006418:	9209      	str	r2, [sp, #36]	; 0x24
 800641a:	f89a 3000 	ldrb.w	r3, [sl]
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80a2 	beq.w	8006568 <_svfiprintf_r+0x1c8>
 8006424:	2300      	movs	r3, #0
 8006426:	f04f 32ff 	mov.w	r2, #4294967295
 800642a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800642e:	f10a 0a01 	add.w	sl, sl, #1
 8006432:	9304      	str	r3, [sp, #16]
 8006434:	9307      	str	r3, [sp, #28]
 8006436:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800643a:	931a      	str	r3, [sp, #104]	; 0x68
 800643c:	4654      	mov	r4, sl
 800643e:	2205      	movs	r2, #5
 8006440:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006444:	4851      	ldr	r0, [pc, #324]	; (800658c <_svfiprintf_r+0x1ec>)
 8006446:	f7f9 fedb 	bl	8000200 <memchr>
 800644a:	9a04      	ldr	r2, [sp, #16]
 800644c:	b9d8      	cbnz	r0, 8006486 <_svfiprintf_r+0xe6>
 800644e:	06d0      	lsls	r0, r2, #27
 8006450:	bf44      	itt	mi
 8006452:	2320      	movmi	r3, #32
 8006454:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006458:	0711      	lsls	r1, r2, #28
 800645a:	bf44      	itt	mi
 800645c:	232b      	movmi	r3, #43	; 0x2b
 800645e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006462:	f89a 3000 	ldrb.w	r3, [sl]
 8006466:	2b2a      	cmp	r3, #42	; 0x2a
 8006468:	d015      	beq.n	8006496 <_svfiprintf_r+0xf6>
 800646a:	9a07      	ldr	r2, [sp, #28]
 800646c:	4654      	mov	r4, sl
 800646e:	2000      	movs	r0, #0
 8006470:	f04f 0c0a 	mov.w	ip, #10
 8006474:	4621      	mov	r1, r4
 8006476:	f811 3b01 	ldrb.w	r3, [r1], #1
 800647a:	3b30      	subs	r3, #48	; 0x30
 800647c:	2b09      	cmp	r3, #9
 800647e:	d94e      	bls.n	800651e <_svfiprintf_r+0x17e>
 8006480:	b1b0      	cbz	r0, 80064b0 <_svfiprintf_r+0x110>
 8006482:	9207      	str	r2, [sp, #28]
 8006484:	e014      	b.n	80064b0 <_svfiprintf_r+0x110>
 8006486:	eba0 0308 	sub.w	r3, r0, r8
 800648a:	fa09 f303 	lsl.w	r3, r9, r3
 800648e:	4313      	orrs	r3, r2
 8006490:	9304      	str	r3, [sp, #16]
 8006492:	46a2      	mov	sl, r4
 8006494:	e7d2      	b.n	800643c <_svfiprintf_r+0x9c>
 8006496:	9b03      	ldr	r3, [sp, #12]
 8006498:	1d19      	adds	r1, r3, #4
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	9103      	str	r1, [sp, #12]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	bfbb      	ittet	lt
 80064a2:	425b      	neglt	r3, r3
 80064a4:	f042 0202 	orrlt.w	r2, r2, #2
 80064a8:	9307      	strge	r3, [sp, #28]
 80064aa:	9307      	strlt	r3, [sp, #28]
 80064ac:	bfb8      	it	lt
 80064ae:	9204      	strlt	r2, [sp, #16]
 80064b0:	7823      	ldrb	r3, [r4, #0]
 80064b2:	2b2e      	cmp	r3, #46	; 0x2e
 80064b4:	d10c      	bne.n	80064d0 <_svfiprintf_r+0x130>
 80064b6:	7863      	ldrb	r3, [r4, #1]
 80064b8:	2b2a      	cmp	r3, #42	; 0x2a
 80064ba:	d135      	bne.n	8006528 <_svfiprintf_r+0x188>
 80064bc:	9b03      	ldr	r3, [sp, #12]
 80064be:	1d1a      	adds	r2, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	9203      	str	r2, [sp, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	bfb8      	it	lt
 80064c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80064cc:	3402      	adds	r4, #2
 80064ce:	9305      	str	r3, [sp, #20]
 80064d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800659c <_svfiprintf_r+0x1fc>
 80064d4:	7821      	ldrb	r1, [r4, #0]
 80064d6:	2203      	movs	r2, #3
 80064d8:	4650      	mov	r0, sl
 80064da:	f7f9 fe91 	bl	8000200 <memchr>
 80064de:	b140      	cbz	r0, 80064f2 <_svfiprintf_r+0x152>
 80064e0:	2340      	movs	r3, #64	; 0x40
 80064e2:	eba0 000a 	sub.w	r0, r0, sl
 80064e6:	fa03 f000 	lsl.w	r0, r3, r0
 80064ea:	9b04      	ldr	r3, [sp, #16]
 80064ec:	4303      	orrs	r3, r0
 80064ee:	3401      	adds	r4, #1
 80064f0:	9304      	str	r3, [sp, #16]
 80064f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80064f6:	4826      	ldr	r0, [pc, #152]	; (8006590 <_svfiprintf_r+0x1f0>)
 80064f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80064fc:	2206      	movs	r2, #6
 80064fe:	f7f9 fe7f 	bl	8000200 <memchr>
 8006502:	2800      	cmp	r0, #0
 8006504:	d038      	beq.n	8006578 <_svfiprintf_r+0x1d8>
 8006506:	4b23      	ldr	r3, [pc, #140]	; (8006594 <_svfiprintf_r+0x1f4>)
 8006508:	bb1b      	cbnz	r3, 8006552 <_svfiprintf_r+0x1b2>
 800650a:	9b03      	ldr	r3, [sp, #12]
 800650c:	3307      	adds	r3, #7
 800650e:	f023 0307 	bic.w	r3, r3, #7
 8006512:	3308      	adds	r3, #8
 8006514:	9303      	str	r3, [sp, #12]
 8006516:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006518:	4433      	add	r3, r6
 800651a:	9309      	str	r3, [sp, #36]	; 0x24
 800651c:	e767      	b.n	80063ee <_svfiprintf_r+0x4e>
 800651e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006522:	460c      	mov	r4, r1
 8006524:	2001      	movs	r0, #1
 8006526:	e7a5      	b.n	8006474 <_svfiprintf_r+0xd4>
 8006528:	2300      	movs	r3, #0
 800652a:	3401      	adds	r4, #1
 800652c:	9305      	str	r3, [sp, #20]
 800652e:	4619      	mov	r1, r3
 8006530:	f04f 0c0a 	mov.w	ip, #10
 8006534:	4620      	mov	r0, r4
 8006536:	f810 2b01 	ldrb.w	r2, [r0], #1
 800653a:	3a30      	subs	r2, #48	; 0x30
 800653c:	2a09      	cmp	r2, #9
 800653e:	d903      	bls.n	8006548 <_svfiprintf_r+0x1a8>
 8006540:	2b00      	cmp	r3, #0
 8006542:	d0c5      	beq.n	80064d0 <_svfiprintf_r+0x130>
 8006544:	9105      	str	r1, [sp, #20]
 8006546:	e7c3      	b.n	80064d0 <_svfiprintf_r+0x130>
 8006548:	fb0c 2101 	mla	r1, ip, r1, r2
 800654c:	4604      	mov	r4, r0
 800654e:	2301      	movs	r3, #1
 8006550:	e7f0      	b.n	8006534 <_svfiprintf_r+0x194>
 8006552:	ab03      	add	r3, sp, #12
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	462a      	mov	r2, r5
 8006558:	4b0f      	ldr	r3, [pc, #60]	; (8006598 <_svfiprintf_r+0x1f8>)
 800655a:	a904      	add	r1, sp, #16
 800655c:	4638      	mov	r0, r7
 800655e:	f3af 8000 	nop.w
 8006562:	1c42      	adds	r2, r0, #1
 8006564:	4606      	mov	r6, r0
 8006566:	d1d6      	bne.n	8006516 <_svfiprintf_r+0x176>
 8006568:	89ab      	ldrh	r3, [r5, #12]
 800656a:	065b      	lsls	r3, r3, #25
 800656c:	f53f af2c 	bmi.w	80063c8 <_svfiprintf_r+0x28>
 8006570:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006572:	b01d      	add	sp, #116	; 0x74
 8006574:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006578:	ab03      	add	r3, sp, #12
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	462a      	mov	r2, r5
 800657e:	4b06      	ldr	r3, [pc, #24]	; (8006598 <_svfiprintf_r+0x1f8>)
 8006580:	a904      	add	r1, sp, #16
 8006582:	4638      	mov	r0, r7
 8006584:	f000 f9d4 	bl	8006930 <_printf_i>
 8006588:	e7eb      	b.n	8006562 <_svfiprintf_r+0x1c2>
 800658a:	bf00      	nop
 800658c:	0802690c 	.word	0x0802690c
 8006590:	08026916 	.word	0x08026916
 8006594:	00000000 	.word	0x00000000
 8006598:	080062e9 	.word	0x080062e9
 800659c:	08026912 	.word	0x08026912

080065a0 <__sfputc_r>:
 80065a0:	6893      	ldr	r3, [r2, #8]
 80065a2:	3b01      	subs	r3, #1
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	b410      	push	{r4}
 80065a8:	6093      	str	r3, [r2, #8]
 80065aa:	da08      	bge.n	80065be <__sfputc_r+0x1e>
 80065ac:	6994      	ldr	r4, [r2, #24]
 80065ae:	42a3      	cmp	r3, r4
 80065b0:	db01      	blt.n	80065b6 <__sfputc_r+0x16>
 80065b2:	290a      	cmp	r1, #10
 80065b4:	d103      	bne.n	80065be <__sfputc_r+0x1e>
 80065b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ba:	f7ff bad5 	b.w	8005b68 <__swbuf_r>
 80065be:	6813      	ldr	r3, [r2, #0]
 80065c0:	1c58      	adds	r0, r3, #1
 80065c2:	6010      	str	r0, [r2, #0]
 80065c4:	7019      	strb	r1, [r3, #0]
 80065c6:	4608      	mov	r0, r1
 80065c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <__sfputs_r>:
 80065ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065d0:	4606      	mov	r6, r0
 80065d2:	460f      	mov	r7, r1
 80065d4:	4614      	mov	r4, r2
 80065d6:	18d5      	adds	r5, r2, r3
 80065d8:	42ac      	cmp	r4, r5
 80065da:	d101      	bne.n	80065e0 <__sfputs_r+0x12>
 80065dc:	2000      	movs	r0, #0
 80065de:	e007      	b.n	80065f0 <__sfputs_r+0x22>
 80065e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e4:	463a      	mov	r2, r7
 80065e6:	4630      	mov	r0, r6
 80065e8:	f7ff ffda 	bl	80065a0 <__sfputc_r>
 80065ec:	1c43      	adds	r3, r0, #1
 80065ee:	d1f3      	bne.n	80065d8 <__sfputs_r+0xa>
 80065f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080065f4 <_vfiprintf_r>:
 80065f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065f8:	460d      	mov	r5, r1
 80065fa:	b09d      	sub	sp, #116	; 0x74
 80065fc:	4614      	mov	r4, r2
 80065fe:	4698      	mov	r8, r3
 8006600:	4606      	mov	r6, r0
 8006602:	b118      	cbz	r0, 800660c <_vfiprintf_r+0x18>
 8006604:	6983      	ldr	r3, [r0, #24]
 8006606:	b90b      	cbnz	r3, 800660c <_vfiprintf_r+0x18>
 8006608:	f7ff fc88 	bl	8005f1c <__sinit>
 800660c:	4b89      	ldr	r3, [pc, #548]	; (8006834 <_vfiprintf_r+0x240>)
 800660e:	429d      	cmp	r5, r3
 8006610:	d11b      	bne.n	800664a <_vfiprintf_r+0x56>
 8006612:	6875      	ldr	r5, [r6, #4]
 8006614:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006616:	07d9      	lsls	r1, r3, #31
 8006618:	d405      	bmi.n	8006626 <_vfiprintf_r+0x32>
 800661a:	89ab      	ldrh	r3, [r5, #12]
 800661c:	059a      	lsls	r2, r3, #22
 800661e:	d402      	bmi.n	8006626 <_vfiprintf_r+0x32>
 8006620:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006622:	f7ff fd19 	bl	8006058 <__retarget_lock_acquire_recursive>
 8006626:	89ab      	ldrh	r3, [r5, #12]
 8006628:	071b      	lsls	r3, r3, #28
 800662a:	d501      	bpl.n	8006630 <_vfiprintf_r+0x3c>
 800662c:	692b      	ldr	r3, [r5, #16]
 800662e:	b9eb      	cbnz	r3, 800666c <_vfiprintf_r+0x78>
 8006630:	4629      	mov	r1, r5
 8006632:	4630      	mov	r0, r6
 8006634:	f7ff faea 	bl	8005c0c <__swsetup_r>
 8006638:	b1c0      	cbz	r0, 800666c <_vfiprintf_r+0x78>
 800663a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800663c:	07dc      	lsls	r4, r3, #31
 800663e:	d50e      	bpl.n	800665e <_vfiprintf_r+0x6a>
 8006640:	f04f 30ff 	mov.w	r0, #4294967295
 8006644:	b01d      	add	sp, #116	; 0x74
 8006646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800664a:	4b7b      	ldr	r3, [pc, #492]	; (8006838 <_vfiprintf_r+0x244>)
 800664c:	429d      	cmp	r5, r3
 800664e:	d101      	bne.n	8006654 <_vfiprintf_r+0x60>
 8006650:	68b5      	ldr	r5, [r6, #8]
 8006652:	e7df      	b.n	8006614 <_vfiprintf_r+0x20>
 8006654:	4b79      	ldr	r3, [pc, #484]	; (800683c <_vfiprintf_r+0x248>)
 8006656:	429d      	cmp	r5, r3
 8006658:	bf08      	it	eq
 800665a:	68f5      	ldreq	r5, [r6, #12]
 800665c:	e7da      	b.n	8006614 <_vfiprintf_r+0x20>
 800665e:	89ab      	ldrh	r3, [r5, #12]
 8006660:	0598      	lsls	r0, r3, #22
 8006662:	d4ed      	bmi.n	8006640 <_vfiprintf_r+0x4c>
 8006664:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006666:	f7ff fcf8 	bl	800605a <__retarget_lock_release_recursive>
 800666a:	e7e9      	b.n	8006640 <_vfiprintf_r+0x4c>
 800666c:	2300      	movs	r3, #0
 800666e:	9309      	str	r3, [sp, #36]	; 0x24
 8006670:	2320      	movs	r3, #32
 8006672:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006676:	f8cd 800c 	str.w	r8, [sp, #12]
 800667a:	2330      	movs	r3, #48	; 0x30
 800667c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006840 <_vfiprintf_r+0x24c>
 8006680:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006684:	f04f 0901 	mov.w	r9, #1
 8006688:	4623      	mov	r3, r4
 800668a:	469a      	mov	sl, r3
 800668c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006690:	b10a      	cbz	r2, 8006696 <_vfiprintf_r+0xa2>
 8006692:	2a25      	cmp	r2, #37	; 0x25
 8006694:	d1f9      	bne.n	800668a <_vfiprintf_r+0x96>
 8006696:	ebba 0b04 	subs.w	fp, sl, r4
 800669a:	d00b      	beq.n	80066b4 <_vfiprintf_r+0xc0>
 800669c:	465b      	mov	r3, fp
 800669e:	4622      	mov	r2, r4
 80066a0:	4629      	mov	r1, r5
 80066a2:	4630      	mov	r0, r6
 80066a4:	f7ff ff93 	bl	80065ce <__sfputs_r>
 80066a8:	3001      	adds	r0, #1
 80066aa:	f000 80aa 	beq.w	8006802 <_vfiprintf_r+0x20e>
 80066ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b0:	445a      	add	r2, fp
 80066b2:	9209      	str	r2, [sp, #36]	; 0x24
 80066b4:	f89a 3000 	ldrb.w	r3, [sl]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	f000 80a2 	beq.w	8006802 <_vfiprintf_r+0x20e>
 80066be:	2300      	movs	r3, #0
 80066c0:	f04f 32ff 	mov.w	r2, #4294967295
 80066c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066c8:	f10a 0a01 	add.w	sl, sl, #1
 80066cc:	9304      	str	r3, [sp, #16]
 80066ce:	9307      	str	r3, [sp, #28]
 80066d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066d4:	931a      	str	r3, [sp, #104]	; 0x68
 80066d6:	4654      	mov	r4, sl
 80066d8:	2205      	movs	r2, #5
 80066da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066de:	4858      	ldr	r0, [pc, #352]	; (8006840 <_vfiprintf_r+0x24c>)
 80066e0:	f7f9 fd8e 	bl	8000200 <memchr>
 80066e4:	9a04      	ldr	r2, [sp, #16]
 80066e6:	b9d8      	cbnz	r0, 8006720 <_vfiprintf_r+0x12c>
 80066e8:	06d1      	lsls	r1, r2, #27
 80066ea:	bf44      	itt	mi
 80066ec:	2320      	movmi	r3, #32
 80066ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066f2:	0713      	lsls	r3, r2, #28
 80066f4:	bf44      	itt	mi
 80066f6:	232b      	movmi	r3, #43	; 0x2b
 80066f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006700:	2b2a      	cmp	r3, #42	; 0x2a
 8006702:	d015      	beq.n	8006730 <_vfiprintf_r+0x13c>
 8006704:	9a07      	ldr	r2, [sp, #28]
 8006706:	4654      	mov	r4, sl
 8006708:	2000      	movs	r0, #0
 800670a:	f04f 0c0a 	mov.w	ip, #10
 800670e:	4621      	mov	r1, r4
 8006710:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006714:	3b30      	subs	r3, #48	; 0x30
 8006716:	2b09      	cmp	r3, #9
 8006718:	d94e      	bls.n	80067b8 <_vfiprintf_r+0x1c4>
 800671a:	b1b0      	cbz	r0, 800674a <_vfiprintf_r+0x156>
 800671c:	9207      	str	r2, [sp, #28]
 800671e:	e014      	b.n	800674a <_vfiprintf_r+0x156>
 8006720:	eba0 0308 	sub.w	r3, r0, r8
 8006724:	fa09 f303 	lsl.w	r3, r9, r3
 8006728:	4313      	orrs	r3, r2
 800672a:	9304      	str	r3, [sp, #16]
 800672c:	46a2      	mov	sl, r4
 800672e:	e7d2      	b.n	80066d6 <_vfiprintf_r+0xe2>
 8006730:	9b03      	ldr	r3, [sp, #12]
 8006732:	1d19      	adds	r1, r3, #4
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	9103      	str	r1, [sp, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	bfbb      	ittet	lt
 800673c:	425b      	neglt	r3, r3
 800673e:	f042 0202 	orrlt.w	r2, r2, #2
 8006742:	9307      	strge	r3, [sp, #28]
 8006744:	9307      	strlt	r3, [sp, #28]
 8006746:	bfb8      	it	lt
 8006748:	9204      	strlt	r2, [sp, #16]
 800674a:	7823      	ldrb	r3, [r4, #0]
 800674c:	2b2e      	cmp	r3, #46	; 0x2e
 800674e:	d10c      	bne.n	800676a <_vfiprintf_r+0x176>
 8006750:	7863      	ldrb	r3, [r4, #1]
 8006752:	2b2a      	cmp	r3, #42	; 0x2a
 8006754:	d135      	bne.n	80067c2 <_vfiprintf_r+0x1ce>
 8006756:	9b03      	ldr	r3, [sp, #12]
 8006758:	1d1a      	adds	r2, r3, #4
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	9203      	str	r2, [sp, #12]
 800675e:	2b00      	cmp	r3, #0
 8006760:	bfb8      	it	lt
 8006762:	f04f 33ff 	movlt.w	r3, #4294967295
 8006766:	3402      	adds	r4, #2
 8006768:	9305      	str	r3, [sp, #20]
 800676a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006850 <_vfiprintf_r+0x25c>
 800676e:	7821      	ldrb	r1, [r4, #0]
 8006770:	2203      	movs	r2, #3
 8006772:	4650      	mov	r0, sl
 8006774:	f7f9 fd44 	bl	8000200 <memchr>
 8006778:	b140      	cbz	r0, 800678c <_vfiprintf_r+0x198>
 800677a:	2340      	movs	r3, #64	; 0x40
 800677c:	eba0 000a 	sub.w	r0, r0, sl
 8006780:	fa03 f000 	lsl.w	r0, r3, r0
 8006784:	9b04      	ldr	r3, [sp, #16]
 8006786:	4303      	orrs	r3, r0
 8006788:	3401      	adds	r4, #1
 800678a:	9304      	str	r3, [sp, #16]
 800678c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006790:	482c      	ldr	r0, [pc, #176]	; (8006844 <_vfiprintf_r+0x250>)
 8006792:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006796:	2206      	movs	r2, #6
 8006798:	f7f9 fd32 	bl	8000200 <memchr>
 800679c:	2800      	cmp	r0, #0
 800679e:	d03f      	beq.n	8006820 <_vfiprintf_r+0x22c>
 80067a0:	4b29      	ldr	r3, [pc, #164]	; (8006848 <_vfiprintf_r+0x254>)
 80067a2:	bb1b      	cbnz	r3, 80067ec <_vfiprintf_r+0x1f8>
 80067a4:	9b03      	ldr	r3, [sp, #12]
 80067a6:	3307      	adds	r3, #7
 80067a8:	f023 0307 	bic.w	r3, r3, #7
 80067ac:	3308      	adds	r3, #8
 80067ae:	9303      	str	r3, [sp, #12]
 80067b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b2:	443b      	add	r3, r7
 80067b4:	9309      	str	r3, [sp, #36]	; 0x24
 80067b6:	e767      	b.n	8006688 <_vfiprintf_r+0x94>
 80067b8:	fb0c 3202 	mla	r2, ip, r2, r3
 80067bc:	460c      	mov	r4, r1
 80067be:	2001      	movs	r0, #1
 80067c0:	e7a5      	b.n	800670e <_vfiprintf_r+0x11a>
 80067c2:	2300      	movs	r3, #0
 80067c4:	3401      	adds	r4, #1
 80067c6:	9305      	str	r3, [sp, #20]
 80067c8:	4619      	mov	r1, r3
 80067ca:	f04f 0c0a 	mov.w	ip, #10
 80067ce:	4620      	mov	r0, r4
 80067d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067d4:	3a30      	subs	r2, #48	; 0x30
 80067d6:	2a09      	cmp	r2, #9
 80067d8:	d903      	bls.n	80067e2 <_vfiprintf_r+0x1ee>
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d0c5      	beq.n	800676a <_vfiprintf_r+0x176>
 80067de:	9105      	str	r1, [sp, #20]
 80067e0:	e7c3      	b.n	800676a <_vfiprintf_r+0x176>
 80067e2:	fb0c 2101 	mla	r1, ip, r1, r2
 80067e6:	4604      	mov	r4, r0
 80067e8:	2301      	movs	r3, #1
 80067ea:	e7f0      	b.n	80067ce <_vfiprintf_r+0x1da>
 80067ec:	ab03      	add	r3, sp, #12
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	462a      	mov	r2, r5
 80067f2:	4b16      	ldr	r3, [pc, #88]	; (800684c <_vfiprintf_r+0x258>)
 80067f4:	a904      	add	r1, sp, #16
 80067f6:	4630      	mov	r0, r6
 80067f8:	f3af 8000 	nop.w
 80067fc:	4607      	mov	r7, r0
 80067fe:	1c78      	adds	r0, r7, #1
 8006800:	d1d6      	bne.n	80067b0 <_vfiprintf_r+0x1bc>
 8006802:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006804:	07d9      	lsls	r1, r3, #31
 8006806:	d405      	bmi.n	8006814 <_vfiprintf_r+0x220>
 8006808:	89ab      	ldrh	r3, [r5, #12]
 800680a:	059a      	lsls	r2, r3, #22
 800680c:	d402      	bmi.n	8006814 <_vfiprintf_r+0x220>
 800680e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006810:	f7ff fc23 	bl	800605a <__retarget_lock_release_recursive>
 8006814:	89ab      	ldrh	r3, [r5, #12]
 8006816:	065b      	lsls	r3, r3, #25
 8006818:	f53f af12 	bmi.w	8006640 <_vfiprintf_r+0x4c>
 800681c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800681e:	e711      	b.n	8006644 <_vfiprintf_r+0x50>
 8006820:	ab03      	add	r3, sp, #12
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	462a      	mov	r2, r5
 8006826:	4b09      	ldr	r3, [pc, #36]	; (800684c <_vfiprintf_r+0x258>)
 8006828:	a904      	add	r1, sp, #16
 800682a:	4630      	mov	r0, r6
 800682c:	f000 f880 	bl	8006930 <_printf_i>
 8006830:	e7e4      	b.n	80067fc <_vfiprintf_r+0x208>
 8006832:	bf00      	nop
 8006834:	080268cc 	.word	0x080268cc
 8006838:	080268ec 	.word	0x080268ec
 800683c:	080268ac 	.word	0x080268ac
 8006840:	0802690c 	.word	0x0802690c
 8006844:	08026916 	.word	0x08026916
 8006848:	00000000 	.word	0x00000000
 800684c:	080065cf 	.word	0x080065cf
 8006850:	08026912 	.word	0x08026912

08006854 <_printf_common>:
 8006854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006858:	4616      	mov	r6, r2
 800685a:	4699      	mov	r9, r3
 800685c:	688a      	ldr	r2, [r1, #8]
 800685e:	690b      	ldr	r3, [r1, #16]
 8006860:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006864:	4293      	cmp	r3, r2
 8006866:	bfb8      	it	lt
 8006868:	4613      	movlt	r3, r2
 800686a:	6033      	str	r3, [r6, #0]
 800686c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006870:	4607      	mov	r7, r0
 8006872:	460c      	mov	r4, r1
 8006874:	b10a      	cbz	r2, 800687a <_printf_common+0x26>
 8006876:	3301      	adds	r3, #1
 8006878:	6033      	str	r3, [r6, #0]
 800687a:	6823      	ldr	r3, [r4, #0]
 800687c:	0699      	lsls	r1, r3, #26
 800687e:	bf42      	ittt	mi
 8006880:	6833      	ldrmi	r3, [r6, #0]
 8006882:	3302      	addmi	r3, #2
 8006884:	6033      	strmi	r3, [r6, #0]
 8006886:	6825      	ldr	r5, [r4, #0]
 8006888:	f015 0506 	ands.w	r5, r5, #6
 800688c:	d106      	bne.n	800689c <_printf_common+0x48>
 800688e:	f104 0a19 	add.w	sl, r4, #25
 8006892:	68e3      	ldr	r3, [r4, #12]
 8006894:	6832      	ldr	r2, [r6, #0]
 8006896:	1a9b      	subs	r3, r3, r2
 8006898:	42ab      	cmp	r3, r5
 800689a:	dc26      	bgt.n	80068ea <_printf_common+0x96>
 800689c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80068a0:	1e13      	subs	r3, r2, #0
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	bf18      	it	ne
 80068a6:	2301      	movne	r3, #1
 80068a8:	0692      	lsls	r2, r2, #26
 80068aa:	d42b      	bmi.n	8006904 <_printf_common+0xb0>
 80068ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80068b0:	4649      	mov	r1, r9
 80068b2:	4638      	mov	r0, r7
 80068b4:	47c0      	blx	r8
 80068b6:	3001      	adds	r0, #1
 80068b8:	d01e      	beq.n	80068f8 <_printf_common+0xa4>
 80068ba:	6823      	ldr	r3, [r4, #0]
 80068bc:	68e5      	ldr	r5, [r4, #12]
 80068be:	6832      	ldr	r2, [r6, #0]
 80068c0:	f003 0306 	and.w	r3, r3, #6
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	bf08      	it	eq
 80068c8:	1aad      	subeq	r5, r5, r2
 80068ca:	68a3      	ldr	r3, [r4, #8]
 80068cc:	6922      	ldr	r2, [r4, #16]
 80068ce:	bf0c      	ite	eq
 80068d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068d4:	2500      	movne	r5, #0
 80068d6:	4293      	cmp	r3, r2
 80068d8:	bfc4      	itt	gt
 80068da:	1a9b      	subgt	r3, r3, r2
 80068dc:	18ed      	addgt	r5, r5, r3
 80068de:	2600      	movs	r6, #0
 80068e0:	341a      	adds	r4, #26
 80068e2:	42b5      	cmp	r5, r6
 80068e4:	d11a      	bne.n	800691c <_printf_common+0xc8>
 80068e6:	2000      	movs	r0, #0
 80068e8:	e008      	b.n	80068fc <_printf_common+0xa8>
 80068ea:	2301      	movs	r3, #1
 80068ec:	4652      	mov	r2, sl
 80068ee:	4649      	mov	r1, r9
 80068f0:	4638      	mov	r0, r7
 80068f2:	47c0      	blx	r8
 80068f4:	3001      	adds	r0, #1
 80068f6:	d103      	bne.n	8006900 <_printf_common+0xac>
 80068f8:	f04f 30ff 	mov.w	r0, #4294967295
 80068fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006900:	3501      	adds	r5, #1
 8006902:	e7c6      	b.n	8006892 <_printf_common+0x3e>
 8006904:	18e1      	adds	r1, r4, r3
 8006906:	1c5a      	adds	r2, r3, #1
 8006908:	2030      	movs	r0, #48	; 0x30
 800690a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800690e:	4422      	add	r2, r4
 8006910:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006914:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006918:	3302      	adds	r3, #2
 800691a:	e7c7      	b.n	80068ac <_printf_common+0x58>
 800691c:	2301      	movs	r3, #1
 800691e:	4622      	mov	r2, r4
 8006920:	4649      	mov	r1, r9
 8006922:	4638      	mov	r0, r7
 8006924:	47c0      	blx	r8
 8006926:	3001      	adds	r0, #1
 8006928:	d0e6      	beq.n	80068f8 <_printf_common+0xa4>
 800692a:	3601      	adds	r6, #1
 800692c:	e7d9      	b.n	80068e2 <_printf_common+0x8e>
	...

08006930 <_printf_i>:
 8006930:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006934:	7e0f      	ldrb	r7, [r1, #24]
 8006936:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006938:	2f78      	cmp	r7, #120	; 0x78
 800693a:	4691      	mov	r9, r2
 800693c:	4680      	mov	r8, r0
 800693e:	460c      	mov	r4, r1
 8006940:	469a      	mov	sl, r3
 8006942:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006946:	d807      	bhi.n	8006958 <_printf_i+0x28>
 8006948:	2f62      	cmp	r7, #98	; 0x62
 800694a:	d80a      	bhi.n	8006962 <_printf_i+0x32>
 800694c:	2f00      	cmp	r7, #0
 800694e:	f000 80d8 	beq.w	8006b02 <_printf_i+0x1d2>
 8006952:	2f58      	cmp	r7, #88	; 0x58
 8006954:	f000 80a3 	beq.w	8006a9e <_printf_i+0x16e>
 8006958:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800695c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006960:	e03a      	b.n	80069d8 <_printf_i+0xa8>
 8006962:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006966:	2b15      	cmp	r3, #21
 8006968:	d8f6      	bhi.n	8006958 <_printf_i+0x28>
 800696a:	a101      	add	r1, pc, #4	; (adr r1, 8006970 <_printf_i+0x40>)
 800696c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006970:	080069c9 	.word	0x080069c9
 8006974:	080069dd 	.word	0x080069dd
 8006978:	08006959 	.word	0x08006959
 800697c:	08006959 	.word	0x08006959
 8006980:	08006959 	.word	0x08006959
 8006984:	08006959 	.word	0x08006959
 8006988:	080069dd 	.word	0x080069dd
 800698c:	08006959 	.word	0x08006959
 8006990:	08006959 	.word	0x08006959
 8006994:	08006959 	.word	0x08006959
 8006998:	08006959 	.word	0x08006959
 800699c:	08006ae9 	.word	0x08006ae9
 80069a0:	08006a0d 	.word	0x08006a0d
 80069a4:	08006acb 	.word	0x08006acb
 80069a8:	08006959 	.word	0x08006959
 80069ac:	08006959 	.word	0x08006959
 80069b0:	08006b0b 	.word	0x08006b0b
 80069b4:	08006959 	.word	0x08006959
 80069b8:	08006a0d 	.word	0x08006a0d
 80069bc:	08006959 	.word	0x08006959
 80069c0:	08006959 	.word	0x08006959
 80069c4:	08006ad3 	.word	0x08006ad3
 80069c8:	682b      	ldr	r3, [r5, #0]
 80069ca:	1d1a      	adds	r2, r3, #4
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	602a      	str	r2, [r5, #0]
 80069d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069d8:	2301      	movs	r3, #1
 80069da:	e0a3      	b.n	8006b24 <_printf_i+0x1f4>
 80069dc:	6820      	ldr	r0, [r4, #0]
 80069de:	6829      	ldr	r1, [r5, #0]
 80069e0:	0606      	lsls	r6, r0, #24
 80069e2:	f101 0304 	add.w	r3, r1, #4
 80069e6:	d50a      	bpl.n	80069fe <_printf_i+0xce>
 80069e8:	680e      	ldr	r6, [r1, #0]
 80069ea:	602b      	str	r3, [r5, #0]
 80069ec:	2e00      	cmp	r6, #0
 80069ee:	da03      	bge.n	80069f8 <_printf_i+0xc8>
 80069f0:	232d      	movs	r3, #45	; 0x2d
 80069f2:	4276      	negs	r6, r6
 80069f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80069f8:	485e      	ldr	r0, [pc, #376]	; (8006b74 <_printf_i+0x244>)
 80069fa:	230a      	movs	r3, #10
 80069fc:	e019      	b.n	8006a32 <_printf_i+0x102>
 80069fe:	680e      	ldr	r6, [r1, #0]
 8006a00:	602b      	str	r3, [r5, #0]
 8006a02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006a06:	bf18      	it	ne
 8006a08:	b236      	sxthne	r6, r6
 8006a0a:	e7ef      	b.n	80069ec <_printf_i+0xbc>
 8006a0c:	682b      	ldr	r3, [r5, #0]
 8006a0e:	6820      	ldr	r0, [r4, #0]
 8006a10:	1d19      	adds	r1, r3, #4
 8006a12:	6029      	str	r1, [r5, #0]
 8006a14:	0601      	lsls	r1, r0, #24
 8006a16:	d501      	bpl.n	8006a1c <_printf_i+0xec>
 8006a18:	681e      	ldr	r6, [r3, #0]
 8006a1a:	e002      	b.n	8006a22 <_printf_i+0xf2>
 8006a1c:	0646      	lsls	r6, r0, #25
 8006a1e:	d5fb      	bpl.n	8006a18 <_printf_i+0xe8>
 8006a20:	881e      	ldrh	r6, [r3, #0]
 8006a22:	4854      	ldr	r0, [pc, #336]	; (8006b74 <_printf_i+0x244>)
 8006a24:	2f6f      	cmp	r7, #111	; 0x6f
 8006a26:	bf0c      	ite	eq
 8006a28:	2308      	moveq	r3, #8
 8006a2a:	230a      	movne	r3, #10
 8006a2c:	2100      	movs	r1, #0
 8006a2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006a32:	6865      	ldr	r5, [r4, #4]
 8006a34:	60a5      	str	r5, [r4, #8]
 8006a36:	2d00      	cmp	r5, #0
 8006a38:	bfa2      	ittt	ge
 8006a3a:	6821      	ldrge	r1, [r4, #0]
 8006a3c:	f021 0104 	bicge.w	r1, r1, #4
 8006a40:	6021      	strge	r1, [r4, #0]
 8006a42:	b90e      	cbnz	r6, 8006a48 <_printf_i+0x118>
 8006a44:	2d00      	cmp	r5, #0
 8006a46:	d04d      	beq.n	8006ae4 <_printf_i+0x1b4>
 8006a48:	4615      	mov	r5, r2
 8006a4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006a4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006a52:	5dc7      	ldrb	r7, [r0, r7]
 8006a54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006a58:	4637      	mov	r7, r6
 8006a5a:	42bb      	cmp	r3, r7
 8006a5c:	460e      	mov	r6, r1
 8006a5e:	d9f4      	bls.n	8006a4a <_printf_i+0x11a>
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d10b      	bne.n	8006a7c <_printf_i+0x14c>
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	07de      	lsls	r6, r3, #31
 8006a68:	d508      	bpl.n	8006a7c <_printf_i+0x14c>
 8006a6a:	6923      	ldr	r3, [r4, #16]
 8006a6c:	6861      	ldr	r1, [r4, #4]
 8006a6e:	4299      	cmp	r1, r3
 8006a70:	bfde      	ittt	le
 8006a72:	2330      	movle	r3, #48	; 0x30
 8006a74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a78:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a7c:	1b52      	subs	r2, r2, r5
 8006a7e:	6122      	str	r2, [r4, #16]
 8006a80:	f8cd a000 	str.w	sl, [sp]
 8006a84:	464b      	mov	r3, r9
 8006a86:	aa03      	add	r2, sp, #12
 8006a88:	4621      	mov	r1, r4
 8006a8a:	4640      	mov	r0, r8
 8006a8c:	f7ff fee2 	bl	8006854 <_printf_common>
 8006a90:	3001      	adds	r0, #1
 8006a92:	d14c      	bne.n	8006b2e <_printf_i+0x1fe>
 8006a94:	f04f 30ff 	mov.w	r0, #4294967295
 8006a98:	b004      	add	sp, #16
 8006a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a9e:	4835      	ldr	r0, [pc, #212]	; (8006b74 <_printf_i+0x244>)
 8006aa0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006aa4:	6829      	ldr	r1, [r5, #0]
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006aac:	6029      	str	r1, [r5, #0]
 8006aae:	061d      	lsls	r5, r3, #24
 8006ab0:	d514      	bpl.n	8006adc <_printf_i+0x1ac>
 8006ab2:	07df      	lsls	r7, r3, #31
 8006ab4:	bf44      	itt	mi
 8006ab6:	f043 0320 	orrmi.w	r3, r3, #32
 8006aba:	6023      	strmi	r3, [r4, #0]
 8006abc:	b91e      	cbnz	r6, 8006ac6 <_printf_i+0x196>
 8006abe:	6823      	ldr	r3, [r4, #0]
 8006ac0:	f023 0320 	bic.w	r3, r3, #32
 8006ac4:	6023      	str	r3, [r4, #0]
 8006ac6:	2310      	movs	r3, #16
 8006ac8:	e7b0      	b.n	8006a2c <_printf_i+0xfc>
 8006aca:	6823      	ldr	r3, [r4, #0]
 8006acc:	f043 0320 	orr.w	r3, r3, #32
 8006ad0:	6023      	str	r3, [r4, #0]
 8006ad2:	2378      	movs	r3, #120	; 0x78
 8006ad4:	4828      	ldr	r0, [pc, #160]	; (8006b78 <_printf_i+0x248>)
 8006ad6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006ada:	e7e3      	b.n	8006aa4 <_printf_i+0x174>
 8006adc:	0659      	lsls	r1, r3, #25
 8006ade:	bf48      	it	mi
 8006ae0:	b2b6      	uxthmi	r6, r6
 8006ae2:	e7e6      	b.n	8006ab2 <_printf_i+0x182>
 8006ae4:	4615      	mov	r5, r2
 8006ae6:	e7bb      	b.n	8006a60 <_printf_i+0x130>
 8006ae8:	682b      	ldr	r3, [r5, #0]
 8006aea:	6826      	ldr	r6, [r4, #0]
 8006aec:	6961      	ldr	r1, [r4, #20]
 8006aee:	1d18      	adds	r0, r3, #4
 8006af0:	6028      	str	r0, [r5, #0]
 8006af2:	0635      	lsls	r5, r6, #24
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	d501      	bpl.n	8006afc <_printf_i+0x1cc>
 8006af8:	6019      	str	r1, [r3, #0]
 8006afa:	e002      	b.n	8006b02 <_printf_i+0x1d2>
 8006afc:	0670      	lsls	r0, r6, #25
 8006afe:	d5fb      	bpl.n	8006af8 <_printf_i+0x1c8>
 8006b00:	8019      	strh	r1, [r3, #0]
 8006b02:	2300      	movs	r3, #0
 8006b04:	6123      	str	r3, [r4, #16]
 8006b06:	4615      	mov	r5, r2
 8006b08:	e7ba      	b.n	8006a80 <_printf_i+0x150>
 8006b0a:	682b      	ldr	r3, [r5, #0]
 8006b0c:	1d1a      	adds	r2, r3, #4
 8006b0e:	602a      	str	r2, [r5, #0]
 8006b10:	681d      	ldr	r5, [r3, #0]
 8006b12:	6862      	ldr	r2, [r4, #4]
 8006b14:	2100      	movs	r1, #0
 8006b16:	4628      	mov	r0, r5
 8006b18:	f7f9 fb72 	bl	8000200 <memchr>
 8006b1c:	b108      	cbz	r0, 8006b22 <_printf_i+0x1f2>
 8006b1e:	1b40      	subs	r0, r0, r5
 8006b20:	6060      	str	r0, [r4, #4]
 8006b22:	6863      	ldr	r3, [r4, #4]
 8006b24:	6123      	str	r3, [r4, #16]
 8006b26:	2300      	movs	r3, #0
 8006b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006b2c:	e7a8      	b.n	8006a80 <_printf_i+0x150>
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	462a      	mov	r2, r5
 8006b32:	4649      	mov	r1, r9
 8006b34:	4640      	mov	r0, r8
 8006b36:	47d0      	blx	sl
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d0ab      	beq.n	8006a94 <_printf_i+0x164>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	079b      	lsls	r3, r3, #30
 8006b40:	d413      	bmi.n	8006b6a <_printf_i+0x23a>
 8006b42:	68e0      	ldr	r0, [r4, #12]
 8006b44:	9b03      	ldr	r3, [sp, #12]
 8006b46:	4298      	cmp	r0, r3
 8006b48:	bfb8      	it	lt
 8006b4a:	4618      	movlt	r0, r3
 8006b4c:	e7a4      	b.n	8006a98 <_printf_i+0x168>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	4632      	mov	r2, r6
 8006b52:	4649      	mov	r1, r9
 8006b54:	4640      	mov	r0, r8
 8006b56:	47d0      	blx	sl
 8006b58:	3001      	adds	r0, #1
 8006b5a:	d09b      	beq.n	8006a94 <_printf_i+0x164>
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	68e3      	ldr	r3, [r4, #12]
 8006b60:	9903      	ldr	r1, [sp, #12]
 8006b62:	1a5b      	subs	r3, r3, r1
 8006b64:	42ab      	cmp	r3, r5
 8006b66:	dcf2      	bgt.n	8006b4e <_printf_i+0x21e>
 8006b68:	e7eb      	b.n	8006b42 <_printf_i+0x212>
 8006b6a:	2500      	movs	r5, #0
 8006b6c:	f104 0619 	add.w	r6, r4, #25
 8006b70:	e7f5      	b.n	8006b5e <_printf_i+0x22e>
 8006b72:	bf00      	nop
 8006b74:	0802691d 	.word	0x0802691d
 8006b78:	0802692e 	.word	0x0802692e

08006b7c <_sbrk_r>:
 8006b7c:	b538      	push	{r3, r4, r5, lr}
 8006b7e:	4d06      	ldr	r5, [pc, #24]	; (8006b98 <_sbrk_r+0x1c>)
 8006b80:	2300      	movs	r3, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	602b      	str	r3, [r5, #0]
 8006b88:	f7fb fca6 	bl	80024d8 <_sbrk>
 8006b8c:	1c43      	adds	r3, r0, #1
 8006b8e:	d102      	bne.n	8006b96 <_sbrk_r+0x1a>
 8006b90:	682b      	ldr	r3, [r5, #0]
 8006b92:	b103      	cbz	r3, 8006b96 <_sbrk_r+0x1a>
 8006b94:	6023      	str	r3, [r4, #0]
 8006b96:	bd38      	pop	{r3, r4, r5, pc}
 8006b98:	200001f0 	.word	0x200001f0

08006b9c <__sread>:
 8006b9c:	b510      	push	{r4, lr}
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ba4:	f000 f8f8 	bl	8006d98 <_read_r>
 8006ba8:	2800      	cmp	r0, #0
 8006baa:	bfab      	itete	ge
 8006bac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006bae:	89a3      	ldrhlt	r3, [r4, #12]
 8006bb0:	181b      	addge	r3, r3, r0
 8006bb2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006bb6:	bfac      	ite	ge
 8006bb8:	6563      	strge	r3, [r4, #84]	; 0x54
 8006bba:	81a3      	strhlt	r3, [r4, #12]
 8006bbc:	bd10      	pop	{r4, pc}

08006bbe <__swrite>:
 8006bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bc2:	461f      	mov	r7, r3
 8006bc4:	898b      	ldrh	r3, [r1, #12]
 8006bc6:	05db      	lsls	r3, r3, #23
 8006bc8:	4605      	mov	r5, r0
 8006bca:	460c      	mov	r4, r1
 8006bcc:	4616      	mov	r6, r2
 8006bce:	d505      	bpl.n	8006bdc <__swrite+0x1e>
 8006bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bd4:	2302      	movs	r3, #2
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f000 f868 	bl	8006cac <_lseek_r>
 8006bdc:	89a3      	ldrh	r3, [r4, #12]
 8006bde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006be2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be6:	81a3      	strh	r3, [r4, #12]
 8006be8:	4632      	mov	r2, r6
 8006bea:	463b      	mov	r3, r7
 8006bec:	4628      	mov	r0, r5
 8006bee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf2:	f000 b817 	b.w	8006c24 <_write_r>

08006bf6 <__sseek>:
 8006bf6:	b510      	push	{r4, lr}
 8006bf8:	460c      	mov	r4, r1
 8006bfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006bfe:	f000 f855 	bl	8006cac <_lseek_r>
 8006c02:	1c43      	adds	r3, r0, #1
 8006c04:	89a3      	ldrh	r3, [r4, #12]
 8006c06:	bf15      	itete	ne
 8006c08:	6560      	strne	r0, [r4, #84]	; 0x54
 8006c0a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006c0e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006c12:	81a3      	strheq	r3, [r4, #12]
 8006c14:	bf18      	it	ne
 8006c16:	81a3      	strhne	r3, [r4, #12]
 8006c18:	bd10      	pop	{r4, pc}

08006c1a <__sclose>:
 8006c1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c1e:	f000 b813 	b.w	8006c48 <_close_r>
	...

08006c24 <_write_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4d07      	ldr	r5, [pc, #28]	; (8006c44 <_write_r+0x20>)
 8006c28:	4604      	mov	r4, r0
 8006c2a:	4608      	mov	r0, r1
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	602a      	str	r2, [r5, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f7fb fbff 	bl	8002436 <_write>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_write_r+0x1e>
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_write_r+0x1e>
 8006c40:	6023      	str	r3, [r4, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	200001f0 	.word	0x200001f0

08006c48 <_close_r>:
 8006c48:	b538      	push	{r3, r4, r5, lr}
 8006c4a:	4d06      	ldr	r5, [pc, #24]	; (8006c64 <_close_r+0x1c>)
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	4604      	mov	r4, r0
 8006c50:	4608      	mov	r0, r1
 8006c52:	602b      	str	r3, [r5, #0]
 8006c54:	f7fb fc0b 	bl	800246e <_close>
 8006c58:	1c43      	adds	r3, r0, #1
 8006c5a:	d102      	bne.n	8006c62 <_close_r+0x1a>
 8006c5c:	682b      	ldr	r3, [r5, #0]
 8006c5e:	b103      	cbz	r3, 8006c62 <_close_r+0x1a>
 8006c60:	6023      	str	r3, [r4, #0]
 8006c62:	bd38      	pop	{r3, r4, r5, pc}
 8006c64:	200001f0 	.word	0x200001f0

08006c68 <_fstat_r>:
 8006c68:	b538      	push	{r3, r4, r5, lr}
 8006c6a:	4d07      	ldr	r5, [pc, #28]	; (8006c88 <_fstat_r+0x20>)
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	4604      	mov	r4, r0
 8006c70:	4608      	mov	r0, r1
 8006c72:	4611      	mov	r1, r2
 8006c74:	602b      	str	r3, [r5, #0]
 8006c76:	f7fb fc06 	bl	8002486 <_fstat>
 8006c7a:	1c43      	adds	r3, r0, #1
 8006c7c:	d102      	bne.n	8006c84 <_fstat_r+0x1c>
 8006c7e:	682b      	ldr	r3, [r5, #0]
 8006c80:	b103      	cbz	r3, 8006c84 <_fstat_r+0x1c>
 8006c82:	6023      	str	r3, [r4, #0]
 8006c84:	bd38      	pop	{r3, r4, r5, pc}
 8006c86:	bf00      	nop
 8006c88:	200001f0 	.word	0x200001f0

08006c8c <_isatty_r>:
 8006c8c:	b538      	push	{r3, r4, r5, lr}
 8006c8e:	4d06      	ldr	r5, [pc, #24]	; (8006ca8 <_isatty_r+0x1c>)
 8006c90:	2300      	movs	r3, #0
 8006c92:	4604      	mov	r4, r0
 8006c94:	4608      	mov	r0, r1
 8006c96:	602b      	str	r3, [r5, #0]
 8006c98:	f7fb fc05 	bl	80024a6 <_isatty>
 8006c9c:	1c43      	adds	r3, r0, #1
 8006c9e:	d102      	bne.n	8006ca6 <_isatty_r+0x1a>
 8006ca0:	682b      	ldr	r3, [r5, #0]
 8006ca2:	b103      	cbz	r3, 8006ca6 <_isatty_r+0x1a>
 8006ca4:	6023      	str	r3, [r4, #0]
 8006ca6:	bd38      	pop	{r3, r4, r5, pc}
 8006ca8:	200001f0 	.word	0x200001f0

08006cac <_lseek_r>:
 8006cac:	b538      	push	{r3, r4, r5, lr}
 8006cae:	4d07      	ldr	r5, [pc, #28]	; (8006ccc <_lseek_r+0x20>)
 8006cb0:	4604      	mov	r4, r0
 8006cb2:	4608      	mov	r0, r1
 8006cb4:	4611      	mov	r1, r2
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	602a      	str	r2, [r5, #0]
 8006cba:	461a      	mov	r2, r3
 8006cbc:	f7fb fbfe 	bl	80024bc <_lseek>
 8006cc0:	1c43      	adds	r3, r0, #1
 8006cc2:	d102      	bne.n	8006cca <_lseek_r+0x1e>
 8006cc4:	682b      	ldr	r3, [r5, #0]
 8006cc6:	b103      	cbz	r3, 8006cca <_lseek_r+0x1e>
 8006cc8:	6023      	str	r3, [r4, #0]
 8006cca:	bd38      	pop	{r3, r4, r5, pc}
 8006ccc:	200001f0 	.word	0x200001f0

08006cd0 <memcpy>:
 8006cd0:	440a      	add	r2, r1
 8006cd2:	4291      	cmp	r1, r2
 8006cd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8006cd8:	d100      	bne.n	8006cdc <memcpy+0xc>
 8006cda:	4770      	bx	lr
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006ce2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006ce6:	4291      	cmp	r1, r2
 8006ce8:	d1f9      	bne.n	8006cde <memcpy+0xe>
 8006cea:	bd10      	pop	{r4, pc}

08006cec <memmove>:
 8006cec:	4288      	cmp	r0, r1
 8006cee:	b510      	push	{r4, lr}
 8006cf0:	eb01 0402 	add.w	r4, r1, r2
 8006cf4:	d902      	bls.n	8006cfc <memmove+0x10>
 8006cf6:	4284      	cmp	r4, r0
 8006cf8:	4623      	mov	r3, r4
 8006cfa:	d807      	bhi.n	8006d0c <memmove+0x20>
 8006cfc:	1e43      	subs	r3, r0, #1
 8006cfe:	42a1      	cmp	r1, r4
 8006d00:	d008      	beq.n	8006d14 <memmove+0x28>
 8006d02:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d06:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d0a:	e7f8      	b.n	8006cfe <memmove+0x12>
 8006d0c:	4402      	add	r2, r0
 8006d0e:	4601      	mov	r1, r0
 8006d10:	428a      	cmp	r2, r1
 8006d12:	d100      	bne.n	8006d16 <memmove+0x2a>
 8006d14:	bd10      	pop	{r4, pc}
 8006d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006d1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006d1e:	e7f7      	b.n	8006d10 <memmove+0x24>

08006d20 <__malloc_lock>:
 8006d20:	4801      	ldr	r0, [pc, #4]	; (8006d28 <__malloc_lock+0x8>)
 8006d22:	f7ff b999 	b.w	8006058 <__retarget_lock_acquire_recursive>
 8006d26:	bf00      	nop
 8006d28:	200001e4 	.word	0x200001e4

08006d2c <__malloc_unlock>:
 8006d2c:	4801      	ldr	r0, [pc, #4]	; (8006d34 <__malloc_unlock+0x8>)
 8006d2e:	f7ff b994 	b.w	800605a <__retarget_lock_release_recursive>
 8006d32:	bf00      	nop
 8006d34:	200001e4 	.word	0x200001e4

08006d38 <_realloc_r>:
 8006d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d3c:	4680      	mov	r8, r0
 8006d3e:	4614      	mov	r4, r2
 8006d40:	460e      	mov	r6, r1
 8006d42:	b921      	cbnz	r1, 8006d4e <_realloc_r+0x16>
 8006d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d48:	4611      	mov	r1, r2
 8006d4a:	f7ff ba59 	b.w	8006200 <_malloc_r>
 8006d4e:	b92a      	cbnz	r2, 8006d5c <_realloc_r+0x24>
 8006d50:	f7ff f9ea 	bl	8006128 <_free_r>
 8006d54:	4625      	mov	r5, r4
 8006d56:	4628      	mov	r0, r5
 8006d58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d5c:	f000 f82e 	bl	8006dbc <_malloc_usable_size_r>
 8006d60:	4284      	cmp	r4, r0
 8006d62:	4607      	mov	r7, r0
 8006d64:	d802      	bhi.n	8006d6c <_realloc_r+0x34>
 8006d66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006d6a:	d812      	bhi.n	8006d92 <_realloc_r+0x5a>
 8006d6c:	4621      	mov	r1, r4
 8006d6e:	4640      	mov	r0, r8
 8006d70:	f7ff fa46 	bl	8006200 <_malloc_r>
 8006d74:	4605      	mov	r5, r0
 8006d76:	2800      	cmp	r0, #0
 8006d78:	d0ed      	beq.n	8006d56 <_realloc_r+0x1e>
 8006d7a:	42bc      	cmp	r4, r7
 8006d7c:	4622      	mov	r2, r4
 8006d7e:	4631      	mov	r1, r6
 8006d80:	bf28      	it	cs
 8006d82:	463a      	movcs	r2, r7
 8006d84:	f7ff ffa4 	bl	8006cd0 <memcpy>
 8006d88:	4631      	mov	r1, r6
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f7ff f9cc 	bl	8006128 <_free_r>
 8006d90:	e7e1      	b.n	8006d56 <_realloc_r+0x1e>
 8006d92:	4635      	mov	r5, r6
 8006d94:	e7df      	b.n	8006d56 <_realloc_r+0x1e>
	...

08006d98 <_read_r>:
 8006d98:	b538      	push	{r3, r4, r5, lr}
 8006d9a:	4d07      	ldr	r5, [pc, #28]	; (8006db8 <_read_r+0x20>)
 8006d9c:	4604      	mov	r4, r0
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	2200      	movs	r2, #0
 8006da4:	602a      	str	r2, [r5, #0]
 8006da6:	461a      	mov	r2, r3
 8006da8:	f7fb fb28 	bl	80023fc <_read>
 8006dac:	1c43      	adds	r3, r0, #1
 8006dae:	d102      	bne.n	8006db6 <_read_r+0x1e>
 8006db0:	682b      	ldr	r3, [r5, #0]
 8006db2:	b103      	cbz	r3, 8006db6 <_read_r+0x1e>
 8006db4:	6023      	str	r3, [r4, #0]
 8006db6:	bd38      	pop	{r3, r4, r5, pc}
 8006db8:	200001f0 	.word	0x200001f0

08006dbc <_malloc_usable_size_r>:
 8006dbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dc0:	1f18      	subs	r0, r3, #4
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	bfbc      	itt	lt
 8006dc6:	580b      	ldrlt	r3, [r1, r0]
 8006dc8:	18c0      	addlt	r0, r0, r3
 8006dca:	4770      	bx	lr
 8006dcc:	0000      	movs	r0, r0
	...

08006dd0 <cos>:
 8006dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006dd2:	ec53 2b10 	vmov	r2, r3, d0
 8006dd6:	4826      	ldr	r0, [pc, #152]	; (8006e70 <cos+0xa0>)
 8006dd8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006ddc:	4281      	cmp	r1, r0
 8006dde:	dc06      	bgt.n	8006dee <cos+0x1e>
 8006de0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8006e68 <cos+0x98>
 8006de4:	b005      	add	sp, #20
 8006de6:	f85d eb04 	ldr.w	lr, [sp], #4
 8006dea:	f000 baa9 	b.w	8007340 <__kernel_cos>
 8006dee:	4821      	ldr	r0, [pc, #132]	; (8006e74 <cos+0xa4>)
 8006df0:	4281      	cmp	r1, r0
 8006df2:	dd09      	ble.n	8006e08 <cos+0x38>
 8006df4:	ee10 0a10 	vmov	r0, s0
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f7f9 fa55 	bl	80002a8 <__aeabi_dsub>
 8006dfe:	ec41 0b10 	vmov	d0, r0, r1
 8006e02:	b005      	add	sp, #20
 8006e04:	f85d fb04 	ldr.w	pc, [sp], #4
 8006e08:	4668      	mov	r0, sp
 8006e0a:	f000 f88d 	bl	8006f28 <__ieee754_rem_pio2>
 8006e0e:	f000 0003 	and.w	r0, r0, #3
 8006e12:	2801      	cmp	r0, #1
 8006e14:	d00b      	beq.n	8006e2e <cos+0x5e>
 8006e16:	2802      	cmp	r0, #2
 8006e18:	d016      	beq.n	8006e48 <cos+0x78>
 8006e1a:	b9e0      	cbnz	r0, 8006e56 <cos+0x86>
 8006e1c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e20:	ed9d 0b00 	vldr	d0, [sp]
 8006e24:	f000 fa8c 	bl	8007340 <__kernel_cos>
 8006e28:	ec51 0b10 	vmov	r0, r1, d0
 8006e2c:	e7e7      	b.n	8006dfe <cos+0x2e>
 8006e2e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e32:	ed9d 0b00 	vldr	d0, [sp]
 8006e36:	f000 fe9b 	bl	8007b70 <__kernel_sin>
 8006e3a:	ec53 2b10 	vmov	r2, r3, d0
 8006e3e:	ee10 0a10 	vmov	r0, s0
 8006e42:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006e46:	e7da      	b.n	8006dfe <cos+0x2e>
 8006e48:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e4c:	ed9d 0b00 	vldr	d0, [sp]
 8006e50:	f000 fa76 	bl	8007340 <__kernel_cos>
 8006e54:	e7f1      	b.n	8006e3a <cos+0x6a>
 8006e56:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006e5a:	ed9d 0b00 	vldr	d0, [sp]
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f000 fe86 	bl	8007b70 <__kernel_sin>
 8006e64:	e7e0      	b.n	8006e28 <cos+0x58>
 8006e66:	bf00      	nop
	...
 8006e70:	3fe921fb 	.word	0x3fe921fb
 8006e74:	7fefffff 	.word	0x7fefffff

08006e78 <sin>:
 8006e78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e7a:	ec53 2b10 	vmov	r2, r3, d0
 8006e7e:	4828      	ldr	r0, [pc, #160]	; (8006f20 <sin+0xa8>)
 8006e80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8006e84:	4281      	cmp	r1, r0
 8006e86:	dc07      	bgt.n	8006e98 <sin+0x20>
 8006e88:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8006f18 <sin+0xa0>
 8006e8c:	2000      	movs	r0, #0
 8006e8e:	b005      	add	sp, #20
 8006e90:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e94:	f000 be6c 	b.w	8007b70 <__kernel_sin>
 8006e98:	4822      	ldr	r0, [pc, #136]	; (8006f24 <sin+0xac>)
 8006e9a:	4281      	cmp	r1, r0
 8006e9c:	dd09      	ble.n	8006eb2 <sin+0x3a>
 8006e9e:	ee10 0a10 	vmov	r0, s0
 8006ea2:	4619      	mov	r1, r3
 8006ea4:	f7f9 fa00 	bl	80002a8 <__aeabi_dsub>
 8006ea8:	ec41 0b10 	vmov	d0, r0, r1
 8006eac:	b005      	add	sp, #20
 8006eae:	f85d fb04 	ldr.w	pc, [sp], #4
 8006eb2:	4668      	mov	r0, sp
 8006eb4:	f000 f838 	bl	8006f28 <__ieee754_rem_pio2>
 8006eb8:	f000 0003 	and.w	r0, r0, #3
 8006ebc:	2801      	cmp	r0, #1
 8006ebe:	d00c      	beq.n	8006eda <sin+0x62>
 8006ec0:	2802      	cmp	r0, #2
 8006ec2:	d011      	beq.n	8006ee8 <sin+0x70>
 8006ec4:	b9f0      	cbnz	r0, 8006f04 <sin+0x8c>
 8006ec6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006eca:	ed9d 0b00 	vldr	d0, [sp]
 8006ece:	2001      	movs	r0, #1
 8006ed0:	f000 fe4e 	bl	8007b70 <__kernel_sin>
 8006ed4:	ec51 0b10 	vmov	r0, r1, d0
 8006ed8:	e7e6      	b.n	8006ea8 <sin+0x30>
 8006eda:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006ede:	ed9d 0b00 	vldr	d0, [sp]
 8006ee2:	f000 fa2d 	bl	8007340 <__kernel_cos>
 8006ee6:	e7f5      	b.n	8006ed4 <sin+0x5c>
 8006ee8:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006eec:	ed9d 0b00 	vldr	d0, [sp]
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	f000 fe3d 	bl	8007b70 <__kernel_sin>
 8006ef6:	ec53 2b10 	vmov	r2, r3, d0
 8006efa:	ee10 0a10 	vmov	r0, s0
 8006efe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8006f02:	e7d1      	b.n	8006ea8 <sin+0x30>
 8006f04:	ed9d 1b02 	vldr	d1, [sp, #8]
 8006f08:	ed9d 0b00 	vldr	d0, [sp]
 8006f0c:	f000 fa18 	bl	8007340 <__kernel_cos>
 8006f10:	e7f1      	b.n	8006ef6 <sin+0x7e>
 8006f12:	bf00      	nop
 8006f14:	f3af 8000 	nop.w
	...
 8006f20:	3fe921fb 	.word	0x3fe921fb
 8006f24:	7fefffff 	.word	0x7fefffff

08006f28 <__ieee754_rem_pio2>:
 8006f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2c:	ed2d 8b02 	vpush	{d8}
 8006f30:	ec55 4b10 	vmov	r4, r5, d0
 8006f34:	4bca      	ldr	r3, [pc, #808]	; (8007260 <__ieee754_rem_pio2+0x338>)
 8006f36:	b08b      	sub	sp, #44	; 0x2c
 8006f38:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8006f3c:	4598      	cmp	r8, r3
 8006f3e:	4682      	mov	sl, r0
 8006f40:	9502      	str	r5, [sp, #8]
 8006f42:	dc08      	bgt.n	8006f56 <__ieee754_rem_pio2+0x2e>
 8006f44:	2200      	movs	r2, #0
 8006f46:	2300      	movs	r3, #0
 8006f48:	ed80 0b00 	vstr	d0, [r0]
 8006f4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8006f50:	f04f 0b00 	mov.w	fp, #0
 8006f54:	e028      	b.n	8006fa8 <__ieee754_rem_pio2+0x80>
 8006f56:	4bc3      	ldr	r3, [pc, #780]	; (8007264 <__ieee754_rem_pio2+0x33c>)
 8006f58:	4598      	cmp	r8, r3
 8006f5a:	dc78      	bgt.n	800704e <__ieee754_rem_pio2+0x126>
 8006f5c:	9b02      	ldr	r3, [sp, #8]
 8006f5e:	4ec2      	ldr	r6, [pc, #776]	; (8007268 <__ieee754_rem_pio2+0x340>)
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	ee10 0a10 	vmov	r0, s0
 8006f66:	a3b0      	add	r3, pc, #704	; (adr r3, 8007228 <__ieee754_rem_pio2+0x300>)
 8006f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f6c:	4629      	mov	r1, r5
 8006f6e:	dd39      	ble.n	8006fe4 <__ieee754_rem_pio2+0xbc>
 8006f70:	f7f9 f99a 	bl	80002a8 <__aeabi_dsub>
 8006f74:	45b0      	cmp	r8, r6
 8006f76:	4604      	mov	r4, r0
 8006f78:	460d      	mov	r5, r1
 8006f7a:	d01b      	beq.n	8006fb4 <__ieee754_rem_pio2+0x8c>
 8006f7c:	a3ac      	add	r3, pc, #688	; (adr r3, 8007230 <__ieee754_rem_pio2+0x308>)
 8006f7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f82:	f7f9 f991 	bl	80002a8 <__aeabi_dsub>
 8006f86:	4602      	mov	r2, r0
 8006f88:	460b      	mov	r3, r1
 8006f8a:	e9ca 2300 	strd	r2, r3, [sl]
 8006f8e:	4620      	mov	r0, r4
 8006f90:	4629      	mov	r1, r5
 8006f92:	f7f9 f989 	bl	80002a8 <__aeabi_dsub>
 8006f96:	a3a6      	add	r3, pc, #664	; (adr r3, 8007230 <__ieee754_rem_pio2+0x308>)
 8006f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f9c:	f7f9 f984 	bl	80002a8 <__aeabi_dsub>
 8006fa0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8006fa4:	f04f 0b01 	mov.w	fp, #1
 8006fa8:	4658      	mov	r0, fp
 8006faa:	b00b      	add	sp, #44	; 0x2c
 8006fac:	ecbd 8b02 	vpop	{d8}
 8006fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fb4:	a3a0      	add	r3, pc, #640	; (adr r3, 8007238 <__ieee754_rem_pio2+0x310>)
 8006fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fba:	f7f9 f975 	bl	80002a8 <__aeabi_dsub>
 8006fbe:	a3a0      	add	r3, pc, #640	; (adr r3, 8007240 <__ieee754_rem_pio2+0x318>)
 8006fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc4:	4604      	mov	r4, r0
 8006fc6:	460d      	mov	r5, r1
 8006fc8:	f7f9 f96e 	bl	80002a8 <__aeabi_dsub>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	460b      	mov	r3, r1
 8006fd0:	e9ca 2300 	strd	r2, r3, [sl]
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	4629      	mov	r1, r5
 8006fd8:	f7f9 f966 	bl	80002a8 <__aeabi_dsub>
 8006fdc:	a398      	add	r3, pc, #608	; (adr r3, 8007240 <__ieee754_rem_pio2+0x318>)
 8006fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe2:	e7db      	b.n	8006f9c <__ieee754_rem_pio2+0x74>
 8006fe4:	f7f9 f962 	bl	80002ac <__adddf3>
 8006fe8:	45b0      	cmp	r8, r6
 8006fea:	4604      	mov	r4, r0
 8006fec:	460d      	mov	r5, r1
 8006fee:	d016      	beq.n	800701e <__ieee754_rem_pio2+0xf6>
 8006ff0:	a38f      	add	r3, pc, #572	; (adr r3, 8007230 <__ieee754_rem_pio2+0x308>)
 8006ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ff6:	f7f9 f959 	bl	80002ac <__adddf3>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	e9ca 2300 	strd	r2, r3, [sl]
 8007002:	4620      	mov	r0, r4
 8007004:	4629      	mov	r1, r5
 8007006:	f7f9 f94f 	bl	80002a8 <__aeabi_dsub>
 800700a:	a389      	add	r3, pc, #548	; (adr r3, 8007230 <__ieee754_rem_pio2+0x308>)
 800700c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007010:	f7f9 f94c 	bl	80002ac <__adddf3>
 8007014:	f04f 3bff 	mov.w	fp, #4294967295
 8007018:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800701c:	e7c4      	b.n	8006fa8 <__ieee754_rem_pio2+0x80>
 800701e:	a386      	add	r3, pc, #536	; (adr r3, 8007238 <__ieee754_rem_pio2+0x310>)
 8007020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007024:	f7f9 f942 	bl	80002ac <__adddf3>
 8007028:	a385      	add	r3, pc, #532	; (adr r3, 8007240 <__ieee754_rem_pio2+0x318>)
 800702a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800702e:	4604      	mov	r4, r0
 8007030:	460d      	mov	r5, r1
 8007032:	f7f9 f93b 	bl	80002ac <__adddf3>
 8007036:	4602      	mov	r2, r0
 8007038:	460b      	mov	r3, r1
 800703a:	e9ca 2300 	strd	r2, r3, [sl]
 800703e:	4620      	mov	r0, r4
 8007040:	4629      	mov	r1, r5
 8007042:	f7f9 f931 	bl	80002a8 <__aeabi_dsub>
 8007046:	a37e      	add	r3, pc, #504	; (adr r3, 8007240 <__ieee754_rem_pio2+0x318>)
 8007048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800704c:	e7e0      	b.n	8007010 <__ieee754_rem_pio2+0xe8>
 800704e:	4b87      	ldr	r3, [pc, #540]	; (800726c <__ieee754_rem_pio2+0x344>)
 8007050:	4598      	cmp	r8, r3
 8007052:	f300 80d9 	bgt.w	8007208 <__ieee754_rem_pio2+0x2e0>
 8007056:	f000 fe49 	bl	8007cec <fabs>
 800705a:	ec55 4b10 	vmov	r4, r5, d0
 800705e:	ee10 0a10 	vmov	r0, s0
 8007062:	a379      	add	r3, pc, #484	; (adr r3, 8007248 <__ieee754_rem_pio2+0x320>)
 8007064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007068:	4629      	mov	r1, r5
 800706a:	f7f9 fad5 	bl	8000618 <__aeabi_dmul>
 800706e:	4b80      	ldr	r3, [pc, #512]	; (8007270 <__ieee754_rem_pio2+0x348>)
 8007070:	2200      	movs	r2, #0
 8007072:	f7f9 f91b 	bl	80002ac <__adddf3>
 8007076:	f7f9 fd69 	bl	8000b4c <__aeabi_d2iz>
 800707a:	4683      	mov	fp, r0
 800707c:	f7f9 fa62 	bl	8000544 <__aeabi_i2d>
 8007080:	4602      	mov	r2, r0
 8007082:	460b      	mov	r3, r1
 8007084:	ec43 2b18 	vmov	d8, r2, r3
 8007088:	a367      	add	r3, pc, #412	; (adr r3, 8007228 <__ieee754_rem_pio2+0x300>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	f7f9 fac3 	bl	8000618 <__aeabi_dmul>
 8007092:	4602      	mov	r2, r0
 8007094:	460b      	mov	r3, r1
 8007096:	4620      	mov	r0, r4
 8007098:	4629      	mov	r1, r5
 800709a:	f7f9 f905 	bl	80002a8 <__aeabi_dsub>
 800709e:	a364      	add	r3, pc, #400	; (adr r3, 8007230 <__ieee754_rem_pio2+0x308>)
 80070a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a4:	4606      	mov	r6, r0
 80070a6:	460f      	mov	r7, r1
 80070a8:	ec51 0b18 	vmov	r0, r1, d8
 80070ac:	f7f9 fab4 	bl	8000618 <__aeabi_dmul>
 80070b0:	f1bb 0f1f 	cmp.w	fp, #31
 80070b4:	4604      	mov	r4, r0
 80070b6:	460d      	mov	r5, r1
 80070b8:	dc0d      	bgt.n	80070d6 <__ieee754_rem_pio2+0x1ae>
 80070ba:	4b6e      	ldr	r3, [pc, #440]	; (8007274 <__ieee754_rem_pio2+0x34c>)
 80070bc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80070c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070c4:	4543      	cmp	r3, r8
 80070c6:	d006      	beq.n	80070d6 <__ieee754_rem_pio2+0x1ae>
 80070c8:	4622      	mov	r2, r4
 80070ca:	462b      	mov	r3, r5
 80070cc:	4630      	mov	r0, r6
 80070ce:	4639      	mov	r1, r7
 80070d0:	f7f9 f8ea 	bl	80002a8 <__aeabi_dsub>
 80070d4:	e00f      	b.n	80070f6 <__ieee754_rem_pio2+0x1ce>
 80070d6:	462b      	mov	r3, r5
 80070d8:	4622      	mov	r2, r4
 80070da:	4630      	mov	r0, r6
 80070dc:	4639      	mov	r1, r7
 80070de:	f7f9 f8e3 	bl	80002a8 <__aeabi_dsub>
 80070e2:	ea4f 5328 	mov.w	r3, r8, asr #20
 80070e6:	9303      	str	r3, [sp, #12]
 80070e8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80070ec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80070f0:	f1b8 0f10 	cmp.w	r8, #16
 80070f4:	dc02      	bgt.n	80070fc <__ieee754_rem_pio2+0x1d4>
 80070f6:	e9ca 0100 	strd	r0, r1, [sl]
 80070fa:	e039      	b.n	8007170 <__ieee754_rem_pio2+0x248>
 80070fc:	a34e      	add	r3, pc, #312	; (adr r3, 8007238 <__ieee754_rem_pio2+0x310>)
 80070fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007102:	ec51 0b18 	vmov	r0, r1, d8
 8007106:	f7f9 fa87 	bl	8000618 <__aeabi_dmul>
 800710a:	4604      	mov	r4, r0
 800710c:	460d      	mov	r5, r1
 800710e:	4602      	mov	r2, r0
 8007110:	460b      	mov	r3, r1
 8007112:	4630      	mov	r0, r6
 8007114:	4639      	mov	r1, r7
 8007116:	f7f9 f8c7 	bl	80002a8 <__aeabi_dsub>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4680      	mov	r8, r0
 8007120:	4689      	mov	r9, r1
 8007122:	4630      	mov	r0, r6
 8007124:	4639      	mov	r1, r7
 8007126:	f7f9 f8bf 	bl	80002a8 <__aeabi_dsub>
 800712a:	4622      	mov	r2, r4
 800712c:	462b      	mov	r3, r5
 800712e:	f7f9 f8bb 	bl	80002a8 <__aeabi_dsub>
 8007132:	a343      	add	r3, pc, #268	; (adr r3, 8007240 <__ieee754_rem_pio2+0x318>)
 8007134:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007138:	4604      	mov	r4, r0
 800713a:	460d      	mov	r5, r1
 800713c:	ec51 0b18 	vmov	r0, r1, d8
 8007140:	f7f9 fa6a 	bl	8000618 <__aeabi_dmul>
 8007144:	4622      	mov	r2, r4
 8007146:	462b      	mov	r3, r5
 8007148:	f7f9 f8ae 	bl	80002a8 <__aeabi_dsub>
 800714c:	4602      	mov	r2, r0
 800714e:	460b      	mov	r3, r1
 8007150:	4604      	mov	r4, r0
 8007152:	460d      	mov	r5, r1
 8007154:	4640      	mov	r0, r8
 8007156:	4649      	mov	r1, r9
 8007158:	f7f9 f8a6 	bl	80002a8 <__aeabi_dsub>
 800715c:	9a03      	ldr	r2, [sp, #12]
 800715e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b31      	cmp	r3, #49	; 0x31
 8007166:	dc24      	bgt.n	80071b2 <__ieee754_rem_pio2+0x28a>
 8007168:	e9ca 0100 	strd	r0, r1, [sl]
 800716c:	4646      	mov	r6, r8
 800716e:	464f      	mov	r7, r9
 8007170:	e9da 8900 	ldrd	r8, r9, [sl]
 8007174:	4630      	mov	r0, r6
 8007176:	4642      	mov	r2, r8
 8007178:	464b      	mov	r3, r9
 800717a:	4639      	mov	r1, r7
 800717c:	f7f9 f894 	bl	80002a8 <__aeabi_dsub>
 8007180:	462b      	mov	r3, r5
 8007182:	4622      	mov	r2, r4
 8007184:	f7f9 f890 	bl	80002a8 <__aeabi_dsub>
 8007188:	9b02      	ldr	r3, [sp, #8]
 800718a:	2b00      	cmp	r3, #0
 800718c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007190:	f6bf af0a 	bge.w	8006fa8 <__ieee754_rem_pio2+0x80>
 8007194:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007198:	f8ca 3004 	str.w	r3, [sl, #4]
 800719c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80071a0:	f8ca 8000 	str.w	r8, [sl]
 80071a4:	f8ca 0008 	str.w	r0, [sl, #8]
 80071a8:	f8ca 300c 	str.w	r3, [sl, #12]
 80071ac:	f1cb 0b00 	rsb	fp, fp, #0
 80071b0:	e6fa      	b.n	8006fa8 <__ieee754_rem_pio2+0x80>
 80071b2:	a327      	add	r3, pc, #156	; (adr r3, 8007250 <__ieee754_rem_pio2+0x328>)
 80071b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b8:	ec51 0b18 	vmov	r0, r1, d8
 80071bc:	f7f9 fa2c 	bl	8000618 <__aeabi_dmul>
 80071c0:	4604      	mov	r4, r0
 80071c2:	460d      	mov	r5, r1
 80071c4:	4602      	mov	r2, r0
 80071c6:	460b      	mov	r3, r1
 80071c8:	4640      	mov	r0, r8
 80071ca:	4649      	mov	r1, r9
 80071cc:	f7f9 f86c 	bl	80002a8 <__aeabi_dsub>
 80071d0:	4602      	mov	r2, r0
 80071d2:	460b      	mov	r3, r1
 80071d4:	4606      	mov	r6, r0
 80071d6:	460f      	mov	r7, r1
 80071d8:	4640      	mov	r0, r8
 80071da:	4649      	mov	r1, r9
 80071dc:	f7f9 f864 	bl	80002a8 <__aeabi_dsub>
 80071e0:	4622      	mov	r2, r4
 80071e2:	462b      	mov	r3, r5
 80071e4:	f7f9 f860 	bl	80002a8 <__aeabi_dsub>
 80071e8:	a31b      	add	r3, pc, #108	; (adr r3, 8007258 <__ieee754_rem_pio2+0x330>)
 80071ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ee:	4604      	mov	r4, r0
 80071f0:	460d      	mov	r5, r1
 80071f2:	ec51 0b18 	vmov	r0, r1, d8
 80071f6:	f7f9 fa0f 	bl	8000618 <__aeabi_dmul>
 80071fa:	4622      	mov	r2, r4
 80071fc:	462b      	mov	r3, r5
 80071fe:	f7f9 f853 	bl	80002a8 <__aeabi_dsub>
 8007202:	4604      	mov	r4, r0
 8007204:	460d      	mov	r5, r1
 8007206:	e75f      	b.n	80070c8 <__ieee754_rem_pio2+0x1a0>
 8007208:	4b1b      	ldr	r3, [pc, #108]	; (8007278 <__ieee754_rem_pio2+0x350>)
 800720a:	4598      	cmp	r8, r3
 800720c:	dd36      	ble.n	800727c <__ieee754_rem_pio2+0x354>
 800720e:	ee10 2a10 	vmov	r2, s0
 8007212:	462b      	mov	r3, r5
 8007214:	4620      	mov	r0, r4
 8007216:	4629      	mov	r1, r5
 8007218:	f7f9 f846 	bl	80002a8 <__aeabi_dsub>
 800721c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007220:	e9ca 0100 	strd	r0, r1, [sl]
 8007224:	e694      	b.n	8006f50 <__ieee754_rem_pio2+0x28>
 8007226:	bf00      	nop
 8007228:	54400000 	.word	0x54400000
 800722c:	3ff921fb 	.word	0x3ff921fb
 8007230:	1a626331 	.word	0x1a626331
 8007234:	3dd0b461 	.word	0x3dd0b461
 8007238:	1a600000 	.word	0x1a600000
 800723c:	3dd0b461 	.word	0x3dd0b461
 8007240:	2e037073 	.word	0x2e037073
 8007244:	3ba3198a 	.word	0x3ba3198a
 8007248:	6dc9c883 	.word	0x6dc9c883
 800724c:	3fe45f30 	.word	0x3fe45f30
 8007250:	2e000000 	.word	0x2e000000
 8007254:	3ba3198a 	.word	0x3ba3198a
 8007258:	252049c1 	.word	0x252049c1
 800725c:	397b839a 	.word	0x397b839a
 8007260:	3fe921fb 	.word	0x3fe921fb
 8007264:	4002d97b 	.word	0x4002d97b
 8007268:	3ff921fb 	.word	0x3ff921fb
 800726c:	413921fb 	.word	0x413921fb
 8007270:	3fe00000 	.word	0x3fe00000
 8007274:	08026940 	.word	0x08026940
 8007278:	7fefffff 	.word	0x7fefffff
 800727c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8007280:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8007284:	ee10 0a10 	vmov	r0, s0
 8007288:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800728c:	ee10 6a10 	vmov	r6, s0
 8007290:	460f      	mov	r7, r1
 8007292:	f7f9 fc5b 	bl	8000b4c <__aeabi_d2iz>
 8007296:	f7f9 f955 	bl	8000544 <__aeabi_i2d>
 800729a:	4602      	mov	r2, r0
 800729c:	460b      	mov	r3, r1
 800729e:	4630      	mov	r0, r6
 80072a0:	4639      	mov	r1, r7
 80072a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80072a6:	f7f8 ffff 	bl	80002a8 <__aeabi_dsub>
 80072aa:	4b23      	ldr	r3, [pc, #140]	; (8007338 <__ieee754_rem_pio2+0x410>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	f7f9 f9b3 	bl	8000618 <__aeabi_dmul>
 80072b2:	460f      	mov	r7, r1
 80072b4:	4606      	mov	r6, r0
 80072b6:	f7f9 fc49 	bl	8000b4c <__aeabi_d2iz>
 80072ba:	f7f9 f943 	bl	8000544 <__aeabi_i2d>
 80072be:	4602      	mov	r2, r0
 80072c0:	460b      	mov	r3, r1
 80072c2:	4630      	mov	r0, r6
 80072c4:	4639      	mov	r1, r7
 80072c6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80072ca:	f7f8 ffed 	bl	80002a8 <__aeabi_dsub>
 80072ce:	4b1a      	ldr	r3, [pc, #104]	; (8007338 <__ieee754_rem_pio2+0x410>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	f7f9 f9a1 	bl	8000618 <__aeabi_dmul>
 80072d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80072da:	ad04      	add	r5, sp, #16
 80072dc:	f04f 0803 	mov.w	r8, #3
 80072e0:	46a9      	mov	r9, r5
 80072e2:	2600      	movs	r6, #0
 80072e4:	2700      	movs	r7, #0
 80072e6:	4632      	mov	r2, r6
 80072e8:	463b      	mov	r3, r7
 80072ea:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80072ee:	46c3      	mov	fp, r8
 80072f0:	3d08      	subs	r5, #8
 80072f2:	f108 38ff 	add.w	r8, r8, #4294967295
 80072f6:	f7f9 fbf7 	bl	8000ae8 <__aeabi_dcmpeq>
 80072fa:	2800      	cmp	r0, #0
 80072fc:	d1f3      	bne.n	80072e6 <__ieee754_rem_pio2+0x3be>
 80072fe:	4b0f      	ldr	r3, [pc, #60]	; (800733c <__ieee754_rem_pio2+0x414>)
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	2302      	movs	r3, #2
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	4622      	mov	r2, r4
 8007308:	465b      	mov	r3, fp
 800730a:	4651      	mov	r1, sl
 800730c:	4648      	mov	r0, r9
 800730e:	f000 f8df 	bl	80074d0 <__kernel_rem_pio2>
 8007312:	9b02      	ldr	r3, [sp, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	4683      	mov	fp, r0
 8007318:	f6bf ae46 	bge.w	8006fa8 <__ieee754_rem_pio2+0x80>
 800731c:	e9da 2100 	ldrd	r2, r1, [sl]
 8007320:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007324:	e9ca 2300 	strd	r2, r3, [sl]
 8007328:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800732c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007330:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8007334:	e73a      	b.n	80071ac <__ieee754_rem_pio2+0x284>
 8007336:	bf00      	nop
 8007338:	41700000 	.word	0x41700000
 800733c:	080269c0 	.word	0x080269c0

08007340 <__kernel_cos>:
 8007340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007344:	ec57 6b10 	vmov	r6, r7, d0
 8007348:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800734c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8007350:	ed8d 1b00 	vstr	d1, [sp]
 8007354:	da07      	bge.n	8007366 <__kernel_cos+0x26>
 8007356:	ee10 0a10 	vmov	r0, s0
 800735a:	4639      	mov	r1, r7
 800735c:	f7f9 fbf6 	bl	8000b4c <__aeabi_d2iz>
 8007360:	2800      	cmp	r0, #0
 8007362:	f000 8088 	beq.w	8007476 <__kernel_cos+0x136>
 8007366:	4632      	mov	r2, r6
 8007368:	463b      	mov	r3, r7
 800736a:	4630      	mov	r0, r6
 800736c:	4639      	mov	r1, r7
 800736e:	f7f9 f953 	bl	8000618 <__aeabi_dmul>
 8007372:	4b51      	ldr	r3, [pc, #324]	; (80074b8 <__kernel_cos+0x178>)
 8007374:	2200      	movs	r2, #0
 8007376:	4604      	mov	r4, r0
 8007378:	460d      	mov	r5, r1
 800737a:	f7f9 f94d 	bl	8000618 <__aeabi_dmul>
 800737e:	a340      	add	r3, pc, #256	; (adr r3, 8007480 <__kernel_cos+0x140>)
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	4682      	mov	sl, r0
 8007386:	468b      	mov	fp, r1
 8007388:	4620      	mov	r0, r4
 800738a:	4629      	mov	r1, r5
 800738c:	f7f9 f944 	bl	8000618 <__aeabi_dmul>
 8007390:	a33d      	add	r3, pc, #244	; (adr r3, 8007488 <__kernel_cos+0x148>)
 8007392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007396:	f7f8 ff89 	bl	80002ac <__adddf3>
 800739a:	4622      	mov	r2, r4
 800739c:	462b      	mov	r3, r5
 800739e:	f7f9 f93b 	bl	8000618 <__aeabi_dmul>
 80073a2:	a33b      	add	r3, pc, #236	; (adr r3, 8007490 <__kernel_cos+0x150>)
 80073a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a8:	f7f8 ff7e 	bl	80002a8 <__aeabi_dsub>
 80073ac:	4622      	mov	r2, r4
 80073ae:	462b      	mov	r3, r5
 80073b0:	f7f9 f932 	bl	8000618 <__aeabi_dmul>
 80073b4:	a338      	add	r3, pc, #224	; (adr r3, 8007498 <__kernel_cos+0x158>)
 80073b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ba:	f7f8 ff77 	bl	80002ac <__adddf3>
 80073be:	4622      	mov	r2, r4
 80073c0:	462b      	mov	r3, r5
 80073c2:	f7f9 f929 	bl	8000618 <__aeabi_dmul>
 80073c6:	a336      	add	r3, pc, #216	; (adr r3, 80074a0 <__kernel_cos+0x160>)
 80073c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073cc:	f7f8 ff6c 	bl	80002a8 <__aeabi_dsub>
 80073d0:	4622      	mov	r2, r4
 80073d2:	462b      	mov	r3, r5
 80073d4:	f7f9 f920 	bl	8000618 <__aeabi_dmul>
 80073d8:	a333      	add	r3, pc, #204	; (adr r3, 80074a8 <__kernel_cos+0x168>)
 80073da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073de:	f7f8 ff65 	bl	80002ac <__adddf3>
 80073e2:	4622      	mov	r2, r4
 80073e4:	462b      	mov	r3, r5
 80073e6:	f7f9 f917 	bl	8000618 <__aeabi_dmul>
 80073ea:	4622      	mov	r2, r4
 80073ec:	462b      	mov	r3, r5
 80073ee:	f7f9 f913 	bl	8000618 <__aeabi_dmul>
 80073f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80073f6:	4604      	mov	r4, r0
 80073f8:	460d      	mov	r5, r1
 80073fa:	4630      	mov	r0, r6
 80073fc:	4639      	mov	r1, r7
 80073fe:	f7f9 f90b 	bl	8000618 <__aeabi_dmul>
 8007402:	460b      	mov	r3, r1
 8007404:	4602      	mov	r2, r0
 8007406:	4629      	mov	r1, r5
 8007408:	4620      	mov	r0, r4
 800740a:	f7f8 ff4d 	bl	80002a8 <__aeabi_dsub>
 800740e:	4b2b      	ldr	r3, [pc, #172]	; (80074bc <__kernel_cos+0x17c>)
 8007410:	4598      	cmp	r8, r3
 8007412:	4606      	mov	r6, r0
 8007414:	460f      	mov	r7, r1
 8007416:	dc10      	bgt.n	800743a <__kernel_cos+0xfa>
 8007418:	4602      	mov	r2, r0
 800741a:	460b      	mov	r3, r1
 800741c:	4650      	mov	r0, sl
 800741e:	4659      	mov	r1, fp
 8007420:	f7f8 ff42 	bl	80002a8 <__aeabi_dsub>
 8007424:	460b      	mov	r3, r1
 8007426:	4926      	ldr	r1, [pc, #152]	; (80074c0 <__kernel_cos+0x180>)
 8007428:	4602      	mov	r2, r0
 800742a:	2000      	movs	r0, #0
 800742c:	f7f8 ff3c 	bl	80002a8 <__aeabi_dsub>
 8007430:	ec41 0b10 	vmov	d0, r0, r1
 8007434:	b003      	add	sp, #12
 8007436:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800743a:	4b22      	ldr	r3, [pc, #136]	; (80074c4 <__kernel_cos+0x184>)
 800743c:	4920      	ldr	r1, [pc, #128]	; (80074c0 <__kernel_cos+0x180>)
 800743e:	4598      	cmp	r8, r3
 8007440:	bfcc      	ite	gt
 8007442:	4d21      	ldrgt	r5, [pc, #132]	; (80074c8 <__kernel_cos+0x188>)
 8007444:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8007448:	2400      	movs	r4, #0
 800744a:	4622      	mov	r2, r4
 800744c:	462b      	mov	r3, r5
 800744e:	2000      	movs	r0, #0
 8007450:	f7f8 ff2a 	bl	80002a8 <__aeabi_dsub>
 8007454:	4622      	mov	r2, r4
 8007456:	4680      	mov	r8, r0
 8007458:	4689      	mov	r9, r1
 800745a:	462b      	mov	r3, r5
 800745c:	4650      	mov	r0, sl
 800745e:	4659      	mov	r1, fp
 8007460:	f7f8 ff22 	bl	80002a8 <__aeabi_dsub>
 8007464:	4632      	mov	r2, r6
 8007466:	463b      	mov	r3, r7
 8007468:	f7f8 ff1e 	bl	80002a8 <__aeabi_dsub>
 800746c:	4602      	mov	r2, r0
 800746e:	460b      	mov	r3, r1
 8007470:	4640      	mov	r0, r8
 8007472:	4649      	mov	r1, r9
 8007474:	e7da      	b.n	800742c <__kernel_cos+0xec>
 8007476:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80074b0 <__kernel_cos+0x170>
 800747a:	e7db      	b.n	8007434 <__kernel_cos+0xf4>
 800747c:	f3af 8000 	nop.w
 8007480:	be8838d4 	.word	0xbe8838d4
 8007484:	bda8fae9 	.word	0xbda8fae9
 8007488:	bdb4b1c4 	.word	0xbdb4b1c4
 800748c:	3e21ee9e 	.word	0x3e21ee9e
 8007490:	809c52ad 	.word	0x809c52ad
 8007494:	3e927e4f 	.word	0x3e927e4f
 8007498:	19cb1590 	.word	0x19cb1590
 800749c:	3efa01a0 	.word	0x3efa01a0
 80074a0:	16c15177 	.word	0x16c15177
 80074a4:	3f56c16c 	.word	0x3f56c16c
 80074a8:	5555554c 	.word	0x5555554c
 80074ac:	3fa55555 	.word	0x3fa55555
 80074b0:	00000000 	.word	0x00000000
 80074b4:	3ff00000 	.word	0x3ff00000
 80074b8:	3fe00000 	.word	0x3fe00000
 80074bc:	3fd33332 	.word	0x3fd33332
 80074c0:	3ff00000 	.word	0x3ff00000
 80074c4:	3fe90000 	.word	0x3fe90000
 80074c8:	3fd20000 	.word	0x3fd20000
 80074cc:	00000000 	.word	0x00000000

080074d0 <__kernel_rem_pio2>:
 80074d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074d4:	ed2d 8b02 	vpush	{d8}
 80074d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80074dc:	f112 0f14 	cmn.w	r2, #20
 80074e0:	9308      	str	r3, [sp, #32]
 80074e2:	9101      	str	r1, [sp, #4]
 80074e4:	4bc4      	ldr	r3, [pc, #784]	; (80077f8 <__kernel_rem_pio2+0x328>)
 80074e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80074e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80074ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80074ee:	9302      	str	r3, [sp, #8]
 80074f0:	9b08      	ldr	r3, [sp, #32]
 80074f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80074f6:	bfa8      	it	ge
 80074f8:	1ed4      	subge	r4, r2, #3
 80074fa:	9306      	str	r3, [sp, #24]
 80074fc:	bfb2      	itee	lt
 80074fe:	2400      	movlt	r4, #0
 8007500:	2318      	movge	r3, #24
 8007502:	fb94 f4f3 	sdivge	r4, r4, r3
 8007506:	f06f 0317 	mvn.w	r3, #23
 800750a:	fb04 3303 	mla	r3, r4, r3, r3
 800750e:	eb03 0a02 	add.w	sl, r3, r2
 8007512:	9b02      	ldr	r3, [sp, #8]
 8007514:	9a06      	ldr	r2, [sp, #24]
 8007516:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 80077e8 <__kernel_rem_pio2+0x318>
 800751a:	eb03 0802 	add.w	r8, r3, r2
 800751e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8007520:	1aa7      	subs	r7, r4, r2
 8007522:	ae22      	add	r6, sp, #136	; 0x88
 8007524:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007528:	2500      	movs	r5, #0
 800752a:	4545      	cmp	r5, r8
 800752c:	dd13      	ble.n	8007556 <__kernel_rem_pio2+0x86>
 800752e:	9b08      	ldr	r3, [sp, #32]
 8007530:	ed9f 8bad 	vldr	d8, [pc, #692]	; 80077e8 <__kernel_rem_pio2+0x318>
 8007534:	aa22      	add	r2, sp, #136	; 0x88
 8007536:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800753a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800753e:	f04f 0800 	mov.w	r8, #0
 8007542:	9b02      	ldr	r3, [sp, #8]
 8007544:	4598      	cmp	r8, r3
 8007546:	dc2f      	bgt.n	80075a8 <__kernel_rem_pio2+0xd8>
 8007548:	ed8d 8b04 	vstr	d8, [sp, #16]
 800754c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8007550:	462f      	mov	r7, r5
 8007552:	2600      	movs	r6, #0
 8007554:	e01b      	b.n	800758e <__kernel_rem_pio2+0xbe>
 8007556:	42ef      	cmn	r7, r5
 8007558:	d407      	bmi.n	800756a <__kernel_rem_pio2+0x9a>
 800755a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800755e:	f7f8 fff1 	bl	8000544 <__aeabi_i2d>
 8007562:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007566:	3501      	adds	r5, #1
 8007568:	e7df      	b.n	800752a <__kernel_rem_pio2+0x5a>
 800756a:	ec51 0b18 	vmov	r0, r1, d8
 800756e:	e7f8      	b.n	8007562 <__kernel_rem_pio2+0x92>
 8007570:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007574:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8007578:	f7f9 f84e 	bl	8000618 <__aeabi_dmul>
 800757c:	4602      	mov	r2, r0
 800757e:	460b      	mov	r3, r1
 8007580:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007584:	f7f8 fe92 	bl	80002ac <__adddf3>
 8007588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800758c:	3601      	adds	r6, #1
 800758e:	9b06      	ldr	r3, [sp, #24]
 8007590:	429e      	cmp	r6, r3
 8007592:	f1a7 0708 	sub.w	r7, r7, #8
 8007596:	ddeb      	ble.n	8007570 <__kernel_rem_pio2+0xa0>
 8007598:	ed9d 7b04 	vldr	d7, [sp, #16]
 800759c:	f108 0801 	add.w	r8, r8, #1
 80075a0:	ecab 7b02 	vstmia	fp!, {d7}
 80075a4:	3508      	adds	r5, #8
 80075a6:	e7cc      	b.n	8007542 <__kernel_rem_pio2+0x72>
 80075a8:	9b02      	ldr	r3, [sp, #8]
 80075aa:	aa0e      	add	r2, sp, #56	; 0x38
 80075ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80075b0:	930d      	str	r3, [sp, #52]	; 0x34
 80075b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80075b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80075b8:	9c02      	ldr	r4, [sp, #8]
 80075ba:	930c      	str	r3, [sp, #48]	; 0x30
 80075bc:	00e3      	lsls	r3, r4, #3
 80075be:	930a      	str	r3, [sp, #40]	; 0x28
 80075c0:	ab9a      	add	r3, sp, #616	; 0x268
 80075c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80075ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80075ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80075d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80075d4:	46c3      	mov	fp, r8
 80075d6:	46a1      	mov	r9, r4
 80075d8:	f1b9 0f00 	cmp.w	r9, #0
 80075dc:	f1a5 0508 	sub.w	r5, r5, #8
 80075e0:	dc77      	bgt.n	80076d2 <__kernel_rem_pio2+0x202>
 80075e2:	ec47 6b10 	vmov	d0, r6, r7
 80075e6:	4650      	mov	r0, sl
 80075e8:	f000 fc0a 	bl	8007e00 <scalbn>
 80075ec:	ec57 6b10 	vmov	r6, r7, d0
 80075f0:	2200      	movs	r2, #0
 80075f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80075f6:	ee10 0a10 	vmov	r0, s0
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f9 f80c 	bl	8000618 <__aeabi_dmul>
 8007600:	ec41 0b10 	vmov	d0, r0, r1
 8007604:	f000 fb7c 	bl	8007d00 <floor>
 8007608:	4b7c      	ldr	r3, [pc, #496]	; (80077fc <__kernel_rem_pio2+0x32c>)
 800760a:	ec51 0b10 	vmov	r0, r1, d0
 800760e:	2200      	movs	r2, #0
 8007610:	f7f9 f802 	bl	8000618 <__aeabi_dmul>
 8007614:	4602      	mov	r2, r0
 8007616:	460b      	mov	r3, r1
 8007618:	4630      	mov	r0, r6
 800761a:	4639      	mov	r1, r7
 800761c:	f7f8 fe44 	bl	80002a8 <__aeabi_dsub>
 8007620:	460f      	mov	r7, r1
 8007622:	4606      	mov	r6, r0
 8007624:	f7f9 fa92 	bl	8000b4c <__aeabi_d2iz>
 8007628:	9004      	str	r0, [sp, #16]
 800762a:	f7f8 ff8b 	bl	8000544 <__aeabi_i2d>
 800762e:	4602      	mov	r2, r0
 8007630:	460b      	mov	r3, r1
 8007632:	4630      	mov	r0, r6
 8007634:	4639      	mov	r1, r7
 8007636:	f7f8 fe37 	bl	80002a8 <__aeabi_dsub>
 800763a:	f1ba 0f00 	cmp.w	sl, #0
 800763e:	4606      	mov	r6, r0
 8007640:	460f      	mov	r7, r1
 8007642:	dd6d      	ble.n	8007720 <__kernel_rem_pio2+0x250>
 8007644:	1e62      	subs	r2, r4, #1
 8007646:	ab0e      	add	r3, sp, #56	; 0x38
 8007648:	9d04      	ldr	r5, [sp, #16]
 800764a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800764e:	f1ca 0118 	rsb	r1, sl, #24
 8007652:	fa40 f301 	asr.w	r3, r0, r1
 8007656:	441d      	add	r5, r3
 8007658:	408b      	lsls	r3, r1
 800765a:	1ac0      	subs	r0, r0, r3
 800765c:	ab0e      	add	r3, sp, #56	; 0x38
 800765e:	9504      	str	r5, [sp, #16]
 8007660:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8007664:	f1ca 0317 	rsb	r3, sl, #23
 8007668:	fa40 fb03 	asr.w	fp, r0, r3
 800766c:	f1bb 0f00 	cmp.w	fp, #0
 8007670:	dd65      	ble.n	800773e <__kernel_rem_pio2+0x26e>
 8007672:	9b04      	ldr	r3, [sp, #16]
 8007674:	2200      	movs	r2, #0
 8007676:	3301      	adds	r3, #1
 8007678:	9304      	str	r3, [sp, #16]
 800767a:	4615      	mov	r5, r2
 800767c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8007680:	4294      	cmp	r4, r2
 8007682:	f300 809c 	bgt.w	80077be <__kernel_rem_pio2+0x2ee>
 8007686:	f1ba 0f00 	cmp.w	sl, #0
 800768a:	dd07      	ble.n	800769c <__kernel_rem_pio2+0x1cc>
 800768c:	f1ba 0f01 	cmp.w	sl, #1
 8007690:	f000 80c0 	beq.w	8007814 <__kernel_rem_pio2+0x344>
 8007694:	f1ba 0f02 	cmp.w	sl, #2
 8007698:	f000 80c6 	beq.w	8007828 <__kernel_rem_pio2+0x358>
 800769c:	f1bb 0f02 	cmp.w	fp, #2
 80076a0:	d14d      	bne.n	800773e <__kernel_rem_pio2+0x26e>
 80076a2:	4632      	mov	r2, r6
 80076a4:	463b      	mov	r3, r7
 80076a6:	4956      	ldr	r1, [pc, #344]	; (8007800 <__kernel_rem_pio2+0x330>)
 80076a8:	2000      	movs	r0, #0
 80076aa:	f7f8 fdfd 	bl	80002a8 <__aeabi_dsub>
 80076ae:	4606      	mov	r6, r0
 80076b0:	460f      	mov	r7, r1
 80076b2:	2d00      	cmp	r5, #0
 80076b4:	d043      	beq.n	800773e <__kernel_rem_pio2+0x26e>
 80076b6:	4650      	mov	r0, sl
 80076b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80077f0 <__kernel_rem_pio2+0x320>
 80076bc:	f000 fba0 	bl	8007e00 <scalbn>
 80076c0:	4630      	mov	r0, r6
 80076c2:	4639      	mov	r1, r7
 80076c4:	ec53 2b10 	vmov	r2, r3, d0
 80076c8:	f7f8 fdee 	bl	80002a8 <__aeabi_dsub>
 80076cc:	4606      	mov	r6, r0
 80076ce:	460f      	mov	r7, r1
 80076d0:	e035      	b.n	800773e <__kernel_rem_pio2+0x26e>
 80076d2:	4b4c      	ldr	r3, [pc, #304]	; (8007804 <__kernel_rem_pio2+0x334>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	4630      	mov	r0, r6
 80076d8:	4639      	mov	r1, r7
 80076da:	f7f8 ff9d 	bl	8000618 <__aeabi_dmul>
 80076de:	f7f9 fa35 	bl	8000b4c <__aeabi_d2iz>
 80076e2:	f7f8 ff2f 	bl	8000544 <__aeabi_i2d>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	ec43 2b18 	vmov	d8, r2, r3
 80076ee:	4b46      	ldr	r3, [pc, #280]	; (8007808 <__kernel_rem_pio2+0x338>)
 80076f0:	2200      	movs	r2, #0
 80076f2:	f7f8 ff91 	bl	8000618 <__aeabi_dmul>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4630      	mov	r0, r6
 80076fc:	4639      	mov	r1, r7
 80076fe:	f7f8 fdd3 	bl	80002a8 <__aeabi_dsub>
 8007702:	f7f9 fa23 	bl	8000b4c <__aeabi_d2iz>
 8007706:	e9d5 2300 	ldrd	r2, r3, [r5]
 800770a:	f84b 0b04 	str.w	r0, [fp], #4
 800770e:	ec51 0b18 	vmov	r0, r1, d8
 8007712:	f7f8 fdcb 	bl	80002ac <__adddf3>
 8007716:	f109 39ff 	add.w	r9, r9, #4294967295
 800771a:	4606      	mov	r6, r0
 800771c:	460f      	mov	r7, r1
 800771e:	e75b      	b.n	80075d8 <__kernel_rem_pio2+0x108>
 8007720:	d106      	bne.n	8007730 <__kernel_rem_pio2+0x260>
 8007722:	1e63      	subs	r3, r4, #1
 8007724:	aa0e      	add	r2, sp, #56	; 0x38
 8007726:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800772a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800772e:	e79d      	b.n	800766c <__kernel_rem_pio2+0x19c>
 8007730:	4b36      	ldr	r3, [pc, #216]	; (800780c <__kernel_rem_pio2+0x33c>)
 8007732:	2200      	movs	r2, #0
 8007734:	f7f9 f9f6 	bl	8000b24 <__aeabi_dcmpge>
 8007738:	2800      	cmp	r0, #0
 800773a:	d13d      	bne.n	80077b8 <__kernel_rem_pio2+0x2e8>
 800773c:	4683      	mov	fp, r0
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	4630      	mov	r0, r6
 8007744:	4639      	mov	r1, r7
 8007746:	f7f9 f9cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800774a:	2800      	cmp	r0, #0
 800774c:	f000 80c0 	beq.w	80078d0 <__kernel_rem_pio2+0x400>
 8007750:	1e65      	subs	r5, r4, #1
 8007752:	462b      	mov	r3, r5
 8007754:	2200      	movs	r2, #0
 8007756:	9902      	ldr	r1, [sp, #8]
 8007758:	428b      	cmp	r3, r1
 800775a:	da6c      	bge.n	8007836 <__kernel_rem_pio2+0x366>
 800775c:	2a00      	cmp	r2, #0
 800775e:	f000 8089 	beq.w	8007874 <__kernel_rem_pio2+0x3a4>
 8007762:	ab0e      	add	r3, sp, #56	; 0x38
 8007764:	f1aa 0a18 	sub.w	sl, sl, #24
 8007768:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800776c:	2b00      	cmp	r3, #0
 800776e:	f000 80ad 	beq.w	80078cc <__kernel_rem_pio2+0x3fc>
 8007772:	4650      	mov	r0, sl
 8007774:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 80077f0 <__kernel_rem_pio2+0x320>
 8007778:	f000 fb42 	bl	8007e00 <scalbn>
 800777c:	ab9a      	add	r3, sp, #616	; 0x268
 800777e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007782:	ec57 6b10 	vmov	r6, r7, d0
 8007786:	00ec      	lsls	r4, r5, #3
 8007788:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800778c:	46aa      	mov	sl, r5
 800778e:	f1ba 0f00 	cmp.w	sl, #0
 8007792:	f280 80d6 	bge.w	8007942 <__kernel_rem_pio2+0x472>
 8007796:	ed9f 8b14 	vldr	d8, [pc, #80]	; 80077e8 <__kernel_rem_pio2+0x318>
 800779a:	462e      	mov	r6, r5
 800779c:	2e00      	cmp	r6, #0
 800779e:	f2c0 8104 	blt.w	80079aa <__kernel_rem_pio2+0x4da>
 80077a2:	ab72      	add	r3, sp, #456	; 0x1c8
 80077a4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80077a8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8007810 <__kernel_rem_pio2+0x340>
 80077ac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80077b0:	f04f 0800 	mov.w	r8, #0
 80077b4:	1baf      	subs	r7, r5, r6
 80077b6:	e0ea      	b.n	800798e <__kernel_rem_pio2+0x4be>
 80077b8:	f04f 0b02 	mov.w	fp, #2
 80077bc:	e759      	b.n	8007672 <__kernel_rem_pio2+0x1a2>
 80077be:	f8d8 3000 	ldr.w	r3, [r8]
 80077c2:	b955      	cbnz	r5, 80077da <__kernel_rem_pio2+0x30a>
 80077c4:	b123      	cbz	r3, 80077d0 <__kernel_rem_pio2+0x300>
 80077c6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80077ca:	f8c8 3000 	str.w	r3, [r8]
 80077ce:	2301      	movs	r3, #1
 80077d0:	3201      	adds	r2, #1
 80077d2:	f108 0804 	add.w	r8, r8, #4
 80077d6:	461d      	mov	r5, r3
 80077d8:	e752      	b.n	8007680 <__kernel_rem_pio2+0x1b0>
 80077da:	1acb      	subs	r3, r1, r3
 80077dc:	f8c8 3000 	str.w	r3, [r8]
 80077e0:	462b      	mov	r3, r5
 80077e2:	e7f5      	b.n	80077d0 <__kernel_rem_pio2+0x300>
 80077e4:	f3af 8000 	nop.w
	...
 80077f4:	3ff00000 	.word	0x3ff00000
 80077f8:	08026b08 	.word	0x08026b08
 80077fc:	40200000 	.word	0x40200000
 8007800:	3ff00000 	.word	0x3ff00000
 8007804:	3e700000 	.word	0x3e700000
 8007808:	41700000 	.word	0x41700000
 800780c:	3fe00000 	.word	0x3fe00000
 8007810:	08026ac8 	.word	0x08026ac8
 8007814:	1e62      	subs	r2, r4, #1
 8007816:	ab0e      	add	r3, sp, #56	; 0x38
 8007818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8007820:	a90e      	add	r1, sp, #56	; 0x38
 8007822:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8007826:	e739      	b.n	800769c <__kernel_rem_pio2+0x1cc>
 8007828:	1e62      	subs	r2, r4, #1
 800782a:	ab0e      	add	r3, sp, #56	; 0x38
 800782c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007830:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007834:	e7f4      	b.n	8007820 <__kernel_rem_pio2+0x350>
 8007836:	a90e      	add	r1, sp, #56	; 0x38
 8007838:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800783c:	3b01      	subs	r3, #1
 800783e:	430a      	orrs	r2, r1
 8007840:	e789      	b.n	8007756 <__kernel_rem_pio2+0x286>
 8007842:	3301      	adds	r3, #1
 8007844:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007848:	2900      	cmp	r1, #0
 800784a:	d0fa      	beq.n	8007842 <__kernel_rem_pio2+0x372>
 800784c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800784e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8007852:	446a      	add	r2, sp
 8007854:	3a98      	subs	r2, #152	; 0x98
 8007856:	920a      	str	r2, [sp, #40]	; 0x28
 8007858:	9a08      	ldr	r2, [sp, #32]
 800785a:	18e3      	adds	r3, r4, r3
 800785c:	18a5      	adds	r5, r4, r2
 800785e:	aa22      	add	r2, sp, #136	; 0x88
 8007860:	f104 0801 	add.w	r8, r4, #1
 8007864:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8007868:	9304      	str	r3, [sp, #16]
 800786a:	9b04      	ldr	r3, [sp, #16]
 800786c:	4543      	cmp	r3, r8
 800786e:	da04      	bge.n	800787a <__kernel_rem_pio2+0x3aa>
 8007870:	461c      	mov	r4, r3
 8007872:	e6a3      	b.n	80075bc <__kernel_rem_pio2+0xec>
 8007874:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007876:	2301      	movs	r3, #1
 8007878:	e7e4      	b.n	8007844 <__kernel_rem_pio2+0x374>
 800787a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800787c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8007880:	f7f8 fe60 	bl	8000544 <__aeabi_i2d>
 8007884:	e8e5 0102 	strd	r0, r1, [r5], #8
 8007888:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800788a:	46ab      	mov	fp, r5
 800788c:	461c      	mov	r4, r3
 800788e:	f04f 0900 	mov.w	r9, #0
 8007892:	2600      	movs	r6, #0
 8007894:	2700      	movs	r7, #0
 8007896:	9b06      	ldr	r3, [sp, #24]
 8007898:	4599      	cmp	r9, r3
 800789a:	dd06      	ble.n	80078aa <__kernel_rem_pio2+0x3da>
 800789c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800789e:	e8e3 6702 	strd	r6, r7, [r3], #8
 80078a2:	f108 0801 	add.w	r8, r8, #1
 80078a6:	930a      	str	r3, [sp, #40]	; 0x28
 80078a8:	e7df      	b.n	800786a <__kernel_rem_pio2+0x39a>
 80078aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80078ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80078b2:	f7f8 feb1 	bl	8000618 <__aeabi_dmul>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	4630      	mov	r0, r6
 80078bc:	4639      	mov	r1, r7
 80078be:	f7f8 fcf5 	bl	80002ac <__adddf3>
 80078c2:	f109 0901 	add.w	r9, r9, #1
 80078c6:	4606      	mov	r6, r0
 80078c8:	460f      	mov	r7, r1
 80078ca:	e7e4      	b.n	8007896 <__kernel_rem_pio2+0x3c6>
 80078cc:	3d01      	subs	r5, #1
 80078ce:	e748      	b.n	8007762 <__kernel_rem_pio2+0x292>
 80078d0:	ec47 6b10 	vmov	d0, r6, r7
 80078d4:	f1ca 0000 	rsb	r0, sl, #0
 80078d8:	f000 fa92 	bl	8007e00 <scalbn>
 80078dc:	ec57 6b10 	vmov	r6, r7, d0
 80078e0:	4ba0      	ldr	r3, [pc, #640]	; (8007b64 <__kernel_rem_pio2+0x694>)
 80078e2:	ee10 0a10 	vmov	r0, s0
 80078e6:	2200      	movs	r2, #0
 80078e8:	4639      	mov	r1, r7
 80078ea:	f7f9 f91b 	bl	8000b24 <__aeabi_dcmpge>
 80078ee:	b1f8      	cbz	r0, 8007930 <__kernel_rem_pio2+0x460>
 80078f0:	4b9d      	ldr	r3, [pc, #628]	; (8007b68 <__kernel_rem_pio2+0x698>)
 80078f2:	2200      	movs	r2, #0
 80078f4:	4630      	mov	r0, r6
 80078f6:	4639      	mov	r1, r7
 80078f8:	f7f8 fe8e 	bl	8000618 <__aeabi_dmul>
 80078fc:	f7f9 f926 	bl	8000b4c <__aeabi_d2iz>
 8007900:	4680      	mov	r8, r0
 8007902:	f7f8 fe1f 	bl	8000544 <__aeabi_i2d>
 8007906:	4b97      	ldr	r3, [pc, #604]	; (8007b64 <__kernel_rem_pio2+0x694>)
 8007908:	2200      	movs	r2, #0
 800790a:	f7f8 fe85 	bl	8000618 <__aeabi_dmul>
 800790e:	460b      	mov	r3, r1
 8007910:	4602      	mov	r2, r0
 8007912:	4639      	mov	r1, r7
 8007914:	4630      	mov	r0, r6
 8007916:	f7f8 fcc7 	bl	80002a8 <__aeabi_dsub>
 800791a:	f7f9 f917 	bl	8000b4c <__aeabi_d2iz>
 800791e:	1c65      	adds	r5, r4, #1
 8007920:	ab0e      	add	r3, sp, #56	; 0x38
 8007922:	f10a 0a18 	add.w	sl, sl, #24
 8007926:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800792a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800792e:	e720      	b.n	8007772 <__kernel_rem_pio2+0x2a2>
 8007930:	4630      	mov	r0, r6
 8007932:	4639      	mov	r1, r7
 8007934:	f7f9 f90a 	bl	8000b4c <__aeabi_d2iz>
 8007938:	ab0e      	add	r3, sp, #56	; 0x38
 800793a:	4625      	mov	r5, r4
 800793c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8007940:	e717      	b.n	8007772 <__kernel_rem_pio2+0x2a2>
 8007942:	ab0e      	add	r3, sp, #56	; 0x38
 8007944:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8007948:	f7f8 fdfc 	bl	8000544 <__aeabi_i2d>
 800794c:	4632      	mov	r2, r6
 800794e:	463b      	mov	r3, r7
 8007950:	f7f8 fe62 	bl	8000618 <__aeabi_dmul>
 8007954:	4b84      	ldr	r3, [pc, #528]	; (8007b68 <__kernel_rem_pio2+0x698>)
 8007956:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800795a:	2200      	movs	r2, #0
 800795c:	4630      	mov	r0, r6
 800795e:	4639      	mov	r1, r7
 8007960:	f7f8 fe5a 	bl	8000618 <__aeabi_dmul>
 8007964:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007968:	4606      	mov	r6, r0
 800796a:	460f      	mov	r7, r1
 800796c:	e70f      	b.n	800778e <__kernel_rem_pio2+0x2be>
 800796e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8007972:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8007976:	f7f8 fe4f 	bl	8000618 <__aeabi_dmul>
 800797a:	4602      	mov	r2, r0
 800797c:	460b      	mov	r3, r1
 800797e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007982:	f7f8 fc93 	bl	80002ac <__adddf3>
 8007986:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800798a:	f108 0801 	add.w	r8, r8, #1
 800798e:	9b02      	ldr	r3, [sp, #8]
 8007990:	4598      	cmp	r8, r3
 8007992:	dc01      	bgt.n	8007998 <__kernel_rem_pio2+0x4c8>
 8007994:	45b8      	cmp	r8, r7
 8007996:	ddea      	ble.n	800796e <__kernel_rem_pio2+0x49e>
 8007998:	ed9d 7b06 	vldr	d7, [sp, #24]
 800799c:	ab4a      	add	r3, sp, #296	; 0x128
 800799e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80079a2:	ed87 7b00 	vstr	d7, [r7]
 80079a6:	3e01      	subs	r6, #1
 80079a8:	e6f8      	b.n	800779c <__kernel_rem_pio2+0x2cc>
 80079aa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80079ac:	2b02      	cmp	r3, #2
 80079ae:	dc0b      	bgt.n	80079c8 <__kernel_rem_pio2+0x4f8>
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	dc35      	bgt.n	8007a20 <__kernel_rem_pio2+0x550>
 80079b4:	d059      	beq.n	8007a6a <__kernel_rem_pio2+0x59a>
 80079b6:	9b04      	ldr	r3, [sp, #16]
 80079b8:	f003 0007 	and.w	r0, r3, #7
 80079bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80079c0:	ecbd 8b02 	vpop	{d8}
 80079c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80079ca:	2b03      	cmp	r3, #3
 80079cc:	d1f3      	bne.n	80079b6 <__kernel_rem_pio2+0x4e6>
 80079ce:	ab4a      	add	r3, sp, #296	; 0x128
 80079d0:	4423      	add	r3, r4
 80079d2:	9306      	str	r3, [sp, #24]
 80079d4:	461c      	mov	r4, r3
 80079d6:	469a      	mov	sl, r3
 80079d8:	9502      	str	r5, [sp, #8]
 80079da:	9b02      	ldr	r3, [sp, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	f1aa 0a08 	sub.w	sl, sl, #8
 80079e2:	dc6b      	bgt.n	8007abc <__kernel_rem_pio2+0x5ec>
 80079e4:	46aa      	mov	sl, r5
 80079e6:	f1ba 0f01 	cmp.w	sl, #1
 80079ea:	f1a4 0408 	sub.w	r4, r4, #8
 80079ee:	f300 8085 	bgt.w	8007afc <__kernel_rem_pio2+0x62c>
 80079f2:	9c06      	ldr	r4, [sp, #24]
 80079f4:	2000      	movs	r0, #0
 80079f6:	3408      	adds	r4, #8
 80079f8:	2100      	movs	r1, #0
 80079fa:	2d01      	cmp	r5, #1
 80079fc:	f300 809d 	bgt.w	8007b3a <__kernel_rem_pio2+0x66a>
 8007a00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8007a04:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8007a08:	f1bb 0f00 	cmp.w	fp, #0
 8007a0c:	f040 809b 	bne.w	8007b46 <__kernel_rem_pio2+0x676>
 8007a10:	9b01      	ldr	r3, [sp, #4]
 8007a12:	e9c3 5600 	strd	r5, r6, [r3]
 8007a16:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8007a1a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8007a1e:	e7ca      	b.n	80079b6 <__kernel_rem_pio2+0x4e6>
 8007a20:	3408      	adds	r4, #8
 8007a22:	ab4a      	add	r3, sp, #296	; 0x128
 8007a24:	441c      	add	r4, r3
 8007a26:	462e      	mov	r6, r5
 8007a28:	2000      	movs	r0, #0
 8007a2a:	2100      	movs	r1, #0
 8007a2c:	2e00      	cmp	r6, #0
 8007a2e:	da36      	bge.n	8007a9e <__kernel_rem_pio2+0x5ce>
 8007a30:	f1bb 0f00 	cmp.w	fp, #0
 8007a34:	d039      	beq.n	8007aaa <__kernel_rem_pio2+0x5da>
 8007a36:	4602      	mov	r2, r0
 8007a38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a3c:	9c01      	ldr	r4, [sp, #4]
 8007a3e:	e9c4 2300 	strd	r2, r3, [r4]
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8007a4a:	f7f8 fc2d 	bl	80002a8 <__aeabi_dsub>
 8007a4e:	ae4c      	add	r6, sp, #304	; 0x130
 8007a50:	2401      	movs	r4, #1
 8007a52:	42a5      	cmp	r5, r4
 8007a54:	da2c      	bge.n	8007ab0 <__kernel_rem_pio2+0x5e0>
 8007a56:	f1bb 0f00 	cmp.w	fp, #0
 8007a5a:	d002      	beq.n	8007a62 <__kernel_rem_pio2+0x592>
 8007a5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a60:	4619      	mov	r1, r3
 8007a62:	9b01      	ldr	r3, [sp, #4]
 8007a64:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8007a68:	e7a5      	b.n	80079b6 <__kernel_rem_pio2+0x4e6>
 8007a6a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8007a6e:	eb0d 0403 	add.w	r4, sp, r3
 8007a72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8007a76:	2000      	movs	r0, #0
 8007a78:	2100      	movs	r1, #0
 8007a7a:	2d00      	cmp	r5, #0
 8007a7c:	da09      	bge.n	8007a92 <__kernel_rem_pio2+0x5c2>
 8007a7e:	f1bb 0f00 	cmp.w	fp, #0
 8007a82:	d002      	beq.n	8007a8a <__kernel_rem_pio2+0x5ba>
 8007a84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a88:	4619      	mov	r1, r3
 8007a8a:	9b01      	ldr	r3, [sp, #4]
 8007a8c:	e9c3 0100 	strd	r0, r1, [r3]
 8007a90:	e791      	b.n	80079b6 <__kernel_rem_pio2+0x4e6>
 8007a92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007a96:	f7f8 fc09 	bl	80002ac <__adddf3>
 8007a9a:	3d01      	subs	r5, #1
 8007a9c:	e7ed      	b.n	8007a7a <__kernel_rem_pio2+0x5aa>
 8007a9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007aa2:	f7f8 fc03 	bl	80002ac <__adddf3>
 8007aa6:	3e01      	subs	r6, #1
 8007aa8:	e7c0      	b.n	8007a2c <__kernel_rem_pio2+0x55c>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	e7c5      	b.n	8007a3c <__kernel_rem_pio2+0x56c>
 8007ab0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8007ab4:	f7f8 fbfa 	bl	80002ac <__adddf3>
 8007ab8:	3401      	adds	r4, #1
 8007aba:	e7ca      	b.n	8007a52 <__kernel_rem_pio2+0x582>
 8007abc:	e9da 8900 	ldrd	r8, r9, [sl]
 8007ac0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8007ac4:	9b02      	ldr	r3, [sp, #8]
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	9302      	str	r3, [sp, #8]
 8007aca:	4632      	mov	r2, r6
 8007acc:	463b      	mov	r3, r7
 8007ace:	4640      	mov	r0, r8
 8007ad0:	4649      	mov	r1, r9
 8007ad2:	f7f8 fbeb 	bl	80002ac <__adddf3>
 8007ad6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007ada:	4602      	mov	r2, r0
 8007adc:	460b      	mov	r3, r1
 8007ade:	4640      	mov	r0, r8
 8007ae0:	4649      	mov	r1, r9
 8007ae2:	f7f8 fbe1 	bl	80002a8 <__aeabi_dsub>
 8007ae6:	4632      	mov	r2, r6
 8007ae8:	463b      	mov	r3, r7
 8007aea:	f7f8 fbdf 	bl	80002ac <__adddf3>
 8007aee:	ed9d 7b08 	vldr	d7, [sp, #32]
 8007af2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8007af6:	ed8a 7b00 	vstr	d7, [sl]
 8007afa:	e76e      	b.n	80079da <__kernel_rem_pio2+0x50a>
 8007afc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007b00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8007b04:	4640      	mov	r0, r8
 8007b06:	4632      	mov	r2, r6
 8007b08:	463b      	mov	r3, r7
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	f7f8 fbce 	bl	80002ac <__adddf3>
 8007b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007b14:	4602      	mov	r2, r0
 8007b16:	460b      	mov	r3, r1
 8007b18:	4640      	mov	r0, r8
 8007b1a:	4649      	mov	r1, r9
 8007b1c:	f7f8 fbc4 	bl	80002a8 <__aeabi_dsub>
 8007b20:	4632      	mov	r2, r6
 8007b22:	463b      	mov	r3, r7
 8007b24:	f7f8 fbc2 	bl	80002ac <__adddf3>
 8007b28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007b2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007b30:	ed84 7b00 	vstr	d7, [r4]
 8007b34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007b38:	e755      	b.n	80079e6 <__kernel_rem_pio2+0x516>
 8007b3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8007b3e:	f7f8 fbb5 	bl	80002ac <__adddf3>
 8007b42:	3d01      	subs	r5, #1
 8007b44:	e759      	b.n	80079fa <__kernel_rem_pio2+0x52a>
 8007b46:	9b01      	ldr	r3, [sp, #4]
 8007b48:	9a01      	ldr	r2, [sp, #4]
 8007b4a:	601d      	str	r5, [r3, #0]
 8007b4c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8007b50:	605c      	str	r4, [r3, #4]
 8007b52:	609f      	str	r7, [r3, #8]
 8007b54:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8007b58:	60d3      	str	r3, [r2, #12]
 8007b5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b5e:	6110      	str	r0, [r2, #16]
 8007b60:	6153      	str	r3, [r2, #20]
 8007b62:	e728      	b.n	80079b6 <__kernel_rem_pio2+0x4e6>
 8007b64:	41700000 	.word	0x41700000
 8007b68:	3e700000 	.word	0x3e700000
 8007b6c:	00000000 	.word	0x00000000

08007b70 <__kernel_sin>:
 8007b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b74:	ed2d 8b04 	vpush	{d8-d9}
 8007b78:	eeb0 8a41 	vmov.f32	s16, s2
 8007b7c:	eef0 8a61 	vmov.f32	s17, s3
 8007b80:	ec55 4b10 	vmov	r4, r5, d0
 8007b84:	b083      	sub	sp, #12
 8007b86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007b8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8007b8e:	9001      	str	r0, [sp, #4]
 8007b90:	da06      	bge.n	8007ba0 <__kernel_sin+0x30>
 8007b92:	ee10 0a10 	vmov	r0, s0
 8007b96:	4629      	mov	r1, r5
 8007b98:	f7f8 ffd8 	bl	8000b4c <__aeabi_d2iz>
 8007b9c:	2800      	cmp	r0, #0
 8007b9e:	d051      	beq.n	8007c44 <__kernel_sin+0xd4>
 8007ba0:	4622      	mov	r2, r4
 8007ba2:	462b      	mov	r3, r5
 8007ba4:	4620      	mov	r0, r4
 8007ba6:	4629      	mov	r1, r5
 8007ba8:	f7f8 fd36 	bl	8000618 <__aeabi_dmul>
 8007bac:	4682      	mov	sl, r0
 8007bae:	468b      	mov	fp, r1
 8007bb0:	4602      	mov	r2, r0
 8007bb2:	460b      	mov	r3, r1
 8007bb4:	4620      	mov	r0, r4
 8007bb6:	4629      	mov	r1, r5
 8007bb8:	f7f8 fd2e 	bl	8000618 <__aeabi_dmul>
 8007bbc:	a341      	add	r3, pc, #260	; (adr r3, 8007cc4 <__kernel_sin+0x154>)
 8007bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bc2:	4680      	mov	r8, r0
 8007bc4:	4689      	mov	r9, r1
 8007bc6:	4650      	mov	r0, sl
 8007bc8:	4659      	mov	r1, fp
 8007bca:	f7f8 fd25 	bl	8000618 <__aeabi_dmul>
 8007bce:	a33f      	add	r3, pc, #252	; (adr r3, 8007ccc <__kernel_sin+0x15c>)
 8007bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bd4:	f7f8 fb68 	bl	80002a8 <__aeabi_dsub>
 8007bd8:	4652      	mov	r2, sl
 8007bda:	465b      	mov	r3, fp
 8007bdc:	f7f8 fd1c 	bl	8000618 <__aeabi_dmul>
 8007be0:	a33c      	add	r3, pc, #240	; (adr r3, 8007cd4 <__kernel_sin+0x164>)
 8007be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007be6:	f7f8 fb61 	bl	80002ac <__adddf3>
 8007bea:	4652      	mov	r2, sl
 8007bec:	465b      	mov	r3, fp
 8007bee:	f7f8 fd13 	bl	8000618 <__aeabi_dmul>
 8007bf2:	a33a      	add	r3, pc, #232	; (adr r3, 8007cdc <__kernel_sin+0x16c>)
 8007bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf8:	f7f8 fb56 	bl	80002a8 <__aeabi_dsub>
 8007bfc:	4652      	mov	r2, sl
 8007bfe:	465b      	mov	r3, fp
 8007c00:	f7f8 fd0a 	bl	8000618 <__aeabi_dmul>
 8007c04:	a337      	add	r3, pc, #220	; (adr r3, 8007ce4 <__kernel_sin+0x174>)
 8007c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c0a:	f7f8 fb4f 	bl	80002ac <__adddf3>
 8007c0e:	9b01      	ldr	r3, [sp, #4]
 8007c10:	4606      	mov	r6, r0
 8007c12:	460f      	mov	r7, r1
 8007c14:	b9eb      	cbnz	r3, 8007c52 <__kernel_sin+0xe2>
 8007c16:	4602      	mov	r2, r0
 8007c18:	460b      	mov	r3, r1
 8007c1a:	4650      	mov	r0, sl
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	f7f8 fcfb 	bl	8000618 <__aeabi_dmul>
 8007c22:	a325      	add	r3, pc, #148	; (adr r3, 8007cb8 <__kernel_sin+0x148>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f7f8 fb3e 	bl	80002a8 <__aeabi_dsub>
 8007c2c:	4642      	mov	r2, r8
 8007c2e:	464b      	mov	r3, r9
 8007c30:	f7f8 fcf2 	bl	8000618 <__aeabi_dmul>
 8007c34:	4602      	mov	r2, r0
 8007c36:	460b      	mov	r3, r1
 8007c38:	4620      	mov	r0, r4
 8007c3a:	4629      	mov	r1, r5
 8007c3c:	f7f8 fb36 	bl	80002ac <__adddf3>
 8007c40:	4604      	mov	r4, r0
 8007c42:	460d      	mov	r5, r1
 8007c44:	ec45 4b10 	vmov	d0, r4, r5
 8007c48:	b003      	add	sp, #12
 8007c4a:	ecbd 8b04 	vpop	{d8-d9}
 8007c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c52:	4b1b      	ldr	r3, [pc, #108]	; (8007cc0 <__kernel_sin+0x150>)
 8007c54:	ec51 0b18 	vmov	r0, r1, d8
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f7f8 fcdd 	bl	8000618 <__aeabi_dmul>
 8007c5e:	4632      	mov	r2, r6
 8007c60:	ec41 0b19 	vmov	d9, r0, r1
 8007c64:	463b      	mov	r3, r7
 8007c66:	4640      	mov	r0, r8
 8007c68:	4649      	mov	r1, r9
 8007c6a:	f7f8 fcd5 	bl	8000618 <__aeabi_dmul>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	460b      	mov	r3, r1
 8007c72:	ec51 0b19 	vmov	r0, r1, d9
 8007c76:	f7f8 fb17 	bl	80002a8 <__aeabi_dsub>
 8007c7a:	4652      	mov	r2, sl
 8007c7c:	465b      	mov	r3, fp
 8007c7e:	f7f8 fccb 	bl	8000618 <__aeabi_dmul>
 8007c82:	ec53 2b18 	vmov	r2, r3, d8
 8007c86:	f7f8 fb0f 	bl	80002a8 <__aeabi_dsub>
 8007c8a:	a30b      	add	r3, pc, #44	; (adr r3, 8007cb8 <__kernel_sin+0x148>)
 8007c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c90:	4606      	mov	r6, r0
 8007c92:	460f      	mov	r7, r1
 8007c94:	4640      	mov	r0, r8
 8007c96:	4649      	mov	r1, r9
 8007c98:	f7f8 fcbe 	bl	8000618 <__aeabi_dmul>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	460b      	mov	r3, r1
 8007ca0:	4630      	mov	r0, r6
 8007ca2:	4639      	mov	r1, r7
 8007ca4:	f7f8 fb02 	bl	80002ac <__adddf3>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	460b      	mov	r3, r1
 8007cac:	4620      	mov	r0, r4
 8007cae:	4629      	mov	r1, r5
 8007cb0:	f7f8 fafa 	bl	80002a8 <__aeabi_dsub>
 8007cb4:	e7c4      	b.n	8007c40 <__kernel_sin+0xd0>
 8007cb6:	bf00      	nop
 8007cb8:	55555549 	.word	0x55555549
 8007cbc:	3fc55555 	.word	0x3fc55555
 8007cc0:	3fe00000 	.word	0x3fe00000
 8007cc4:	5acfd57c 	.word	0x5acfd57c
 8007cc8:	3de5d93a 	.word	0x3de5d93a
 8007ccc:	8a2b9ceb 	.word	0x8a2b9ceb
 8007cd0:	3e5ae5e6 	.word	0x3e5ae5e6
 8007cd4:	57b1fe7d 	.word	0x57b1fe7d
 8007cd8:	3ec71de3 	.word	0x3ec71de3
 8007cdc:	19c161d5 	.word	0x19c161d5
 8007ce0:	3f2a01a0 	.word	0x3f2a01a0
 8007ce4:	1110f8a6 	.word	0x1110f8a6
 8007ce8:	3f811111 	.word	0x3f811111

08007cec <fabs>:
 8007cec:	ec51 0b10 	vmov	r0, r1, d0
 8007cf0:	ee10 2a10 	vmov	r2, s0
 8007cf4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007cf8:	ec43 2b10 	vmov	d0, r2, r3
 8007cfc:	4770      	bx	lr
	...

08007d00 <floor>:
 8007d00:	ec51 0b10 	vmov	r0, r1, d0
 8007d04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d08:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8007d0c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8007d10:	2e13      	cmp	r6, #19
 8007d12:	ee10 5a10 	vmov	r5, s0
 8007d16:	ee10 8a10 	vmov	r8, s0
 8007d1a:	460c      	mov	r4, r1
 8007d1c:	dc32      	bgt.n	8007d84 <floor+0x84>
 8007d1e:	2e00      	cmp	r6, #0
 8007d20:	da14      	bge.n	8007d4c <floor+0x4c>
 8007d22:	a333      	add	r3, pc, #204	; (adr r3, 8007df0 <floor+0xf0>)
 8007d24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d28:	f7f8 fac0 	bl	80002ac <__adddf3>
 8007d2c:	2200      	movs	r2, #0
 8007d2e:	2300      	movs	r3, #0
 8007d30:	f7f8 ff02 	bl	8000b38 <__aeabi_dcmpgt>
 8007d34:	b138      	cbz	r0, 8007d46 <floor+0x46>
 8007d36:	2c00      	cmp	r4, #0
 8007d38:	da57      	bge.n	8007dea <floor+0xea>
 8007d3a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8007d3e:	431d      	orrs	r5, r3
 8007d40:	d001      	beq.n	8007d46 <floor+0x46>
 8007d42:	4c2d      	ldr	r4, [pc, #180]	; (8007df8 <floor+0xf8>)
 8007d44:	2500      	movs	r5, #0
 8007d46:	4621      	mov	r1, r4
 8007d48:	4628      	mov	r0, r5
 8007d4a:	e025      	b.n	8007d98 <floor+0x98>
 8007d4c:	4f2b      	ldr	r7, [pc, #172]	; (8007dfc <floor+0xfc>)
 8007d4e:	4137      	asrs	r7, r6
 8007d50:	ea01 0307 	and.w	r3, r1, r7
 8007d54:	4303      	orrs	r3, r0
 8007d56:	d01f      	beq.n	8007d98 <floor+0x98>
 8007d58:	a325      	add	r3, pc, #148	; (adr r3, 8007df0 <floor+0xf0>)
 8007d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d5e:	f7f8 faa5 	bl	80002ac <__adddf3>
 8007d62:	2200      	movs	r2, #0
 8007d64:	2300      	movs	r3, #0
 8007d66:	f7f8 fee7 	bl	8000b38 <__aeabi_dcmpgt>
 8007d6a:	2800      	cmp	r0, #0
 8007d6c:	d0eb      	beq.n	8007d46 <floor+0x46>
 8007d6e:	2c00      	cmp	r4, #0
 8007d70:	bfbe      	ittt	lt
 8007d72:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8007d76:	fa43 f606 	asrlt.w	r6, r3, r6
 8007d7a:	19a4      	addlt	r4, r4, r6
 8007d7c:	ea24 0407 	bic.w	r4, r4, r7
 8007d80:	2500      	movs	r5, #0
 8007d82:	e7e0      	b.n	8007d46 <floor+0x46>
 8007d84:	2e33      	cmp	r6, #51	; 0x33
 8007d86:	dd0b      	ble.n	8007da0 <floor+0xa0>
 8007d88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007d8c:	d104      	bne.n	8007d98 <floor+0x98>
 8007d8e:	ee10 2a10 	vmov	r2, s0
 8007d92:	460b      	mov	r3, r1
 8007d94:	f7f8 fa8a 	bl	80002ac <__adddf3>
 8007d98:	ec41 0b10 	vmov	d0, r0, r1
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8007da4:	f04f 33ff 	mov.w	r3, #4294967295
 8007da8:	fa23 f707 	lsr.w	r7, r3, r7
 8007dac:	4207      	tst	r7, r0
 8007dae:	d0f3      	beq.n	8007d98 <floor+0x98>
 8007db0:	a30f      	add	r3, pc, #60	; (adr r3, 8007df0 <floor+0xf0>)
 8007db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007db6:	f7f8 fa79 	bl	80002ac <__adddf3>
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	f7f8 febb 	bl	8000b38 <__aeabi_dcmpgt>
 8007dc2:	2800      	cmp	r0, #0
 8007dc4:	d0bf      	beq.n	8007d46 <floor+0x46>
 8007dc6:	2c00      	cmp	r4, #0
 8007dc8:	da02      	bge.n	8007dd0 <floor+0xd0>
 8007dca:	2e14      	cmp	r6, #20
 8007dcc:	d103      	bne.n	8007dd6 <floor+0xd6>
 8007dce:	3401      	adds	r4, #1
 8007dd0:	ea25 0507 	bic.w	r5, r5, r7
 8007dd4:	e7b7      	b.n	8007d46 <floor+0x46>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8007ddc:	fa03 f606 	lsl.w	r6, r3, r6
 8007de0:	4435      	add	r5, r6
 8007de2:	4545      	cmp	r5, r8
 8007de4:	bf38      	it	cc
 8007de6:	18e4      	addcc	r4, r4, r3
 8007de8:	e7f2      	b.n	8007dd0 <floor+0xd0>
 8007dea:	2500      	movs	r5, #0
 8007dec:	462c      	mov	r4, r5
 8007dee:	e7aa      	b.n	8007d46 <floor+0x46>
 8007df0:	8800759c 	.word	0x8800759c
 8007df4:	7e37e43c 	.word	0x7e37e43c
 8007df8:	bff00000 	.word	0xbff00000
 8007dfc:	000fffff 	.word	0x000fffff

08007e00 <scalbn>:
 8007e00:	b570      	push	{r4, r5, r6, lr}
 8007e02:	ec55 4b10 	vmov	r4, r5, d0
 8007e06:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007e0a:	4606      	mov	r6, r0
 8007e0c:	462b      	mov	r3, r5
 8007e0e:	b99a      	cbnz	r2, 8007e38 <scalbn+0x38>
 8007e10:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007e14:	4323      	orrs	r3, r4
 8007e16:	d036      	beq.n	8007e86 <scalbn+0x86>
 8007e18:	4b39      	ldr	r3, [pc, #228]	; (8007f00 <scalbn+0x100>)
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	ee10 0a10 	vmov	r0, s0
 8007e20:	2200      	movs	r2, #0
 8007e22:	f7f8 fbf9 	bl	8000618 <__aeabi_dmul>
 8007e26:	4b37      	ldr	r3, [pc, #220]	; (8007f04 <scalbn+0x104>)
 8007e28:	429e      	cmp	r6, r3
 8007e2a:	4604      	mov	r4, r0
 8007e2c:	460d      	mov	r5, r1
 8007e2e:	da10      	bge.n	8007e52 <scalbn+0x52>
 8007e30:	a32b      	add	r3, pc, #172	; (adr r3, 8007ee0 <scalbn+0xe0>)
 8007e32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e36:	e03a      	b.n	8007eae <scalbn+0xae>
 8007e38:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007e3c:	428a      	cmp	r2, r1
 8007e3e:	d10c      	bne.n	8007e5a <scalbn+0x5a>
 8007e40:	ee10 2a10 	vmov	r2, s0
 8007e44:	4620      	mov	r0, r4
 8007e46:	4629      	mov	r1, r5
 8007e48:	f7f8 fa30 	bl	80002ac <__adddf3>
 8007e4c:	4604      	mov	r4, r0
 8007e4e:	460d      	mov	r5, r1
 8007e50:	e019      	b.n	8007e86 <scalbn+0x86>
 8007e52:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007e56:	460b      	mov	r3, r1
 8007e58:	3a36      	subs	r2, #54	; 0x36
 8007e5a:	4432      	add	r2, r6
 8007e5c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007e60:	428a      	cmp	r2, r1
 8007e62:	dd08      	ble.n	8007e76 <scalbn+0x76>
 8007e64:	2d00      	cmp	r5, #0
 8007e66:	a120      	add	r1, pc, #128	; (adr r1, 8007ee8 <scalbn+0xe8>)
 8007e68:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e6c:	da1c      	bge.n	8007ea8 <scalbn+0xa8>
 8007e6e:	a120      	add	r1, pc, #128	; (adr r1, 8007ef0 <scalbn+0xf0>)
 8007e70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e74:	e018      	b.n	8007ea8 <scalbn+0xa8>
 8007e76:	2a00      	cmp	r2, #0
 8007e78:	dd08      	ble.n	8007e8c <scalbn+0x8c>
 8007e7a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007e7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007e82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007e86:	ec45 4b10 	vmov	d0, r4, r5
 8007e8a:	bd70      	pop	{r4, r5, r6, pc}
 8007e8c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007e90:	da19      	bge.n	8007ec6 <scalbn+0xc6>
 8007e92:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007e96:	429e      	cmp	r6, r3
 8007e98:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007e9c:	dd0a      	ble.n	8007eb4 <scalbn+0xb4>
 8007e9e:	a112      	add	r1, pc, #72	; (adr r1, 8007ee8 <scalbn+0xe8>)
 8007ea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d1e2      	bne.n	8007e6e <scalbn+0x6e>
 8007ea8:	a30f      	add	r3, pc, #60	; (adr r3, 8007ee8 <scalbn+0xe8>)
 8007eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eae:	f7f8 fbb3 	bl	8000618 <__aeabi_dmul>
 8007eb2:	e7cb      	b.n	8007e4c <scalbn+0x4c>
 8007eb4:	a10a      	add	r1, pc, #40	; (adr r1, 8007ee0 <scalbn+0xe0>)
 8007eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d0b8      	beq.n	8007e30 <scalbn+0x30>
 8007ebe:	a10e      	add	r1, pc, #56	; (adr r1, 8007ef8 <scalbn+0xf8>)
 8007ec0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ec4:	e7b4      	b.n	8007e30 <scalbn+0x30>
 8007ec6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007eca:	3236      	adds	r2, #54	; 0x36
 8007ecc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007ed0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007ed4:	4620      	mov	r0, r4
 8007ed6:	4b0c      	ldr	r3, [pc, #48]	; (8007f08 <scalbn+0x108>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	e7e8      	b.n	8007eae <scalbn+0xae>
 8007edc:	f3af 8000 	nop.w
 8007ee0:	c2f8f359 	.word	0xc2f8f359
 8007ee4:	01a56e1f 	.word	0x01a56e1f
 8007ee8:	8800759c 	.word	0x8800759c
 8007eec:	7e37e43c 	.word	0x7e37e43c
 8007ef0:	8800759c 	.word	0x8800759c
 8007ef4:	fe37e43c 	.word	0xfe37e43c
 8007ef8:	c2f8f359 	.word	0xc2f8f359
 8007efc:	81a56e1f 	.word	0x81a56e1f
 8007f00:	43500000 	.word	0x43500000
 8007f04:	ffff3cb0 	.word	0xffff3cb0
 8007f08:	3c900000 	.word	0x3c900000

08007f0c <_init>:
 8007f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f0e:	bf00      	nop
 8007f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f12:	bc08      	pop	{r3}
 8007f14:	469e      	mov	lr, r3
 8007f16:	4770      	bx	lr

08007f18 <_fini>:
 8007f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f1a:	bf00      	nop
 8007f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007f1e:	bc08      	pop	{r3}
 8007f20:	469e      	mov	lr, r3
 8007f22:	4770      	bx	lr
