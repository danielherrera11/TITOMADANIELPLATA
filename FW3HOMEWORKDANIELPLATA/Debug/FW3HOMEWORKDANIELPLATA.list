
FW3HOMEWORKDANIELPLATA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000038e4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08003a94  08003a94  00013a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ad4  08003ad4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08003ad4  08003ad4  00013ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003adc  08003adc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003adc  08003adc  00013adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ae0  08003ae0  00013ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08003ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00008460  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20008474  20008474  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fee8  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002746  00000000  00000000  0002ff2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ff8  00000000  00000000  00032678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed0  00000000  00000000  00033670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024402  00000000  00000000  00034540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000107cc  00000000  00000000  00058942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0cc6  00000000  00000000  0006910e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00149dd4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004234  00000000  00000000  00149e24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000014 	.word	0x20000014
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003a7c 	.word	0x08003a7c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000018 	.word	0x20000018
 80001ec:	08003a7c 	.word	0x08003a7c

080001f0 <__aeabi_uldivmod>:
 80001f0:	b953      	cbnz	r3, 8000208 <__aeabi_uldivmod+0x18>
 80001f2:	b94a      	cbnz	r2, 8000208 <__aeabi_uldivmod+0x18>
 80001f4:	2900      	cmp	r1, #0
 80001f6:	bf08      	it	eq
 80001f8:	2800      	cmpeq	r0, #0
 80001fa:	bf1c      	itt	ne
 80001fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000200:	f04f 30ff 	movne.w	r0, #4294967295
 8000204:	f000 b974 	b.w	80004f0 <__aeabi_idiv0>
 8000208:	f1ad 0c08 	sub.w	ip, sp, #8
 800020c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000210:	f000 f806 	bl	8000220 <__udivmoddi4>
 8000214:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000218:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800021c:	b004      	add	sp, #16
 800021e:	4770      	bx	lr

08000220 <__udivmoddi4>:
 8000220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000224:	9d08      	ldr	r5, [sp, #32]
 8000226:	4604      	mov	r4, r0
 8000228:	468e      	mov	lr, r1
 800022a:	2b00      	cmp	r3, #0
 800022c:	d14d      	bne.n	80002ca <__udivmoddi4+0xaa>
 800022e:	428a      	cmp	r2, r1
 8000230:	4694      	mov	ip, r2
 8000232:	d969      	bls.n	8000308 <__udivmoddi4+0xe8>
 8000234:	fab2 f282 	clz	r2, r2
 8000238:	b152      	cbz	r2, 8000250 <__udivmoddi4+0x30>
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	f1c2 0120 	rsb	r1, r2, #32
 8000242:	fa20 f101 	lsr.w	r1, r0, r1
 8000246:	fa0c fc02 	lsl.w	ip, ip, r2
 800024a:	ea41 0e03 	orr.w	lr, r1, r3
 800024e:	4094      	lsls	r4, r2
 8000250:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000254:	0c21      	lsrs	r1, r4, #16
 8000256:	fbbe f6f8 	udiv	r6, lr, r8
 800025a:	fa1f f78c 	uxth.w	r7, ip
 800025e:	fb08 e316 	mls	r3, r8, r6, lr
 8000262:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000266:	fb06 f107 	mul.w	r1, r6, r7
 800026a:	4299      	cmp	r1, r3
 800026c:	d90a      	bls.n	8000284 <__udivmoddi4+0x64>
 800026e:	eb1c 0303 	adds.w	r3, ip, r3
 8000272:	f106 30ff 	add.w	r0, r6, #4294967295
 8000276:	f080 811f 	bcs.w	80004b8 <__udivmoddi4+0x298>
 800027a:	4299      	cmp	r1, r3
 800027c:	f240 811c 	bls.w	80004b8 <__udivmoddi4+0x298>
 8000280:	3e02      	subs	r6, #2
 8000282:	4463      	add	r3, ip
 8000284:	1a5b      	subs	r3, r3, r1
 8000286:	b2a4      	uxth	r4, r4
 8000288:	fbb3 f0f8 	udiv	r0, r3, r8
 800028c:	fb08 3310 	mls	r3, r8, r0, r3
 8000290:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000294:	fb00 f707 	mul.w	r7, r0, r7
 8000298:	42a7      	cmp	r7, r4
 800029a:	d90a      	bls.n	80002b2 <__udivmoddi4+0x92>
 800029c:	eb1c 0404 	adds.w	r4, ip, r4
 80002a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002a4:	f080 810a 	bcs.w	80004bc <__udivmoddi4+0x29c>
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	f240 8107 	bls.w	80004bc <__udivmoddi4+0x29c>
 80002ae:	4464      	add	r4, ip
 80002b0:	3802      	subs	r0, #2
 80002b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002b6:	1be4      	subs	r4, r4, r7
 80002b8:	2600      	movs	r6, #0
 80002ba:	b11d      	cbz	r5, 80002c4 <__udivmoddi4+0xa4>
 80002bc:	40d4      	lsrs	r4, r2
 80002be:	2300      	movs	r3, #0
 80002c0:	e9c5 4300 	strd	r4, r3, [r5]
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0xc2>
 80002ce:	2d00      	cmp	r5, #0
 80002d0:	f000 80ef 	beq.w	80004b2 <__udivmoddi4+0x292>
 80002d4:	2600      	movs	r6, #0
 80002d6:	e9c5 0100 	strd	r0, r1, [r5]
 80002da:	4630      	mov	r0, r6
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	fab3 f683 	clz	r6, r3
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	d14a      	bne.n	8000380 <__udivmoddi4+0x160>
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xd4>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 80f9 	bhi.w	80004e6 <__udivmoddi4+0x2c6>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb61 0303 	sbc.w	r3, r1, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	469e      	mov	lr, r3
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e0      	beq.n	80002c4 <__udivmoddi4+0xa4>
 8000302:	e9c5 4e00 	strd	r4, lr, [r5]
 8000306:	e7dd      	b.n	80002c4 <__udivmoddi4+0xa4>
 8000308:	b902      	cbnz	r2, 800030c <__udivmoddi4+0xec>
 800030a:	deff      	udf	#255	; 0xff
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	2a00      	cmp	r2, #0
 8000312:	f040 8092 	bne.w	800043a <__udivmoddi4+0x21a>
 8000316:	eba1 010c 	sub.w	r1, r1, ip
 800031a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800031e:	fa1f fe8c 	uxth.w	lr, ip
 8000322:	2601      	movs	r6, #1
 8000324:	0c20      	lsrs	r0, r4, #16
 8000326:	fbb1 f3f7 	udiv	r3, r1, r7
 800032a:	fb07 1113 	mls	r1, r7, r3, r1
 800032e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000332:	fb0e f003 	mul.w	r0, lr, r3
 8000336:	4288      	cmp	r0, r1
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x12c>
 800033a:	eb1c 0101 	adds.w	r1, ip, r1
 800033e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x12a>
 8000344:	4288      	cmp	r0, r1
 8000346:	f200 80cb 	bhi.w	80004e0 <__udivmoddi4+0x2c0>
 800034a:	4643      	mov	r3, r8
 800034c:	1a09      	subs	r1, r1, r0
 800034e:	b2a4      	uxth	r4, r4
 8000350:	fbb1 f0f7 	udiv	r0, r1, r7
 8000354:	fb07 1110 	mls	r1, r7, r0, r1
 8000358:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800035c:	fb0e fe00 	mul.w	lr, lr, r0
 8000360:	45a6      	cmp	lr, r4
 8000362:	d908      	bls.n	8000376 <__udivmoddi4+0x156>
 8000364:	eb1c 0404 	adds.w	r4, ip, r4
 8000368:	f100 31ff 	add.w	r1, r0, #4294967295
 800036c:	d202      	bcs.n	8000374 <__udivmoddi4+0x154>
 800036e:	45a6      	cmp	lr, r4
 8000370:	f200 80bb 	bhi.w	80004ea <__udivmoddi4+0x2ca>
 8000374:	4608      	mov	r0, r1
 8000376:	eba4 040e 	sub.w	r4, r4, lr
 800037a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800037e:	e79c      	b.n	80002ba <__udivmoddi4+0x9a>
 8000380:	f1c6 0720 	rsb	r7, r6, #32
 8000384:	40b3      	lsls	r3, r6
 8000386:	fa22 fc07 	lsr.w	ip, r2, r7
 800038a:	ea4c 0c03 	orr.w	ip, ip, r3
 800038e:	fa20 f407 	lsr.w	r4, r0, r7
 8000392:	fa01 f306 	lsl.w	r3, r1, r6
 8000396:	431c      	orrs	r4, r3
 8000398:	40f9      	lsrs	r1, r7
 800039a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800039e:	fa00 f306 	lsl.w	r3, r0, r6
 80003a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003a6:	0c20      	lsrs	r0, r4, #16
 80003a8:	fa1f fe8c 	uxth.w	lr, ip
 80003ac:	fb09 1118 	mls	r1, r9, r8, r1
 80003b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b4:	fb08 f00e 	mul.w	r0, r8, lr
 80003b8:	4288      	cmp	r0, r1
 80003ba:	fa02 f206 	lsl.w	r2, r2, r6
 80003be:	d90b      	bls.n	80003d8 <__udivmoddi4+0x1b8>
 80003c0:	eb1c 0101 	adds.w	r1, ip, r1
 80003c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003c8:	f080 8088 	bcs.w	80004dc <__udivmoddi4+0x2bc>
 80003cc:	4288      	cmp	r0, r1
 80003ce:	f240 8085 	bls.w	80004dc <__udivmoddi4+0x2bc>
 80003d2:	f1a8 0802 	sub.w	r8, r8, #2
 80003d6:	4461      	add	r1, ip
 80003d8:	1a09      	subs	r1, r1, r0
 80003da:	b2a4      	uxth	r4, r4
 80003dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e0:	fb09 1110 	mls	r1, r9, r0, r1
 80003e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ec:	458e      	cmp	lr, r1
 80003ee:	d908      	bls.n	8000402 <__udivmoddi4+0x1e2>
 80003f0:	eb1c 0101 	adds.w	r1, ip, r1
 80003f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003f8:	d26c      	bcs.n	80004d4 <__udivmoddi4+0x2b4>
 80003fa:	458e      	cmp	lr, r1
 80003fc:	d96a      	bls.n	80004d4 <__udivmoddi4+0x2b4>
 80003fe:	3802      	subs	r0, #2
 8000400:	4461      	add	r1, ip
 8000402:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000406:	fba0 9402 	umull	r9, r4, r0, r2
 800040a:	eba1 010e 	sub.w	r1, r1, lr
 800040e:	42a1      	cmp	r1, r4
 8000410:	46c8      	mov	r8, r9
 8000412:	46a6      	mov	lr, r4
 8000414:	d356      	bcc.n	80004c4 <__udivmoddi4+0x2a4>
 8000416:	d053      	beq.n	80004c0 <__udivmoddi4+0x2a0>
 8000418:	b15d      	cbz	r5, 8000432 <__udivmoddi4+0x212>
 800041a:	ebb3 0208 	subs.w	r2, r3, r8
 800041e:	eb61 010e 	sbc.w	r1, r1, lr
 8000422:	fa01 f707 	lsl.w	r7, r1, r7
 8000426:	fa22 f306 	lsr.w	r3, r2, r6
 800042a:	40f1      	lsrs	r1, r6
 800042c:	431f      	orrs	r7, r3
 800042e:	e9c5 7100 	strd	r7, r1, [r5]
 8000432:	2600      	movs	r6, #0
 8000434:	4631      	mov	r1, r6
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	f1c2 0320 	rsb	r3, r2, #32
 800043e:	40d8      	lsrs	r0, r3
 8000440:	fa0c fc02 	lsl.w	ip, ip, r2
 8000444:	fa21 f303 	lsr.w	r3, r1, r3
 8000448:	4091      	lsls	r1, r2
 800044a:	4301      	orrs	r1, r0
 800044c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000450:	fa1f fe8c 	uxth.w	lr, ip
 8000454:	fbb3 f0f7 	udiv	r0, r3, r7
 8000458:	fb07 3610 	mls	r6, r7, r0, r3
 800045c:	0c0b      	lsrs	r3, r1, #16
 800045e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000462:	fb00 f60e 	mul.w	r6, r0, lr
 8000466:	429e      	cmp	r6, r3
 8000468:	fa04 f402 	lsl.w	r4, r4, r2
 800046c:	d908      	bls.n	8000480 <__udivmoddi4+0x260>
 800046e:	eb1c 0303 	adds.w	r3, ip, r3
 8000472:	f100 38ff 	add.w	r8, r0, #4294967295
 8000476:	d22f      	bcs.n	80004d8 <__udivmoddi4+0x2b8>
 8000478:	429e      	cmp	r6, r3
 800047a:	d92d      	bls.n	80004d8 <__udivmoddi4+0x2b8>
 800047c:	3802      	subs	r0, #2
 800047e:	4463      	add	r3, ip
 8000480:	1b9b      	subs	r3, r3, r6
 8000482:	b289      	uxth	r1, r1
 8000484:	fbb3 f6f7 	udiv	r6, r3, r7
 8000488:	fb07 3316 	mls	r3, r7, r6, r3
 800048c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000490:	fb06 f30e 	mul.w	r3, r6, lr
 8000494:	428b      	cmp	r3, r1
 8000496:	d908      	bls.n	80004aa <__udivmoddi4+0x28a>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f106 38ff 	add.w	r8, r6, #4294967295
 80004a0:	d216      	bcs.n	80004d0 <__udivmoddi4+0x2b0>
 80004a2:	428b      	cmp	r3, r1
 80004a4:	d914      	bls.n	80004d0 <__udivmoddi4+0x2b0>
 80004a6:	3e02      	subs	r6, #2
 80004a8:	4461      	add	r1, ip
 80004aa:	1ac9      	subs	r1, r1, r3
 80004ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b0:	e738      	b.n	8000324 <__udivmoddi4+0x104>
 80004b2:	462e      	mov	r6, r5
 80004b4:	4628      	mov	r0, r5
 80004b6:	e705      	b.n	80002c4 <__udivmoddi4+0xa4>
 80004b8:	4606      	mov	r6, r0
 80004ba:	e6e3      	b.n	8000284 <__udivmoddi4+0x64>
 80004bc:	4618      	mov	r0, r3
 80004be:	e6f8      	b.n	80002b2 <__udivmoddi4+0x92>
 80004c0:	454b      	cmp	r3, r9
 80004c2:	d2a9      	bcs.n	8000418 <__udivmoddi4+0x1f8>
 80004c4:	ebb9 0802 	subs.w	r8, r9, r2
 80004c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004cc:	3801      	subs	r0, #1
 80004ce:	e7a3      	b.n	8000418 <__udivmoddi4+0x1f8>
 80004d0:	4646      	mov	r6, r8
 80004d2:	e7ea      	b.n	80004aa <__udivmoddi4+0x28a>
 80004d4:	4620      	mov	r0, r4
 80004d6:	e794      	b.n	8000402 <__udivmoddi4+0x1e2>
 80004d8:	4640      	mov	r0, r8
 80004da:	e7d1      	b.n	8000480 <__udivmoddi4+0x260>
 80004dc:	46d0      	mov	r8, sl
 80004de:	e77b      	b.n	80003d8 <__udivmoddi4+0x1b8>
 80004e0:	3b02      	subs	r3, #2
 80004e2:	4461      	add	r1, ip
 80004e4:	e732      	b.n	800034c <__udivmoddi4+0x12c>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e709      	b.n	80002fe <__udivmoddi4+0xde>
 80004ea:	4464      	add	r4, ip
 80004ec:	3802      	subs	r0, #2
 80004ee:	e742      	b.n	8000376 <__udivmoddi4+0x156>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80004f8:	bf00      	nop
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr

08000502 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000502:	b480      	push	{r7}
 8000504:	b083      	sub	sp, #12
 8000506:	af00      	add	r7, sp, #0
 8000508:	6078      	str	r0, [r7, #4]
 800050a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 800050c:	bf00      	nop
 800050e:	370c      	adds	r7, #12
 8000510:	46bd      	mov	sp, r7
 8000512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000516:	4770      	bx	lr

08000518 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 800051c:	bf00      	nop
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
	...

08000528 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000528:	b480      	push	{r7}
 800052a:	b085      	sub	sp, #20
 800052c:	af00      	add	r7, sp, #0
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	60b9      	str	r1, [r7, #8]
 8000532:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	4a07      	ldr	r2, [pc, #28]	; (8000554 <vApplicationGetIdleTaskMemory+0x2c>)
 8000538:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053a:	68bb      	ldr	r3, [r7, #8]
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <vApplicationGetIdleTaskMemory+0x30>)
 800053e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000546:	bf00      	nop
 8000548:	3714      	adds	r7, #20
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000030 	.word	0x20000030
 8000558:	20000088 	.word	0x20000088

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b5b0      	push	{r4, r5, r7, lr}
 800055e:	b088      	sub	sp, #32
 8000560:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000562:	f000 fae9 	bl	8000b38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000566:	f000 f849 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056a:	f000 f947 	bl	80007fc <MX_GPIO_Init>
  MX_CRC_Init();
 800056e:	f000 f8af 	bl	80006d0 <MX_CRC_Init>
  MX_DMA2D_Init();
 8000572:	f000 f8c1 	bl	80006f8 <MX_DMA2D_Init>
  MX_TIM1_Init();
 8000576:	f000 f8f1 	bl	800075c <MX_TIM1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 800057a:	4b1c      	ldr	r3, [pc, #112]	; (80005ec <main+0x90>)
 800057c:	1d3c      	adds	r4, r7, #4
 800057e:	461d      	mov	r5, r3
 8000580:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000584:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000588:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800058c:	1d3b      	adds	r3, r7, #4
 800058e:	2100      	movs	r1, #0
 8000590:	4618      	mov	r0, r3
 8000592:	f001 ffc6 	bl	8002522 <osThreadCreate>
 8000596:	4603      	mov	r3, r0
 8000598:	4a15      	ldr	r2, [pc, #84]	; (80005f0 <main+0x94>)
 800059a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f001 ffba 	bl	8002514 <osKernelStart>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (semaforo==0){
 80005a0:	4b14      	ldr	r3, [pc, #80]	; (80005f4 <main+0x98>)
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d10c      	bne.n	80005c2 <main+0x66>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_RESET);
 80005a8:	2200      	movs	r2, #0
 80005aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005ae:	4812      	ldr	r0, [pc, #72]	; (80005f8 <main+0x9c>)
 80005b0:	f001 f81c 	bl	80015ec <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005ba:	480f      	ldr	r0, [pc, #60]	; (80005f8 <main+0x9c>)
 80005bc:	f001 f816 	bl	80015ec <HAL_GPIO_WritePin>
 80005c0:	e7ee      	b.n	80005a0 <main+0x44>
	  } else{
		  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_13);
 80005c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <main+0x9c>)
 80005c8:	f001 f829 	bl	800161e <HAL_GPIO_TogglePin>
		  HAL_GPIO_TogglePin(GPIOG, GPIO_PIN_14);
 80005cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <main+0x9c>)
 80005d2:	f001 f824 	bl	800161e <HAL_GPIO_TogglePin>
		  HAL_Delay(1000*semaforo);
 80005d6:	4b07      	ldr	r3, [pc, #28]	; (80005f4 <main+0x98>)
 80005d8:	781b      	ldrb	r3, [r3, #0]
 80005da:	461a      	mov	r2, r3
 80005dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005e0:	fb02 f303 	mul.w	r3, r2, r3
 80005e4:	4618      	mov	r0, r3
 80005e6:	f000 fb19 	bl	8000c1c <HAL_Delay>
	  if (semaforo==0){
 80005ea:	e7d9      	b.n	80005a0 <main+0x44>
 80005ec:	08003aa0 	.word	0x08003aa0
 80005f0:	20000318 	.word	0x20000318
 80005f4:	20000000 	.word	0x20000000
 80005f8:	40021800 	.word	0x40021800

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 fa2e 	bl	8003a6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000648:	4a20      	ldr	r2, [pc, #128]	; (80006cc <SystemClock_Config+0xd0>)
 800064a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064e:	6013      	str	r3, [r2, #0]
 8000650:	4b1e      	ldr	r3, [pc, #120]	; (80006cc <SystemClock_Config+0xd0>)
 8000652:	681b      	ldr	r3, [r3, #0]
 8000654:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000658:	607b      	str	r3, [r7, #4]
 800065a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800065c:	2302      	movs	r3, #2
 800065e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000660:	2301      	movs	r3, #1
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000664:	2310      	movs	r3, #16
 8000666:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000668:	2302      	movs	r3, #2
 800066a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800066c:	2300      	movs	r3, #0
 800066e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000670:	2308      	movs	r3, #8
 8000672:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000674:	2348      	movs	r3, #72	; 0x48
 8000676:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000678:	2302      	movs	r3, #2
 800067a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800067c:	2303      	movs	r3, #3
 800067e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	4618      	mov	r0, r3
 8000686:	f000 fffd 	bl	8001684 <HAL_RCC_OscConfig>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000690:	f000 f944 	bl	800091c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000694:	230f      	movs	r3, #15
 8000696:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000698:	2302      	movs	r3, #2
 800069a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800069c:	2300      	movs	r3, #0
 800069e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2102      	movs	r1, #2
 80006b0:	4618      	mov	r0, r3
 80006b2:	f001 fa5f 	bl	8001b74 <HAL_RCC_ClockConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80006bc:	f000 f92e 	bl	800091c <Error_Handler>
  }
}
 80006c0:	bf00      	nop
 80006c2:	3750      	adds	r7, #80	; 0x50
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <MX_CRC_Init+0x20>)
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <MX_CRC_Init+0x24>)
 80006d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	; (80006f0 <MX_CRC_Init+0x20>)
 80006dc:	f000 fbd3 	bl	8000e86 <HAL_CRC_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80006e6:	f000 f919 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000288 	.word	0x20000288
 80006f4:	40023000 	.word	0x40023000

080006f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_DMA2D_Init+0x5c>)
 80006fe:	4a16      	ldr	r2, [pc, #88]	; (8000758 <MX_DMA2D_Init+0x60>)
 8000700:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_DMA2D_Init+0x5c>)
 8000704:	2200      	movs	r2, #0
 8000706:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_DMA2D_Init+0x5c>)
 800070a:	2200      	movs	r2, #0
 800070c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_DMA2D_Init+0x5c>)
 8000710:	2200      	movs	r2, #0
 8000712:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_DMA2D_Init+0x5c>)
 8000716:	2200      	movs	r2, #0
 8000718:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_DMA2D_Init+0x5c>)
 800071c:	2200      	movs	r2, #0
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_DMA2D_Init+0x5c>)
 8000722:	2200      	movs	r2, #0
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <MX_DMA2D_Init+0x5c>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800072c:	4809      	ldr	r0, [pc, #36]	; (8000754 <MX_DMA2D_Init+0x5c>)
 800072e:	f000 fbc6 	bl	8000ebe <HAL_DMA2D_Init>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000738:	f000 f8f0 	bl	800091c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800073c:	2101      	movs	r1, #1
 800073e:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_DMA2D_Init+0x5c>)
 8000740:	f000 fd16 	bl	8001170 <HAL_DMA2D_ConfigLayer>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800074a:	f000 f8e7 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20000290 	.word	0x20000290
 8000758:	4002b000 	.word	0x4002b000

0800075c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000770:	463b      	mov	r3, r7
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000778:	4b1e      	ldr	r3, [pc, #120]	; (80007f4 <MX_TIM1_Init+0x98>)
 800077a:	4a1f      	ldr	r2, [pc, #124]	; (80007f8 <MX_TIM1_Init+0x9c>)
 800077c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800077e:	4b1d      	ldr	r3, [pc, #116]	; (80007f4 <MX_TIM1_Init+0x98>)
 8000780:	2200      	movs	r2, #0
 8000782:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000784:	4b1b      	ldr	r3, [pc, #108]	; (80007f4 <MX_TIM1_Init+0x98>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800078a:	4b1a      	ldr	r3, [pc, #104]	; (80007f4 <MX_TIM1_Init+0x98>)
 800078c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000790:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <MX_TIM1_Init+0x98>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MX_TIM1_Init+0x98>)
 800079a:	2200      	movs	r2, #0
 800079c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b15      	ldr	r3, [pc, #84]	; (80007f4 <MX_TIM1_Init+0x98>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007a4:	4813      	ldr	r0, [pc, #76]	; (80007f4 <MX_TIM1_Init+0x98>)
 80007a6:	f001 fbd1 	bl	8001f4c <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80007b0:	f000 f8b4 	bl	800091c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007b8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0308 	add.w	r3, r7, #8
 80007be:	4619      	mov	r1, r3
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <MX_TIM1_Init+0x98>)
 80007c2:	f001 fc12 	bl	8001fea <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80007cc:	f000 f8a6 	bl	800091c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007d8:	463b      	mov	r3, r7
 80007da:	4619      	mov	r1, r3
 80007dc:	4805      	ldr	r0, [pc, #20]	; (80007f4 <MX_TIM1_Init+0x98>)
 80007de:	f001 fe05 	bl	80023ec <HAL_TIMEx_MasterConfigSynchronization>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80007e8:	f000 f898 	bl	800091c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200002d0 	.word	0x200002d0
 80007f8:	40010000 	.word	0x40010000

080007fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a23      	ldr	r2, [pc, #140]	; (80008a8 <MX_GPIO_Init+0xac>)
 800081c:	f043 0301 	orr.w	r3, r3, #1
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	60bb      	str	r3, [r7, #8]
 800082c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a1c      	ldr	r2, [pc, #112]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000838:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_GPIO_Init+0xac>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000846:	607b      	str	r3, [r7, #4]
 8000848:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13|GPIO_PIN_14, GPIO_PIN_RESET);
 800084a:	2200      	movs	r2, #0
 800084c:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000850:	4816      	ldr	r0, [pc, #88]	; (80008ac <MX_GPIO_Init+0xb0>)
 8000852:	f000 fecb 	bl	80015ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000856:	2301      	movs	r3, #1
 8000858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800085a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800085e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	4619      	mov	r1, r3
 800086a:	4811      	ldr	r0, [pc, #68]	; (80008b0 <MX_GPIO_Init+0xb4>)
 800086c:	f000 fd12 	bl	8001294 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG13 PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000870:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	4619      	mov	r1, r3
 8000888:	4808      	ldr	r0, [pc, #32]	; (80008ac <MX_GPIO_Init+0xb0>)
 800088a:	f000 fd03 	bl	8001294 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2105      	movs	r1, #5
 8000892:	2006      	movs	r0, #6
 8000894:	f000 fac1 	bl	8000e1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000898:	2006      	movs	r0, #6
 800089a:	f000 fada 	bl	8000e52 <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3720      	adds	r7, #32
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40021800 	.word	0x40021800
 80008b0:	40020000 	.word	0x40020000

080008b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */

	if (semaforo==0){
 80008be:	4b12      	ldr	r3, [pc, #72]	; (8000908 <HAL_GPIO_EXTI_Callback+0x54>)
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d103      	bne.n	80008ce <HAL_GPIO_EXTI_Callback+0x1a>
		semaforo=1;
 80008c6:	4b10      	ldr	r3, [pc, #64]	; (8000908 <HAL_GPIO_EXTI_Callback+0x54>)
 80008c8:	2201      	movs	r2, #1
 80008ca:	701a      	strb	r2, [r3, #0]
	}

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80008cc:	e016      	b.n	80008fc <HAL_GPIO_EXTI_Callback+0x48>
	} else if (semaforo==1){
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <HAL_GPIO_EXTI_Callback+0x54>)
 80008d0:	781b      	ldrb	r3, [r3, #0]
 80008d2:	2b01      	cmp	r3, #1
 80008d4:	d103      	bne.n	80008de <HAL_GPIO_EXTI_Callback+0x2a>
		semaforo=2;
 80008d6:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <HAL_GPIO_EXTI_Callback+0x54>)
 80008d8:	2202      	movs	r2, #2
 80008da:	701a      	strb	r2, [r3, #0]
}
 80008dc:	e00e      	b.n	80008fc <HAL_GPIO_EXTI_Callback+0x48>
	} else if (semaforo==2){
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <HAL_GPIO_EXTI_Callback+0x54>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b02      	cmp	r3, #2
 80008e4:	d103      	bne.n	80008ee <HAL_GPIO_EXTI_Callback+0x3a>
		semaforo=3;
 80008e6:	4b08      	ldr	r3, [pc, #32]	; (8000908 <HAL_GPIO_EXTI_Callback+0x54>)
 80008e8:	2203      	movs	r2, #3
 80008ea:	701a      	strb	r2, [r3, #0]
}
 80008ec:	e006      	b.n	80008fc <HAL_GPIO_EXTI_Callback+0x48>
	} else if (semaforo==3){
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <HAL_GPIO_EXTI_Callback+0x54>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b03      	cmp	r3, #3
 80008f4:	d102      	bne.n	80008fc <HAL_GPIO_EXTI_Callback+0x48>
		semaforo=0;
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <HAL_GPIO_EXTI_Callback+0x54>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr
 8000908:	20000000 	.word	0x20000000

0800090c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000914:	2001      	movs	r0, #1
 8000916:	f001 fe50 	bl	80025ba <osDelay>
 800091a:	e7fb      	b.n	8000914 <StartDefaultTask+0x8>

0800091c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000920:	b672      	cpsid	i
}
 8000922:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000924:	e7fe      	b.n	8000924 <Error_Handler+0x8>
	...

08000928 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	607b      	str	r3, [r7, #4]
 8000932:	4b12      	ldr	r3, [pc, #72]	; (800097c <HAL_MspInit+0x54>)
 8000934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000936:	4a11      	ldr	r2, [pc, #68]	; (800097c <HAL_MspInit+0x54>)
 8000938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800093c:	6453      	str	r3, [r2, #68]	; 0x44
 800093e:	4b0f      	ldr	r3, [pc, #60]	; (800097c <HAL_MspInit+0x54>)
 8000940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <HAL_MspInit+0x54>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	4a0a      	ldr	r2, [pc, #40]	; (800097c <HAL_MspInit+0x54>)
 8000954:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000958:	6413      	str	r3, [r2, #64]	; 0x40
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <HAL_MspInit+0x54>)
 800095c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800095e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	210f      	movs	r1, #15
 800096a:	f06f 0001 	mvn.w	r0, #1
 800096e:	f000 fa54 	bl	8000e1a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40023800 	.word	0x40023800

08000980 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000980:	b480      	push	{r7}
 8000982:	b085      	sub	sp, #20
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4a0b      	ldr	r2, [pc, #44]	; (80009bc <HAL_CRC_MspInit+0x3c>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d10d      	bne.n	80009ae <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	4b0a      	ldr	r3, [pc, #40]	; (80009c0 <HAL_CRC_MspInit+0x40>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a09      	ldr	r2, [pc, #36]	; (80009c0 <HAL_CRC_MspInit+0x40>)
 800099c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b07      	ldr	r3, [pc, #28]	; (80009c0 <HAL_CRC_MspInit+0x40>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3714      	adds	r7, #20
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40023000 	.word	0x40023000
 80009c0:	40023800 	.word	0x40023800

080009c4 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b084      	sub	sp, #16
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0e      	ldr	r2, [pc, #56]	; (8000a0c <HAL_DMA2D_MspInit+0x48>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d115      	bne.n	8000a02 <HAL_DMA2D_MspInit+0x3e>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b0d      	ldr	r3, [pc, #52]	; (8000a10 <HAL_DMA2D_MspInit+0x4c>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <HAL_DMA2D_MspInit+0x4c>)
 80009e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <HAL_DMA2D_MspInit+0x4c>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2105      	movs	r1, #5
 80009f6:	205a      	movs	r0, #90	; 0x5a
 80009f8:	f000 fa0f 	bl	8000e1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80009fc:	205a      	movs	r0, #90	; 0x5a
 80009fe:	f000 fa28 	bl	8000e52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	4002b000 	.word	0x4002b000
 8000a10:	40023800 	.word	0x40023800

08000a14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a0b      	ldr	r2, [pc, #44]	; (8000a50 <HAL_TIM_Base_MspInit+0x3c>)
 8000a22:	4293      	cmp	r3, r2
 8000a24:	d10d      	bne.n	8000a42 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	60fb      	str	r3, [r7, #12]
 8000a2a:	4b0a      	ldr	r3, [pc, #40]	; (8000a54 <HAL_TIM_Base_MspInit+0x40>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a09      	ldr	r2, [pc, #36]	; (8000a54 <HAL_TIM_Base_MspInit+0x40>)
 8000a30:	f043 0301 	orr.w	r3, r3, #1
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <HAL_TIM_Base_MspInit+0x40>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f003 0301 	and.w	r3, r3, #1
 8000a3e:	60fb      	str	r3, [r7, #12]
 8000a40:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000a42:	bf00      	nop
 8000a44:	3714      	adds	r7, #20
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	40010000 	.word	0x40010000
 8000a54:	40023800 	.word	0x40023800

08000a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <NMI_Handler+0x4>

08000a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a62:	e7fe      	b.n	8000a62 <HardFault_Handler+0x4>

08000a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <MemManage_Handler+0x4>

08000a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <BusFault_Handler+0x4>

08000a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <UsageFault_Handler+0x4>

08000a76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a88:	f000 f8a8 	bl	8000bdc <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000a8c:	f002 fb4a 	bl	8003124 <xTaskGetSchedulerState>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d001      	beq.n	8000a9a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000a96:	f002 fd87 	bl	80035a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	bd80      	pop	{r7, pc}

08000a9e <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000a9e:	b580      	push	{r7, lr}
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000aa2:	2001      	movs	r0, #1
 8000aa4:	f000 fdd6 	bl	8001654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <DMA2D_IRQHandler+0x10>)
 8000ab2:	f000 fa4d 	bl	8000f50 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	20000290 	.word	0x20000290

08000ac0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac4:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <SystemInit+0x20>)
 8000ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aca:	4a05      	ldr	r2, [pc, #20]	; (8000ae0 <SystemInit+0x20>)
 8000acc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ad4:	bf00      	nop
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	e000ed00 	.word	0xe000ed00

08000ae4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ae4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b1c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ae8:	480d      	ldr	r0, [pc, #52]	; (8000b20 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aea:	490e      	ldr	r1, [pc, #56]	; (8000b24 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000aec:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000af0:	e002      	b.n	8000af8 <LoopCopyDataInit>

08000af2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000af2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000af4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000af6:	3304      	adds	r3, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000af8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000afa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000afc:	d3f9      	bcc.n	8000af2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000afe:	4a0b      	ldr	r2, [pc, #44]	; (8000b2c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b00:	4c0b      	ldr	r4, [pc, #44]	; (8000b30 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b04:	e001      	b.n	8000b0a <LoopFillZerobss>

08000b06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b08:	3204      	adds	r2, #4

08000b0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b0c:	d3fb      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b0e:	f7ff ffd7 	bl	8000ac0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b12:	f002 ff87 	bl	8003a24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b16:	f7ff fd21 	bl	800055c <main>
  bx  lr    
 8000b1a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b1c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b24:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b28:	08003ae4 	.word	0x08003ae4
  ldr r2, =_sbss
 8000b2c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b30:	20008474 	.word	0x20008474

08000b34 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b34:	e7fe      	b.n	8000b34 <ADC_IRQHandler>
	...

08000b38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b3c:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <HAL_Init+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a0d      	ldr	r2, [pc, #52]	; (8000b78 <HAL_Init+0x40>)
 8000b42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b46:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b48:	4b0b      	ldr	r3, [pc, #44]	; (8000b78 <HAL_Init+0x40>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a0a      	ldr	r2, [pc, #40]	; (8000b78 <HAL_Init+0x40>)
 8000b4e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b52:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_Init+0x40>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a07      	ldr	r2, [pc, #28]	; (8000b78 <HAL_Init+0x40>)
 8000b5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b5e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b60:	2003      	movs	r0, #3
 8000b62:	f000 f94f 	bl	8000e04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f808 	bl	8000b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b6c:	f7ff fedc 	bl	8000928 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40023c00 	.word	0x40023c00

08000b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b84:	4b12      	ldr	r3, [pc, #72]	; (8000bd0 <HAL_InitTick+0x54>)
 8000b86:	681a      	ldr	r2, [r3, #0]
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_InitTick+0x58>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f967 	bl	8000e6e <HAL_SYSTICK_Config>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00e      	b.n	8000bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	2b0f      	cmp	r3, #15
 8000bae:	d80a      	bhi.n	8000bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	6879      	ldr	r1, [r7, #4]
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f000 f92f 	bl	8000e1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bbc:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <HAL_InitTick+0x5c>)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	e000      	b.n	8000bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	20000004 	.word	0x20000004
 8000bd4:	2000000c 	.word	0x2000000c
 8000bd8:	20000008 	.word	0x20000008

08000bdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_IncTick+0x20>)
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	461a      	mov	r2, r3
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <HAL_IncTick+0x24>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4413      	add	r3, r2
 8000bec:	4a04      	ldr	r2, [pc, #16]	; (8000c00 <HAL_IncTick+0x24>)
 8000bee:	6013      	str	r3, [r2, #0]
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000000c 	.word	0x2000000c
 8000c00:	2000031c 	.word	0x2000031c

08000c04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  return uwTick;
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_GetTick+0x14>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
}
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	2000031c 	.word	0x2000031c

08000c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c24:	f7ff ffee 	bl	8000c04 <HAL_GetTick>
 8000c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c34:	d005      	beq.n	8000c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <HAL_Delay+0x44>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c42:	bf00      	nop
 8000c44:	f7ff ffde 	bl	8000c04 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68fa      	ldr	r2, [r7, #12]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d8f7      	bhi.n	8000c44 <HAL_Delay+0x28>
  {
  }
}
 8000c54:	bf00      	nop
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	2000000c 	.word	0x2000000c

08000c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0307 	and.w	r3, r3, #7
 8000c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c74:	4b0c      	ldr	r3, [pc, #48]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c7a:	68ba      	ldr	r2, [r7, #8]
 8000c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c80:	4013      	ands	r3, r2
 8000c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c88:	68bb      	ldr	r3, [r7, #8]
 8000c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c96:	4a04      	ldr	r2, [pc, #16]	; (8000ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	60d3      	str	r3, [r2, #12]
}
 8000c9c:	bf00      	nop
 8000c9e:	3714      	adds	r7, #20
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr
 8000ca8:	e000ed00 	.word	0xe000ed00

08000cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	0a1b      	lsrs	r3, r3, #8
 8000cb6:	f003 0307 	and.w	r3, r3, #7
}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr
 8000cc4:	e000ed00 	.word	0xe000ed00

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	db0b      	blt.n	8000cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cda:	79fb      	ldrb	r3, [r7, #7]
 8000cdc:	f003 021f 	and.w	r2, r3, #31
 8000ce0:	4907      	ldr	r1, [pc, #28]	; (8000d00 <__NVIC_EnableIRQ+0x38>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	095b      	lsrs	r3, r3, #5
 8000ce8:	2001      	movs	r0, #1
 8000cea:	fa00 f202 	lsl.w	r2, r0, r2
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cf2:	bf00      	nop
 8000cf4:	370c      	adds	r7, #12
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e100 	.word	0xe000e100

08000d04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	6039      	str	r1, [r7, #0]
 8000d0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	db0a      	blt.n	8000d2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	b2da      	uxtb	r2, r3
 8000d1c:	490c      	ldr	r1, [pc, #48]	; (8000d50 <__NVIC_SetPriority+0x4c>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	0112      	lsls	r2, r2, #4
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	440b      	add	r3, r1
 8000d28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d2c:	e00a      	b.n	8000d44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	b2da      	uxtb	r2, r3
 8000d32:	4908      	ldr	r1, [pc, #32]	; (8000d54 <__NVIC_SetPriority+0x50>)
 8000d34:	79fb      	ldrb	r3, [r7, #7]
 8000d36:	f003 030f 	and.w	r3, r3, #15
 8000d3a:	3b04      	subs	r3, #4
 8000d3c:	0112      	lsls	r2, r2, #4
 8000d3e:	b2d2      	uxtb	r2, r2
 8000d40:	440b      	add	r3, r1
 8000d42:	761a      	strb	r2, [r3, #24]
}
 8000d44:	bf00      	nop
 8000d46:	370c      	adds	r7, #12
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr
 8000d50:	e000e100 	.word	0xe000e100
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b089      	sub	sp, #36	; 0x24
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	60f8      	str	r0, [r7, #12]
 8000d60:	60b9      	str	r1, [r7, #8]
 8000d62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d6c:	69fb      	ldr	r3, [r7, #28]
 8000d6e:	f1c3 0307 	rsb	r3, r3, #7
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	bf28      	it	cs
 8000d76:	2304      	movcs	r3, #4
 8000d78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3304      	adds	r3, #4
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d902      	bls.n	8000d88 <NVIC_EncodePriority+0x30>
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3b03      	subs	r3, #3
 8000d86:	e000      	b.n	8000d8a <NVIC_EncodePriority+0x32>
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	fa02 f303 	lsl.w	r3, r2, r3
 8000d96:	43da      	mvns	r2, r3
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	401a      	ands	r2, r3
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da0:	f04f 31ff 	mov.w	r1, #4294967295
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	fa01 f303 	lsl.w	r3, r1, r3
 8000daa:	43d9      	mvns	r1, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db0:	4313      	orrs	r3, r2
         );
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3724      	adds	r7, #36	; 0x24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	3b01      	subs	r3, #1
 8000dcc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd0:	d301      	bcc.n	8000dd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e00f      	b.n	8000df6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <SysTick_Config+0x40>)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	3b01      	subs	r3, #1
 8000ddc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dde:	210f      	movs	r1, #15
 8000de0:	f04f 30ff 	mov.w	r0, #4294967295
 8000de4:	f7ff ff8e 	bl	8000d04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de8:	4b05      	ldr	r3, [pc, #20]	; (8000e00 <SysTick_Config+0x40>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dee:	4b04      	ldr	r3, [pc, #16]	; (8000e00 <SysTick_Config+0x40>)
 8000df0:	2207      	movs	r2, #7
 8000df2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	e000e010 	.word	0xe000e010

08000e04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff ff29 	bl	8000c64 <__NVIC_SetPriorityGrouping>
}
 8000e12:	bf00      	nop
 8000e14:	3708      	adds	r7, #8
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}

08000e1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b086      	sub	sp, #24
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
 8000e26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e2c:	f7ff ff3e 	bl	8000cac <__NVIC_GetPriorityGrouping>
 8000e30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e32:	687a      	ldr	r2, [r7, #4]
 8000e34:	68b9      	ldr	r1, [r7, #8]
 8000e36:	6978      	ldr	r0, [r7, #20]
 8000e38:	f7ff ff8e 	bl	8000d58 <NVIC_EncodePriority>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e42:	4611      	mov	r1, r2
 8000e44:	4618      	mov	r0, r3
 8000e46:	f7ff ff5d 	bl	8000d04 <__NVIC_SetPriority>
}
 8000e4a:	bf00      	nop
 8000e4c:	3718      	adds	r7, #24
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}

08000e52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e52:	b580      	push	{r7, lr}
 8000e54:	b082      	sub	sp, #8
 8000e56:	af00      	add	r7, sp, #0
 8000e58:	4603      	mov	r3, r0
 8000e5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e60:	4618      	mov	r0, r3
 8000e62:	f7ff ff31 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b082      	sub	sp, #8
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff ffa2 	bl	8000dc0 <SysTick_Config>
 8000e7c:	4603      	mov	r3, r0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3708      	adds	r7, #8
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d101      	bne.n	8000e98 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	e00e      	b.n	8000eb6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	795b      	ldrb	r3, [r3, #5]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d105      	bne.n	8000eae <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f7ff fd69 	bl	8000980 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d101      	bne.n	8000ed0 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e03b      	b.n	8000f48 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d106      	bne.n	8000eea <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8000ee4:	6878      	ldr	r0, [r7, #4]
 8000ee6:	f7ff fd6d 	bl	80009c4 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	2202      	movs	r2, #2
 8000eee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	685a      	ldr	r2, [r3, #4]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	430a      	orrs	r2, r1
 8000f06:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0e:	f023 0107 	bic.w	r1, r3, #7
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	430a      	orrs	r2, r1
 8000f1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f24:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000f28:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000f2c:	687a      	ldr	r2, [r7, #4]
 8000f2e:	68d1      	ldr	r1, [r2, #12]
 8000f30:	687a      	ldr	r2, [r7, #4]
 8000f32:	6812      	ldr	r2, [r2, #0]
 8000f34:	430b      	orrs	r3, r1
 8000f36:	6413      	str	r3, [r2, #64]	; 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2201      	movs	r2, #1
 8000f42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8000f46:	2300      	movs	r3, #0
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d026      	beq.n	8000fc0 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d021      	beq.n	8000fc0 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f8a:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2204      	movs	r2, #4
 8000fa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	2200      	movs	r2, #0
 8000fac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	695b      	ldr	r3, [r3, #20]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	695b      	ldr	r3, [r3, #20]
 8000fbc:	6878      	ldr	r0, [r7, #4]
 8000fbe:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	f003 0320 	and.w	r3, r3, #32
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d026      	beq.n	8001018 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d021      	beq.n	8001018 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	681a      	ldr	r2, [r3, #0]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fe2:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2220      	movs	r2, #32
 8000fea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff0:	f043 0202 	orr.w	r2, r3, #2
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2204      	movs	r2, #4
 8000ffc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2200      	movs	r2, #0
 8001004:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	695b      	ldr	r3, [r3, #20]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	695b      	ldr	r3, [r3, #20]
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	f003 0308 	and.w	r3, r3, #8
 800101e:	2b00      	cmp	r3, #0
 8001020:	d026      	beq.n	8001070 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001028:	2b00      	cmp	r3, #0
 800102a:	d021      	beq.n	8001070 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800103a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	2208      	movs	r2, #8
 8001042:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001048:	f043 0204 	orr.w	r2, r3, #4
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2204      	movs	r2, #4
 8001054:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	695b      	ldr	r3, [r3, #20]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d003      	beq.n	8001070 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	695b      	ldr	r3, [r3, #20]
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	2b00      	cmp	r3, #0
 8001078:	d013      	beq.n	80010a2 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 800107a:	68bb      	ldr	r3, [r7, #8]
 800107c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001080:	2b00      	cmp	r3, #0
 8001082:	d00e      	beq.n	80010a2 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001092:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	2204      	movs	r2, #4
 800109a:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f000 f853 	bl	8001148 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d024      	beq.n	80010f6 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d01f      	beq.n	80010f6 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010c4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2202      	movs	r2, #2
 80010cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	2200      	movs	r2, #0
 80010e2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if (hdma2d->XferCpltCallback != NULL)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	691b      	ldr	r3, [r3, #16]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d003      	beq.n	80010f6 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	f003 0310 	and.w	r3, r3, #16
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d01f      	beq.n	8001140 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d01a      	beq.n	8001140 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001118:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2210      	movs	r2, #16
 8001120:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2201      	movs	r2, #1
 800112e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 f80e 	bl	800115c <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001188:	2b01      	cmp	r3, #1
 800118a:	d101      	bne.n	8001190 <HAL_DMA2D_ConfigLayer+0x20>
 800118c:	2302      	movs	r3, #2
 800118e:	e079      	b.n	8001284 <HAL_DMA2D_ConfigLayer+0x114>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2201      	movs	r2, #1
 8001194:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2202      	movs	r2, #2
 800119c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	011b      	lsls	r3, r3, #4
 80011a4:	3318      	adds	r3, #24
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	4413      	add	r3, r2
 80011aa:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	685a      	ldr	r2, [r3, #4]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	041b      	lsls	r3, r3, #16
 80011b6:	4313      	orrs	r3, r2
 80011b8:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 80011ba:	4b35      	ldr	r3, [pc, #212]	; (8001290 <HAL_DMA2D_ConfigLayer+0x120>)
 80011bc:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b0a      	cmp	r3, #10
 80011c4:	d003      	beq.n	80011ce <HAL_DMA2D_ConfigLayer+0x5e>
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b09      	cmp	r3, #9
 80011cc:	d107      	bne.n	80011de <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	4313      	orrs	r3, r2
 80011da:	617b      	str	r3, [r7, #20]
 80011dc:	e005      	b.n	80011ea <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	061b      	lsls	r3, r3, #24
 80011e4:	697a      	ldr	r2, [r7, #20]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d120      	bne.n	8001232 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	43db      	mvns	r3, r3
 80011fa:	ea02 0103 	and.w	r1, r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	697a      	ldr	r2, [r7, #20]
 8001204:	430a      	orrs	r2, r1
 8001206:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	693a      	ldr	r2, [r7, #16]
 800120e:	6812      	ldr	r2, [r2, #0]
 8001210:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	2b0a      	cmp	r3, #10
 8001218:	d003      	beq.n	8001222 <HAL_DMA2D_ConfigLayer+0xb2>
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	2b09      	cmp	r3, #9
 8001220:	d127      	bne.n	8001272 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	68da      	ldr	r2, [r3, #12]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800122e:	629a      	str	r2, [r3, #40]	; 0x28
 8001230:	e01f      	b.n	8001272 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	69da      	ldr	r2, [r3, #28]
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	43db      	mvns	r3, r3
 800123c:	ea02 0103 	and.w	r1, r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	430a      	orrs	r2, r1
 8001248:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	6812      	ldr	r2, [r2, #0]
 8001252:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	2b0a      	cmp	r3, #10
 800125a:	d003      	beq.n	8001264 <HAL_DMA2D_ConfigLayer+0xf4>
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	2b09      	cmp	r3, #9
 8001262:	d106      	bne.n	8001272 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001270:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2201      	movs	r2, #1
 8001276:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001282:	2300      	movs	r3, #0
}
 8001284:	4618      	mov	r0, r3
 8001286:	371c      	adds	r7, #28
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	ff03000f 	.word	0xff03000f

08001294 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001294:	b480      	push	{r7}
 8001296:	b089      	sub	sp, #36	; 0x24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012a2:	2300      	movs	r3, #0
 80012a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012aa:	2300      	movs	r3, #0
 80012ac:	61fb      	str	r3, [r7, #28]
 80012ae:	e177      	b.n	80015a0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012b0:	2201      	movs	r2, #1
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	697a      	ldr	r2, [r7, #20]
 80012c0:	4013      	ands	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012c4:	693a      	ldr	r2, [r7, #16]
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	f040 8166 	bne.w	800159a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	f003 0303 	and.w	r3, r3, #3
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d005      	beq.n	80012e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d130      	bne.n	8001348 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	005b      	lsls	r3, r3, #1
 80012f0:	2203      	movs	r2, #3
 80012f2:	fa02 f303 	lsl.w	r3, r2, r3
 80012f6:	43db      	mvns	r3, r3
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	4013      	ands	r3, r2
 80012fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	68da      	ldr	r2, [r3, #12]
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	4313      	orrs	r3, r2
 800130e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	69ba      	ldr	r2, [r7, #24]
 8001314:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800131c:	2201      	movs	r2, #1
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	fa02 f303 	lsl.w	r3, r2, r3
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	091b      	lsrs	r3, r3, #4
 8001332:	f003 0201 	and.w	r2, r3, #1
 8001336:	69fb      	ldr	r3, [r7, #28]
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	4313      	orrs	r3, r2
 8001340:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69ba      	ldr	r2, [r7, #24]
 8001346:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	f003 0303 	and.w	r3, r3, #3
 8001350:	2b03      	cmp	r3, #3
 8001352:	d017      	beq.n	8001384 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	2203      	movs	r2, #3
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	43db      	mvns	r3, r3
 8001366:	69ba      	ldr	r2, [r7, #24]
 8001368:	4013      	ands	r3, r2
 800136a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	689a      	ldr	r2, [r3, #8]
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	005b      	lsls	r3, r3, #1
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f003 0303 	and.w	r3, r3, #3
 800138c:	2b02      	cmp	r3, #2
 800138e:	d123      	bne.n	80013d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	08da      	lsrs	r2, r3, #3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3208      	adds	r2, #8
 8001398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800139c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	691a      	ldr	r2, [r3, #16]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	f003 0307 	and.w	r3, r3, #7
 80013be:	009b      	lsls	r3, r3, #2
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	08da      	lsrs	r2, r3, #3
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	3208      	adds	r2, #8
 80013d2:	69b9      	ldr	r1, [r7, #24]
 80013d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80013de:	69fb      	ldr	r3, [r7, #28]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	2203      	movs	r2, #3
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	69ba      	ldr	r2, [r7, #24]
 80013ec:	4013      	ands	r3, r2
 80013ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	f003 0203 	and.w	r2, r3, #3
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001414:	2b00      	cmp	r3, #0
 8001416:	f000 80c0 	beq.w	800159a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_GPIO_Init+0x324>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <HAL_GPIO_Init+0x324>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_GPIO_Init+0x324>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001436:	4a61      	ldr	r2, [pc, #388]	; (80015bc <HAL_GPIO_Init+0x328>)
 8001438:	69fb      	ldr	r3, [r7, #28]
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	3302      	adds	r3, #2
 800143e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001442:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	f003 0303 	and.w	r3, r3, #3
 800144a:	009b      	lsls	r3, r3, #2
 800144c:	220f      	movs	r2, #15
 800144e:	fa02 f303 	lsl.w	r3, r2, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	4013      	ands	r3, r2
 8001458:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a58      	ldr	r2, [pc, #352]	; (80015c0 <HAL_GPIO_Init+0x32c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d037      	beq.n	80014d2 <HAL_GPIO_Init+0x23e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a57      	ldr	r2, [pc, #348]	; (80015c4 <HAL_GPIO_Init+0x330>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d031      	beq.n	80014ce <HAL_GPIO_Init+0x23a>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a56      	ldr	r2, [pc, #344]	; (80015c8 <HAL_GPIO_Init+0x334>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d02b      	beq.n	80014ca <HAL_GPIO_Init+0x236>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	4a55      	ldr	r2, [pc, #340]	; (80015cc <HAL_GPIO_Init+0x338>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d025      	beq.n	80014c6 <HAL_GPIO_Init+0x232>
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a54      	ldr	r2, [pc, #336]	; (80015d0 <HAL_GPIO_Init+0x33c>)
 800147e:	4293      	cmp	r3, r2
 8001480:	d01f      	beq.n	80014c2 <HAL_GPIO_Init+0x22e>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4a53      	ldr	r2, [pc, #332]	; (80015d4 <HAL_GPIO_Init+0x340>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d019      	beq.n	80014be <HAL_GPIO_Init+0x22a>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4a52      	ldr	r2, [pc, #328]	; (80015d8 <HAL_GPIO_Init+0x344>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d013      	beq.n	80014ba <HAL_GPIO_Init+0x226>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a51      	ldr	r2, [pc, #324]	; (80015dc <HAL_GPIO_Init+0x348>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00d      	beq.n	80014b6 <HAL_GPIO_Init+0x222>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a50      	ldr	r2, [pc, #320]	; (80015e0 <HAL_GPIO_Init+0x34c>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d007      	beq.n	80014b2 <HAL_GPIO_Init+0x21e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a4f      	ldr	r2, [pc, #316]	; (80015e4 <HAL_GPIO_Init+0x350>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d101      	bne.n	80014ae <HAL_GPIO_Init+0x21a>
 80014aa:	2309      	movs	r3, #9
 80014ac:	e012      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ae:	230a      	movs	r3, #10
 80014b0:	e010      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014b2:	2308      	movs	r3, #8
 80014b4:	e00e      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014b6:	2307      	movs	r3, #7
 80014b8:	e00c      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ba:	2306      	movs	r3, #6
 80014bc:	e00a      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014be:	2305      	movs	r3, #5
 80014c0:	e008      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014c2:	2304      	movs	r3, #4
 80014c4:	e006      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014c6:	2303      	movs	r3, #3
 80014c8:	e004      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ca:	2302      	movs	r3, #2
 80014cc:	e002      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014ce:	2301      	movs	r3, #1
 80014d0:	e000      	b.n	80014d4 <HAL_GPIO_Init+0x240>
 80014d2:	2300      	movs	r3, #0
 80014d4:	69fa      	ldr	r2, [r7, #28]
 80014d6:	f002 0203 	and.w	r2, r2, #3
 80014da:	0092      	lsls	r2, r2, #2
 80014dc:	4093      	lsls	r3, r2
 80014de:	69ba      	ldr	r2, [r7, #24]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014e4:	4935      	ldr	r1, [pc, #212]	; (80015bc <HAL_GPIO_Init+0x328>)
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	089b      	lsrs	r3, r3, #2
 80014ea:	3302      	adds	r3, #2
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014f2:	4b3d      	ldr	r3, [pc, #244]	; (80015e8 <HAL_GPIO_Init+0x354>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	43db      	mvns	r3, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4013      	ands	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800150a:	2b00      	cmp	r3, #0
 800150c:	d003      	beq.n	8001516 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800150e:	69ba      	ldr	r2, [r7, #24]
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	4313      	orrs	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001516:	4a34      	ldr	r2, [pc, #208]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800151c:	4b32      	ldr	r3, [pc, #200]	; (80015e8 <HAL_GPIO_Init+0x354>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d003      	beq.n	8001540 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4313      	orrs	r3, r2
 800153e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001540:	4a29      	ldr	r2, [pc, #164]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001546:	4b28      	ldr	r3, [pc, #160]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800154c:	693b      	ldr	r3, [r7, #16]
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800156a:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <HAL_GPIO_Init+0x354>)
 800156c:	69bb      	ldr	r3, [r7, #24]
 800156e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	43db      	mvns	r3, r3
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	4013      	ands	r3, r2
 800157e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d003      	beq.n	8001594 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <HAL_GPIO_Init+0x354>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3301      	adds	r3, #1
 800159e:	61fb      	str	r3, [r7, #28]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	2b0f      	cmp	r3, #15
 80015a4:	f67f ae84 	bls.w	80012b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80015a8:	bf00      	nop
 80015aa:	bf00      	nop
 80015ac:	3724      	adds	r7, #36	; 0x24
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40013800 	.word	0x40013800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020400 	.word	0x40020400
 80015c8:	40020800 	.word	0x40020800
 80015cc:	40020c00 	.word	0x40020c00
 80015d0:	40021000 	.word	0x40021000
 80015d4:	40021400 	.word	0x40021400
 80015d8:	40021800 	.word	0x40021800
 80015dc:	40021c00 	.word	0x40021c00
 80015e0:	40022000 	.word	0x40022000
 80015e4:	40022400 	.word	0x40022400
 80015e8:	40013c00 	.word	0x40013c00

080015ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	460b      	mov	r3, r1
 80015f6:	807b      	strh	r3, [r7, #2]
 80015f8:	4613      	mov	r3, r2
 80015fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015fc:	787b      	ldrb	r3, [r7, #1]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d003      	beq.n	800160a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001602:	887a      	ldrh	r2, [r7, #2]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001608:	e003      	b.n	8001612 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	041a      	lsls	r2, r3, #16
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	619a      	str	r2, [r3, #24]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800161e:	b480      	push	{r7}
 8001620:	b085      	sub	sp, #20
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
 8001626:	460b      	mov	r3, r1
 8001628:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	695b      	ldr	r3, [r3, #20]
 800162e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001630:	887a      	ldrh	r2, [r7, #2]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	4013      	ands	r3, r2
 8001636:	041a      	lsls	r2, r3, #16
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	43d9      	mvns	r1, r3
 800163c:	887b      	ldrh	r3, [r7, #2]
 800163e:	400b      	ands	r3, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	619a      	str	r2, [r3, #24]
}
 8001646:	bf00      	nop
 8001648:	3714      	adds	r7, #20
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
	...

08001654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800165e:	4b08      	ldr	r3, [pc, #32]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001660:	695a      	ldr	r2, [r3, #20]
 8001662:	88fb      	ldrh	r3, [r7, #6]
 8001664:	4013      	ands	r3, r2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800166a:	4a05      	ldr	r2, [pc, #20]	; (8001680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800166c:	88fb      	ldrh	r3, [r7, #6]
 800166e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001670:	88fb      	ldrh	r3, [r7, #6]
 8001672:	4618      	mov	r0, r3
 8001674:	f7ff f91e 	bl	80008b4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001678:	bf00      	nop
 800167a:	3708      	adds	r7, #8
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	40013c00 	.word	0x40013c00

08001684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d101      	bne.n	8001696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001692:	2301      	movs	r3, #1
 8001694:	e267      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0301 	and.w	r3, r3, #1
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d075      	beq.n	800178e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016a2:	4b88      	ldr	r3, [pc, #544]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016a4:	689b      	ldr	r3, [r3, #8]
 80016a6:	f003 030c 	and.w	r3, r3, #12
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	d00c      	beq.n	80016c8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ae:	4b85      	ldr	r3, [pc, #532]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80016b6:	2b08      	cmp	r3, #8
 80016b8:	d112      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80016ba:	4b82      	ldr	r3, [pc, #520]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016c6:	d10b      	bne.n	80016e0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016c8:	4b7e      	ldr	r3, [pc, #504]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d05b      	beq.n	800178c <HAL_RCC_OscConfig+0x108>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d157      	bne.n	800178c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016dc:	2301      	movs	r3, #1
 80016de:	e242      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016e8:	d106      	bne.n	80016f8 <HAL_RCC_OscConfig+0x74>
 80016ea:	4b76      	ldr	r3, [pc, #472]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a75      	ldr	r2, [pc, #468]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80016f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	e01d      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001700:	d10c      	bne.n	800171c <HAL_RCC_OscConfig+0x98>
 8001702:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a6f      	ldr	r2, [pc, #444]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b6d      	ldr	r3, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a6c      	ldr	r2, [pc, #432]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001718:	6013      	str	r3, [r2, #0]
 800171a:	e00b      	b.n	8001734 <HAL_RCC_OscConfig+0xb0>
 800171c:	4b69      	ldr	r3, [pc, #420]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a68      	ldr	r2, [pc, #416]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001726:	6013      	str	r3, [r2, #0]
 8001728:	4b66      	ldr	r3, [pc, #408]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a65      	ldr	r2, [pc, #404]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 800172e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d013      	beq.n	8001764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173c:	f7ff fa62 	bl	8000c04 <HAL_GetTick>
 8001740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001744:	f7ff fa5e 	bl	8000c04 <HAL_GetTick>
 8001748:	4602      	mov	r2, r0
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b64      	cmp	r3, #100	; 0x64
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e207      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001756:	4b5b      	ldr	r3, [pc, #364]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0xc0>
 8001762:	e014      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001764:	f7ff fa4e 	bl	8000c04 <HAL_GetTick>
 8001768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800176a:	e008      	b.n	800177e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800176c:	f7ff fa4a 	bl	8000c04 <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b64      	cmp	r3, #100	; 0x64
 8001778:	d901      	bls.n	800177e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	e1f3      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177e:	4b51      	ldr	r3, [pc, #324]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d1f0      	bne.n	800176c <HAL_RCC_OscConfig+0xe8>
 800178a:	e000      	b.n	800178e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d063      	beq.n	8001862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800179a:	4b4a      	ldr	r3, [pc, #296]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f003 030c 	and.w	r3, r3, #12
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d00b      	beq.n	80017be <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a6:	4b47      	ldr	r3, [pc, #284]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80017ae:	2b08      	cmp	r3, #8
 80017b0:	d11c      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b2:	4b44      	ldr	r3, [pc, #272]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d116      	bne.n	80017ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d005      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	68db      	ldr	r3, [r3, #12]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d001      	beq.n	80017d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e1c7      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d6:	4b3b      	ldr	r3, [pc, #236]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	4937      	ldr	r1, [pc, #220]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ea:	e03a      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f4:	4b34      	ldr	r3, [pc, #208]	; (80018c8 <HAL_RCC_OscConfig+0x244>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fa:	f7ff fa03 	bl	8000c04 <HAL_GetTick>
 80017fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001800:	e008      	b.n	8001814 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001802:	f7ff f9ff 	bl	8000c04 <HAL_GetTick>
 8001806:	4602      	mov	r2, r0
 8001808:	693b      	ldr	r3, [r7, #16]
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	2b02      	cmp	r3, #2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e1a8      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001814:	4b2b      	ldr	r3, [pc, #172]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0f0      	beq.n	8001802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001820:	4b28      	ldr	r3, [pc, #160]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	691b      	ldr	r3, [r3, #16]
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	4925      	ldr	r1, [pc, #148]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
 8001834:	e015      	b.n	8001862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001836:	4b24      	ldr	r3, [pc, #144]	; (80018c8 <HAL_RCC_OscConfig+0x244>)
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800183c:	f7ff f9e2 	bl	8000c04 <HAL_GetTick>
 8001840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001842:	e008      	b.n	8001856 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001844:	f7ff f9de 	bl	8000c04 <HAL_GetTick>
 8001848:	4602      	mov	r2, r0
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	2b02      	cmp	r3, #2
 8001850:	d901      	bls.n	8001856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e187      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001856:	4b1b      	ldr	r3, [pc, #108]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d1f0      	bne.n	8001844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0308 	and.w	r3, r3, #8
 800186a:	2b00      	cmp	r3, #0
 800186c:	d036      	beq.n	80018dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	695b      	ldr	r3, [r3, #20]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d016      	beq.n	80018a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001876:	4b15      	ldr	r3, [pc, #84]	; (80018cc <HAL_RCC_OscConfig+0x248>)
 8001878:	2201      	movs	r2, #1
 800187a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff f9c2 	bl	8000c04 <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001882:	e008      	b.n	8001896 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001884:	f7ff f9be 	bl	8000c04 <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	2b02      	cmp	r3, #2
 8001890:	d901      	bls.n	8001896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001892:	2303      	movs	r3, #3
 8001894:	e167      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001896:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_RCC_OscConfig+0x240>)
 8001898:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0f0      	beq.n	8001884 <HAL_RCC_OscConfig+0x200>
 80018a2:	e01b      	b.n	80018dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <HAL_RCC_OscConfig+0x248>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018aa:	f7ff f9ab 	bl	8000c04 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018b0:	e00e      	b.n	80018d0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018b2:	f7ff f9a7 	bl	8000c04 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d907      	bls.n	80018d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e150      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
 80018c4:	40023800 	.word	0x40023800
 80018c8:	42470000 	.word	0x42470000
 80018cc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d0:	4b88      	ldr	r3, [pc, #544]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 80018d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d1ea      	bne.n	80018b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f003 0304 	and.w	r3, r3, #4
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 8097 	beq.w	8001a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ee:	4b81      	ldr	r3, [pc, #516]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d10f      	bne.n	800191a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
 80018fe:	4b7d      	ldr	r3, [pc, #500]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a7c      	ldr	r2, [pc, #496]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b7a      	ldr	r3, [pc, #488]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001916:	2301      	movs	r3, #1
 8001918:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800191a:	4b77      	ldr	r3, [pc, #476]	; (8001af8 <HAL_RCC_OscConfig+0x474>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d118      	bne.n	8001958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001926:	4b74      	ldr	r3, [pc, #464]	; (8001af8 <HAL_RCC_OscConfig+0x474>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a73      	ldr	r2, [pc, #460]	; (8001af8 <HAL_RCC_OscConfig+0x474>)
 800192c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff f967 	bl	8000c04 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff f963 	bl	8000c04 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e10c      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800194c:	4b6a      	ldr	r3, [pc, #424]	; (8001af8 <HAL_RCC_OscConfig+0x474>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001954:	2b00      	cmp	r3, #0
 8001956:	d0f0      	beq.n	800193a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	2b01      	cmp	r3, #1
 800195e:	d106      	bne.n	800196e <HAL_RCC_OscConfig+0x2ea>
 8001960:	4b64      	ldr	r3, [pc, #400]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001964:	4a63      	ldr	r2, [pc, #396]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001966:	f043 0301 	orr.w	r3, r3, #1
 800196a:	6713      	str	r3, [r2, #112]	; 0x70
 800196c:	e01c      	b.n	80019a8 <HAL_RCC_OscConfig+0x324>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b05      	cmp	r3, #5
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x30c>
 8001976:	4b5f      	ldr	r3, [pc, #380]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197a:	4a5e      	ldr	r2, [pc, #376]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	6713      	str	r3, [r2, #112]	; 0x70
 8001982:	4b5c      	ldr	r3, [pc, #368]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001986:	4a5b      	ldr	r2, [pc, #364]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001988:	f043 0301 	orr.w	r3, r3, #1
 800198c:	6713      	str	r3, [r2, #112]	; 0x70
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0x324>
 8001990:	4b58      	ldr	r3, [pc, #352]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001994:	4a57      	ldr	r2, [pc, #348]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001996:	f023 0301 	bic.w	r3, r3, #1
 800199a:	6713      	str	r3, [r2, #112]	; 0x70
 800199c:	4b55      	ldr	r3, [pc, #340]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 800199e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019a0:	4a54      	ldr	r2, [pc, #336]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019a2:	f023 0304 	bic.w	r3, r3, #4
 80019a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d015      	beq.n	80019dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b0:	f7ff f928 	bl	8000c04 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b6:	e00a      	b.n	80019ce <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b8:	f7ff f924 	bl	8000c04 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d901      	bls.n	80019ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e0cb      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ce:	4b49      	ldr	r3, [pc, #292]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ee      	beq.n	80019b8 <HAL_RCC_OscConfig+0x334>
 80019da:	e014      	b.n	8001a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019dc:	f7ff f912 	bl	8000c04 <HAL_GetTick>
 80019e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e2:	e00a      	b.n	80019fa <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e4:	f7ff f90e 	bl	8000c04 <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e0b5      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019fa:	4b3e      	ldr	r3, [pc, #248]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 80019fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fe:	f003 0302 	and.w	r3, r3, #2
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1ee      	bne.n	80019e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a06:	7dfb      	ldrb	r3, [r7, #23]
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d105      	bne.n	8001a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a0c:	4b39      	ldr	r3, [pc, #228]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	4a38      	ldr	r2, [pc, #224]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a16:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	699b      	ldr	r3, [r3, #24]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	f000 80a1 	beq.w	8001b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a22:	4b34      	ldr	r3, [pc, #208]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f003 030c 	and.w	r3, r3, #12
 8001a2a:	2b08      	cmp	r3, #8
 8001a2c:	d05c      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	699b      	ldr	r3, [r3, #24]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d141      	bne.n	8001aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a36:	4b31      	ldr	r3, [pc, #196]	; (8001afc <HAL_RCC_OscConfig+0x478>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3c:	f7ff f8e2 	bl	8000c04 <HAL_GetTick>
 8001a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a44:	f7ff f8de 	bl	8000c04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e087      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a56:	4b27      	ldr	r3, [pc, #156]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d1f0      	bne.n	8001a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	69da      	ldr	r2, [r3, #28]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a1b      	ldr	r3, [r3, #32]
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	019b      	lsls	r3, r3, #6
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a78:	085b      	lsrs	r3, r3, #1
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	041b      	lsls	r3, r3, #16
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	491b      	ldr	r1, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	4b1b      	ldr	r3, [pc, #108]	; (8001afc <HAL_RCC_OscConfig+0x478>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a92:	f7ff f8b7 	bl	8000c04 <HAL_GetTick>
 8001a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a98:	e008      	b.n	8001aac <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9a:	f7ff f8b3 	bl	8000c04 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	693b      	ldr	r3, [r7, #16]
 8001aa2:	1ad3      	subs	r3, r2, r3
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d901      	bls.n	8001aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	e05c      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d0f0      	beq.n	8001a9a <HAL_RCC_OscConfig+0x416>
 8001ab8:	e054      	b.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aba:	4b10      	ldr	r3, [pc, #64]	; (8001afc <HAL_RCC_OscConfig+0x478>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff f8a0 	bl	8000c04 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7ff f89c 	bl	8000c04 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e045      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_OscConfig+0x470>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x444>
 8001ae6:	e03d      	b.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	699b      	ldr	r3, [r3, #24]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d107      	bne.n	8001b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e038      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
 8001af4:	40023800 	.word	0x40023800
 8001af8:	40007000 	.word	0x40007000
 8001afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b00:	4b1b      	ldr	r3, [pc, #108]	; (8001b70 <HAL_RCC_OscConfig+0x4ec>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d028      	beq.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d121      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2a:	68fa      	ldr	r2, [r7, #12]
 8001b2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b30:	4013      	ands	r3, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d111      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	d001      	beq.n	8001b64 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e000      	b.n	8001b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001b64:	2300      	movs	r3, #0
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3718      	adds	r7, #24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40023800 	.word	0x40023800

08001b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b084      	sub	sp, #16
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b84:	2301      	movs	r3, #1
 8001b86:	e0cc      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 030f 	and.w	r3, r3, #15
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d90c      	bls.n	8001bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b96:	4b65      	ldr	r3, [pc, #404]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b98:	683a      	ldr	r2, [r7, #0]
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f003 030f 	and.w	r3, r3, #15
 8001ba6:	683a      	ldr	r2, [r7, #0]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d001      	beq.n	8001bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	e0b8      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d020      	beq.n	8001bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc8:	4b59      	ldr	r3, [pc, #356]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	4a58      	ldr	r2, [pc, #352]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001bd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0308 	and.w	r3, r3, #8
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001be0:	4b53      	ldr	r3, [pc, #332]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001be6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bec:	4b50      	ldr	r3, [pc, #320]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	494d      	ldr	r1, [pc, #308]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d044      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d107      	bne.n	8001c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c12:	4b47      	ldr	r3, [pc, #284]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d119      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e07f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d003      	beq.n	8001c32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c2e:	2b03      	cmp	r3, #3
 8001c30:	d107      	bne.n	8001c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c32:	4b3f      	ldr	r3, [pc, #252]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d109      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e06f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c42:	4b3b      	ldr	r3, [pc, #236]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e067      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c52:	4b37      	ldr	r3, [pc, #220]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	f023 0203 	bic.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	4934      	ldr	r1, [pc, #208]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c64:	f7fe ffce 	bl	8000c04 <HAL_GetTick>
 8001c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c6a:	e00a      	b.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c6c:	f7fe ffca 	bl	8000c04 <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d901      	bls.n	8001c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c7e:	2303      	movs	r3, #3
 8001c80:	e04f      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c82:	4b2b      	ldr	r3, [pc, #172]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c84:	689b      	ldr	r3, [r3, #8]
 8001c86:	f003 020c 	and.w	r2, r3, #12
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d1eb      	bne.n	8001c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c94:	4b25      	ldr	r3, [pc, #148]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d20c      	bcs.n	8001cbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ca2:	4b22      	ldr	r3, [pc, #136]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ca4:	683a      	ldr	r2, [r7, #0]
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_RCC_ClockConfig+0x1b8>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 030f 	and.w	r3, r3, #15
 8001cb2:	683a      	ldr	r2, [r7, #0]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d001      	beq.n	8001cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e032      	b.n	8001d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0304 	and.w	r3, r3, #4
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d008      	beq.n	8001cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cc8:	4b19      	ldr	r3, [pc, #100]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	4916      	ldr	r1, [pc, #88]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d009      	beq.n	8001cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ce6:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001ce8:	689b      	ldr	r3, [r3, #8]
 8001cea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	691b      	ldr	r3, [r3, #16]
 8001cf2:	00db      	lsls	r3, r3, #3
 8001cf4:	490e      	ldr	r1, [pc, #56]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001cfa:	f000 f821 	bl	8001d40 <HAL_RCC_GetSysClockFreq>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <HAL_RCC_ClockConfig+0x1bc>)
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 030f 	and.w	r3, r3, #15
 8001d0a:	490a      	ldr	r1, [pc, #40]	; (8001d34 <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	5ccb      	ldrb	r3, [r1, r3]
 8001d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8001d12:	4a09      	ldr	r2, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x1c4>)
 8001d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d16:	4b09      	ldr	r3, [pc, #36]	; (8001d3c <HAL_RCC_ClockConfig+0x1c8>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe ff2e 	bl	8000b7c <HAL_InitTick>

  return HAL_OK;
 8001d20:	2300      	movs	r3, #0
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	40023c00 	.word	0x40023c00
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08003ac4 	.word	0x08003ac4
 8001d38:	20000004 	.word	0x20000004
 8001d3c:	20000008 	.word	0x20000008

08001d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d44:	b094      	sub	sp, #80	; 0x50
 8001d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d50:	2300      	movs	r3, #0
 8001d52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001d54:	2300      	movs	r3, #0
 8001d56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d58:	4b79      	ldr	r3, [pc, #484]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	f003 030c 	and.w	r3, r3, #12
 8001d60:	2b08      	cmp	r3, #8
 8001d62:	d00d      	beq.n	8001d80 <HAL_RCC_GetSysClockFreq+0x40>
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	f200 80e1 	bhi.w	8001f2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d002      	beq.n	8001d74 <HAL_RCC_GetSysClockFreq+0x34>
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d003      	beq.n	8001d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8001d72:	e0db      	b.n	8001f2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d74:	4b73      	ldr	r3, [pc, #460]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001d76:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001d78:	e0db      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d7a:	4b73      	ldr	r3, [pc, #460]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x208>)
 8001d7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001d7e:	e0d8      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d80:	4b6f      	ldr	r3, [pc, #444]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d88:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001d8a:	4b6d      	ldr	r3, [pc, #436]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d063      	beq.n	8001e5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d96:	4b6a      	ldr	r3, [pc, #424]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	099b      	lsrs	r3, r3, #6
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001da0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001da8:	633b      	str	r3, [r7, #48]	; 0x30
 8001daa:	2300      	movs	r3, #0
 8001dac:	637b      	str	r3, [r7, #52]	; 0x34
 8001dae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001db2:	4622      	mov	r2, r4
 8001db4:	462b      	mov	r3, r5
 8001db6:	f04f 0000 	mov.w	r0, #0
 8001dba:	f04f 0100 	mov.w	r1, #0
 8001dbe:	0159      	lsls	r1, r3, #5
 8001dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dc4:	0150      	lsls	r0, r2, #5
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4621      	mov	r1, r4
 8001dcc:	1a51      	subs	r1, r2, r1
 8001dce:	6139      	str	r1, [r7, #16]
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8001dd6:	617b      	str	r3, [r7, #20]
 8001dd8:	f04f 0200 	mov.w	r2, #0
 8001ddc:	f04f 0300 	mov.w	r3, #0
 8001de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001de4:	4659      	mov	r1, fp
 8001de6:	018b      	lsls	r3, r1, #6
 8001de8:	4651      	mov	r1, sl
 8001dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001dee:	4651      	mov	r1, sl
 8001df0:	018a      	lsls	r2, r1, #6
 8001df2:	4651      	mov	r1, sl
 8001df4:	ebb2 0801 	subs.w	r8, r2, r1
 8001df8:	4659      	mov	r1, fp
 8001dfa:	eb63 0901 	sbc.w	r9, r3, r1
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e12:	4690      	mov	r8, r2
 8001e14:	4699      	mov	r9, r3
 8001e16:	4623      	mov	r3, r4
 8001e18:	eb18 0303 	adds.w	r3, r8, r3
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	462b      	mov	r3, r5
 8001e20:	eb49 0303 	adc.w	r3, r9, r3
 8001e24:	60fb      	str	r3, [r7, #12]
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001e32:	4629      	mov	r1, r5
 8001e34:	024b      	lsls	r3, r1, #9
 8001e36:	4621      	mov	r1, r4
 8001e38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e3c:	4621      	mov	r1, r4
 8001e3e:	024a      	lsls	r2, r1, #9
 8001e40:	4610      	mov	r0, r2
 8001e42:	4619      	mov	r1, r3
 8001e44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e46:	2200      	movs	r2, #0
 8001e48:	62bb      	str	r3, [r7, #40]	; 0x28
 8001e4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001e50:	f7fe f9ce 	bl	80001f0 <__aeabi_uldivmod>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4613      	mov	r3, r2
 8001e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e5c:	e058      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e5e:	4b38      	ldr	r3, [pc, #224]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	099b      	lsrs	r3, r3, #6
 8001e64:	2200      	movs	r2, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	4611      	mov	r1, r2
 8001e6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
 8001e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001e78:	4642      	mov	r2, r8
 8001e7a:	464b      	mov	r3, r9
 8001e7c:	f04f 0000 	mov.w	r0, #0
 8001e80:	f04f 0100 	mov.w	r1, #0
 8001e84:	0159      	lsls	r1, r3, #5
 8001e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001e8a:	0150      	lsls	r0, r2, #5
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4641      	mov	r1, r8
 8001e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8001e96:	4649      	mov	r1, r9
 8001e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e9c:	f04f 0200 	mov.w	r2, #0
 8001ea0:	f04f 0300 	mov.w	r3, #0
 8001ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8001eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	00eb      	lsls	r3, r5, #3
 8001ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ec6:	00e2      	lsls	r2, r4, #3
 8001ec8:	4614      	mov	r4, r2
 8001eca:	461d      	mov	r5, r3
 8001ecc:	4643      	mov	r3, r8
 8001ece:	18e3      	adds	r3, r4, r3
 8001ed0:	603b      	str	r3, [r7, #0]
 8001ed2:	464b      	mov	r3, r9
 8001ed4:	eb45 0303 	adc.w	r3, r5, r3
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	f04f 0200 	mov.w	r2, #0
 8001ede:	f04f 0300 	mov.w	r3, #0
 8001ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ee6:	4629      	mov	r1, r5
 8001ee8:	028b      	lsls	r3, r1, #10
 8001eea:	4621      	mov	r1, r4
 8001eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ef0:	4621      	mov	r1, r4
 8001ef2:	028a      	lsls	r2, r1, #10
 8001ef4:	4610      	mov	r0, r2
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001efa:	2200      	movs	r2, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	61fa      	str	r2, [r7, #28]
 8001f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f04:	f7fe f974 	bl	80001f0 <__aeabi_uldivmod>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	f003 0303 	and.w	r3, r3, #3
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001f20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001f22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f2a:	e002      	b.n	8001f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f2c:	4b05      	ldr	r3, [pc, #20]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3750      	adds	r7, #80	; 0x50
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800
 8001f44:	00f42400 	.word	0x00f42400
 8001f48:	007a1200 	.word	0x007a1200

08001f4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d101      	bne.n	8001f5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e041      	b.n	8001fe2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7fe fd4e 	bl	8000a14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2202      	movs	r2, #2
 8001f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	3304      	adds	r3, #4
 8001f88:	4619      	mov	r1, r3
 8001f8a:	4610      	mov	r0, r2
 8001f8c:	f000 f8f4 	bl	8002178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2201      	movs	r2, #1
 8001f94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2201      	movs	r2, #1
 8001fa4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2201      	movs	r2, #1
 8001fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2201      	movs	r2, #1
 8001fcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2201      	movs	r2, #1
 8001fd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fe0:	2300      	movs	r3, #0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b084      	sub	sp, #16
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_TIM_ConfigClockSource+0x1c>
 8002002:	2302      	movs	r3, #2
 8002004:	e0b4      	b.n	8002170 <HAL_TIM_ConfigClockSource+0x186>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2202      	movs	r2, #2
 8002012:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002024:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800202c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800203e:	d03e      	beq.n	80020be <HAL_TIM_ConfigClockSource+0xd4>
 8002040:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002044:	f200 8087 	bhi.w	8002156 <HAL_TIM_ConfigClockSource+0x16c>
 8002048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800204c:	f000 8086 	beq.w	800215c <HAL_TIM_ConfigClockSource+0x172>
 8002050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002054:	d87f      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x16c>
 8002056:	2b70      	cmp	r3, #112	; 0x70
 8002058:	d01a      	beq.n	8002090 <HAL_TIM_ConfigClockSource+0xa6>
 800205a:	2b70      	cmp	r3, #112	; 0x70
 800205c:	d87b      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x16c>
 800205e:	2b60      	cmp	r3, #96	; 0x60
 8002060:	d050      	beq.n	8002104 <HAL_TIM_ConfigClockSource+0x11a>
 8002062:	2b60      	cmp	r3, #96	; 0x60
 8002064:	d877      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x16c>
 8002066:	2b50      	cmp	r3, #80	; 0x50
 8002068:	d03c      	beq.n	80020e4 <HAL_TIM_ConfigClockSource+0xfa>
 800206a:	2b50      	cmp	r3, #80	; 0x50
 800206c:	d873      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x16c>
 800206e:	2b40      	cmp	r3, #64	; 0x40
 8002070:	d058      	beq.n	8002124 <HAL_TIM_ConfigClockSource+0x13a>
 8002072:	2b40      	cmp	r3, #64	; 0x40
 8002074:	d86f      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x16c>
 8002076:	2b30      	cmp	r3, #48	; 0x30
 8002078:	d064      	beq.n	8002144 <HAL_TIM_ConfigClockSource+0x15a>
 800207a:	2b30      	cmp	r3, #48	; 0x30
 800207c:	d86b      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x16c>
 800207e:	2b20      	cmp	r3, #32
 8002080:	d060      	beq.n	8002144 <HAL_TIM_ConfigClockSource+0x15a>
 8002082:	2b20      	cmp	r3, #32
 8002084:	d867      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x16c>
 8002086:	2b00      	cmp	r3, #0
 8002088:	d05c      	beq.n	8002144 <HAL_TIM_ConfigClockSource+0x15a>
 800208a:	2b10      	cmp	r3, #16
 800208c:	d05a      	beq.n	8002144 <HAL_TIM_ConfigClockSource+0x15a>
 800208e:	e062      	b.n	8002156 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6818      	ldr	r0, [r3, #0]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	6899      	ldr	r1, [r3, #8]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	f000 f984 	bl	80023ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689b      	ldr	r3, [r3, #8]
 80020aa:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020b2:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68ba      	ldr	r2, [r7, #8]
 80020ba:	609a      	str	r2, [r3, #8]
      break;
 80020bc:	e04f      	b.n	800215e <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6899      	ldr	r1, [r3, #8]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	f000 f96d 	bl	80023ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020e0:	609a      	str	r2, [r3, #8]
      break;
 80020e2:	e03c      	b.n	800215e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	6859      	ldr	r1, [r3, #4]
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	461a      	mov	r2, r3
 80020f2:	f000 f8e1 	bl	80022b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2150      	movs	r1, #80	; 0x50
 80020fc:	4618      	mov	r0, r3
 80020fe:	f000 f93a 	bl	8002376 <TIM_ITRx_SetConfig>
      break;
 8002102:	e02c      	b.n	800215e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6818      	ldr	r0, [r3, #0]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	6859      	ldr	r1, [r3, #4]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	461a      	mov	r2, r3
 8002112:	f000 f900 	bl	8002316 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2160      	movs	r1, #96	; 0x60
 800211c:	4618      	mov	r0, r3
 800211e:	f000 f92a 	bl	8002376 <TIM_ITRx_SetConfig>
      break;
 8002122:	e01c      	b.n	800215e <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6818      	ldr	r0, [r3, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	6859      	ldr	r1, [r3, #4]
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	461a      	mov	r2, r3
 8002132:	f000 f8c1 	bl	80022b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2140      	movs	r1, #64	; 0x40
 800213c:	4618      	mov	r0, r3
 800213e:	f000 f91a 	bl	8002376 <TIM_ITRx_SetConfig>
      break;
 8002142:	e00c      	b.n	800215e <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4619      	mov	r1, r3
 800214e:	4610      	mov	r0, r2
 8002150:	f000 f911 	bl	8002376 <TIM_ITRx_SetConfig>
      break;
 8002154:	e003      	b.n	800215e <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	73fb      	strb	r3, [r7, #15]
      break;
 800215a:	e000      	b.n	800215e <HAL_TIM_ConfigClockSource+0x174>
      break;
 800215c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800216e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002170:	4618      	mov	r0, r3
 8002172:	3710      	adds	r7, #16
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}

08002178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a40      	ldr	r2, [pc, #256]	; (800228c <TIM_Base_SetConfig+0x114>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002196:	d00f      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a3d      	ldr	r2, [pc, #244]	; (8002290 <TIM_Base_SetConfig+0x118>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00b      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a3c      	ldr	r2, [pc, #240]	; (8002294 <TIM_Base_SetConfig+0x11c>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a3b      	ldr	r2, [pc, #236]	; (8002298 <TIM_Base_SetConfig+0x120>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0x40>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a3a      	ldr	r2, [pc, #232]	; (800229c <TIM_Base_SetConfig+0x124>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d108      	bne.n	80021ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	68fa      	ldr	r2, [r7, #12]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a2f      	ldr	r2, [pc, #188]	; (800228c <TIM_Base_SetConfig+0x114>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d02b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d8:	d027      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a2c      	ldr	r2, [pc, #176]	; (8002290 <TIM_Base_SetConfig+0x118>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d023      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a2b      	ldr	r2, [pc, #172]	; (8002294 <TIM_Base_SetConfig+0x11c>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a2a      	ldr	r2, [pc, #168]	; (8002298 <TIM_Base_SetConfig+0x120>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a29      	ldr	r2, [pc, #164]	; (800229c <TIM_Base_SetConfig+0x124>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d017      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a28      	ldr	r2, [pc, #160]	; (80022a0 <TIM_Base_SetConfig+0x128>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d013      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a27      	ldr	r2, [pc, #156]	; (80022a4 <TIM_Base_SetConfig+0x12c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00f      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a26      	ldr	r2, [pc, #152]	; (80022a8 <TIM_Base_SetConfig+0x130>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d00b      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a25      	ldr	r2, [pc, #148]	; (80022ac <TIM_Base_SetConfig+0x134>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d007      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a24      	ldr	r2, [pc, #144]	; (80022b0 <TIM_Base_SetConfig+0x138>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d003      	beq.n	800222a <TIM_Base_SetConfig+0xb2>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a23      	ldr	r2, [pc, #140]	; (80022b4 <TIM_Base_SetConfig+0x13c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d108      	bne.n	800223c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	4313      	orrs	r3, r2
 800223a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68fa      	ldr	r2, [r7, #12]
 800224e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	4a0a      	ldr	r2, [pc, #40]	; (800228c <TIM_Base_SetConfig+0x114>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d003      	beq.n	8002270 <TIM_Base_SetConfig+0xf8>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <TIM_Base_SetConfig+0x124>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d103      	bne.n	8002278 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	691a      	ldr	r2, [r3, #16]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	615a      	str	r2, [r3, #20]
}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40000c00 	.word	0x40000c00
 800229c:	40010400 	.word	0x40010400
 80022a0:	40014000 	.word	0x40014000
 80022a4:	40014400 	.word	0x40014400
 80022a8:	40014800 	.word	0x40014800
 80022ac:	40001800 	.word	0x40001800
 80022b0:	40001c00 	.word	0x40001c00
 80022b4:	40002000 	.word	0x40002000

080022b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022b8:	b480      	push	{r7}
 80022ba:	b087      	sub	sp, #28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	6a1b      	ldr	r3, [r3, #32]
 80022c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6a1b      	ldr	r3, [r3, #32]
 80022ce:	f023 0201 	bic.w	r2, r3, #1
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	693a      	ldr	r2, [r7, #16]
 80022ea:	4313      	orrs	r3, r2
 80022ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ee:	697b      	ldr	r3, [r7, #20]
 80022f0:	f023 030a 	bic.w	r3, r3, #10
 80022f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	4313      	orrs	r3, r2
 80022fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	693a      	ldr	r2, [r7, #16]
 8002302:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	697a      	ldr	r2, [r7, #20]
 8002308:	621a      	str	r2, [r3, #32]
}
 800230a:	bf00      	nop
 800230c:	371c      	adds	r7, #28
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002316:	b480      	push	{r7}
 8002318:	b087      	sub	sp, #28
 800231a:	af00      	add	r7, sp, #0
 800231c:	60f8      	str	r0, [r7, #12]
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	f023 0210 	bic.w	r2, r3, #16
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	699b      	ldr	r3, [r3, #24]
 8002332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a1b      	ldr	r3, [r3, #32]
 8002338:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002340:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	031b      	lsls	r3, r3, #12
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	4313      	orrs	r3, r2
 800234a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002352:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	011b      	lsls	r3, r3, #4
 8002358:	693a      	ldr	r2, [r7, #16]
 800235a:	4313      	orrs	r3, r2
 800235c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	697a      	ldr	r2, [r7, #20]
 8002362:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	621a      	str	r2, [r3, #32]
}
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr

08002376 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002376:	b480      	push	{r7}
 8002378:	b085      	sub	sp, #20
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
 800237e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800238c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	4313      	orrs	r3, r2
 8002394:	f043 0307 	orr.w	r3, r3, #7
 8002398:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	609a      	str	r2, [r3, #8]
}
 80023a0:	bf00      	nop
 80023a2:	3714      	adds	r7, #20
 80023a4:	46bd      	mov	sp, r7
 80023a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023aa:	4770      	bx	lr

080023ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b087      	sub	sp, #28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	021a      	lsls	r2, r3, #8
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	431a      	orrs	r2, r3
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	697a      	ldr	r2, [r7, #20]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	697a      	ldr	r2, [r7, #20]
 80023de:	609a      	str	r2, [r3, #8]
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023ec:	b480      	push	{r7}
 80023ee:	b085      	sub	sp, #20
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
 80023f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023fc:	2b01      	cmp	r3, #1
 80023fe:	d101      	bne.n	8002404 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002400:	2302      	movs	r3, #2
 8002402:	e05a      	b.n	80024ba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	689b      	ldr	r3, [r3, #8]
 8002422:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800242a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68fa      	ldr	r2, [r7, #12]
 8002432:	4313      	orrs	r3, r2
 8002434:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68fa      	ldr	r2, [r7, #12]
 800243c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a21      	ldr	r2, [pc, #132]	; (80024c8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d022      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002450:	d01d      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a1d      	ldr	r2, [pc, #116]	; (80024cc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d018      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d013      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d00e      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d009      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a17      	ldr	r2, [pc, #92]	; (80024dc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d004      	beq.n	800248e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a15      	ldr	r2, [pc, #84]	; (80024e0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d10c      	bne.n	80024a8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002494:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	4313      	orrs	r3, r2
 800249e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	68ba      	ldr	r2, [r7, #8]
 80024a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40010000 	.word	0x40010000
 80024cc:	40000400 	.word	0x40000400
 80024d0:	40000800 	.word	0x40000800
 80024d4:	40000c00 	.word	0x40000c00
 80024d8:	40010400 	.word	0x40010400
 80024dc:	40014000 	.word	0x40014000
 80024e0:	40001800 	.word	0x40001800

080024e4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	4603      	mov	r3, r0
 80024ec:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80024f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024f6:	2b84      	cmp	r3, #132	; 0x84
 80024f8:	d005      	beq.n	8002506 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80024fa:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	4413      	add	r3, r2
 8002502:	3303      	adds	r3, #3
 8002504:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8002506:	68fb      	ldr	r3, [r7, #12]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002518:	f000 faea 	bl	8002af0 <vTaskStartScheduler>
  
  return osOK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	bd80      	pop	{r7, pc}

08002522 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8002522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002524:	b089      	sub	sp, #36	; 0x24
 8002526:	af04      	add	r7, sp, #16
 8002528:	6078      	str	r0, [r7, #4]
 800252a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	695b      	ldr	r3, [r3, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d020      	beq.n	8002576 <osThreadCreate+0x54>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	699b      	ldr	r3, [r3, #24]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d01c      	beq.n	8002576 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685c      	ldr	r4, [r3, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681d      	ldr	r5, [r3, #0]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	691e      	ldr	r6, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ffc8 	bl	80024e4 <makeFreeRtosPriority>
 8002554:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	695b      	ldr	r3, [r3, #20]
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800255e:	9202      	str	r2, [sp, #8]
 8002560:	9301      	str	r3, [sp, #4]
 8002562:	9100      	str	r1, [sp, #0]
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	4632      	mov	r2, r6
 8002568:	4629      	mov	r1, r5
 800256a:	4620      	mov	r0, r4
 800256c:	f000 f8ed 	bl	800274a <xTaskCreateStatic>
 8002570:	4603      	mov	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e01c      	b.n	80025b0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685c      	ldr	r4, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8002582:	b29e      	uxth	r6, r3
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800258a:	4618      	mov	r0, r3
 800258c:	f7ff ffaa 	bl	80024e4 <makeFreeRtosPriority>
 8002590:	4602      	mov	r2, r0
 8002592:	f107 030c 	add.w	r3, r7, #12
 8002596:	9301      	str	r3, [sp, #4]
 8002598:	9200      	str	r2, [sp, #0]
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	4632      	mov	r2, r6
 800259e:	4629      	mov	r1, r5
 80025a0:	4620      	mov	r0, r4
 80025a2:	f000 f92f 	bl	8002804 <xTaskCreate>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d001      	beq.n	80025b0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	e000      	b.n	80025b2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80025b0:	68fb      	ldr	r3, [r7, #12]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080025ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b084      	sub	sp, #16
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <osDelay+0x16>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	e000      	b.n	80025d2 <osDelay+0x18>
 80025d0:	2301      	movs	r3, #1
 80025d2:	4618      	mov	r0, r3
 80025d4:	f000 fa58 	bl	8002a88 <vTaskDelay>
  
  return osOK;
 80025d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80025da:	4618      	mov	r0, r3
 80025dc:	3710      	adds	r7, #16
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}

080025e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80025e2:	b480      	push	{r7}
 80025e4:	b083      	sub	sp, #12
 80025e6:	af00      	add	r7, sp, #0
 80025e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f103 0208 	add.w	r2, r3, #8
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	f04f 32ff 	mov.w	r2, #4294967295
 80025fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 0208 	add.w	r2, r3, #8
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	f103 0208 	add.w	r2, r3, #8
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr

0800263c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800263c:	b480      	push	{r7}
 800263e:	b085      	sub	sp, #20
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	68fa      	ldr	r2, [r7, #12]
 8002650:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	683a      	ldr	r2, [r7, #0]
 8002660:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	683a      	ldr	r2, [r7, #0]
 8002666:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	1c5a      	adds	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	601a      	str	r2, [r3, #0]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269a:	d103      	bne.n	80026a4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	691b      	ldr	r3, [r3, #16]
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	e00c      	b.n	80026be <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	3308      	adds	r3, #8
 80026a8:	60fb      	str	r3, [r7, #12]
 80026aa:	e002      	b.n	80026b2 <vListInsert+0x2e>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	60fb      	str	r3, [r7, #12]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d2f6      	bcs.n	80026ac <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	685a      	ldr	r2, [r3, #4]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	683a      	ldr	r2, [r7, #0]
 80026cc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	68fa      	ldr	r2, [r7, #12]
 80026d2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	687a      	ldr	r2, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	1c5a      	adds	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	601a      	str	r2, [r3, #0]
}
 80026ea:	bf00      	nop
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr

080026f6 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80026f6:	b480      	push	{r7}
 80026f8:	b085      	sub	sp, #20
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	691b      	ldr	r3, [r3, #16]
 8002702:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	687a      	ldr	r2, [r7, #4]
 800270a:	6892      	ldr	r2, [r2, #8]
 800270c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	6852      	ldr	r2, [r2, #4]
 8002716:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	687a      	ldr	r2, [r7, #4]
 800271e:	429a      	cmp	r2, r3
 8002720:	d103      	bne.n	800272a <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1e5a      	subs	r2, r3, #1
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
}
 800273e:	4618      	mov	r0, r3
 8002740:	3714      	adds	r7, #20
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr

0800274a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800274a:	b580      	push	{r7, lr}
 800274c:	b08e      	sub	sp, #56	; 0x38
 800274e:	af04      	add	r7, sp, #16
 8002750:	60f8      	str	r0, [r7, #12]
 8002752:	60b9      	str	r1, [r7, #8]
 8002754:	607a      	str	r2, [r7, #4]
 8002756:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800275a:	2b00      	cmp	r3, #0
 800275c:	d10a      	bne.n	8002774 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800275e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002762:	f383 8811 	msr	BASEPRI, r3
 8002766:	f3bf 8f6f 	isb	sy
 800276a:	f3bf 8f4f 	dsb	sy
 800276e:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002770:	bf00      	nop
 8002772:	e7fe      	b.n	8002772 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10a      	bne.n	8002790 <xTaskCreateStatic+0x46>
	__asm volatile
 800277a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800277e:	f383 8811 	msr	BASEPRI, r3
 8002782:	f3bf 8f6f 	isb	sy
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	61fb      	str	r3, [r7, #28]
}
 800278c:	bf00      	nop
 800278e:	e7fe      	b.n	800278e <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002790:	2358      	movs	r3, #88	; 0x58
 8002792:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	2b58      	cmp	r3, #88	; 0x58
 8002798:	d00a      	beq.n	80027b0 <xTaskCreateStatic+0x66>
	__asm volatile
 800279a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800279e:	f383 8811 	msr	BASEPRI, r3
 80027a2:	f3bf 8f6f 	isb	sy
 80027a6:	f3bf 8f4f 	dsb	sy
 80027aa:	61bb      	str	r3, [r7, #24]
}
 80027ac:	bf00      	nop
 80027ae:	e7fe      	b.n	80027ae <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80027b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d01e      	beq.n	80027f6 <xTaskCreateStatic+0xac>
 80027b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d01b      	beq.n	80027f6 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80027be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027c0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027c6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ca:	2202      	movs	r2, #2
 80027cc:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80027d0:	2300      	movs	r3, #0
 80027d2:	9303      	str	r3, [sp, #12]
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	9302      	str	r3, [sp, #8]
 80027d8:	f107 0314 	add.w	r3, r7, #20
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68b9      	ldr	r1, [r7, #8]
 80027e8:	68f8      	ldr	r0, [r7, #12]
 80027ea:	f000 f850 	bl	800288e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80027ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80027f0:	f000 f8e0 	bl	80029b4 <prvAddNewTaskToReadyList>
 80027f4:	e001      	b.n	80027fa <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80027fa:	697b      	ldr	r3, [r7, #20]
	}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3728      	adds	r7, #40	; 0x28
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	; 0x30
 8002808:	af04      	add	r7, sp, #16
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f000 ff15 	bl	8003648 <pvPortMalloc>
 800281e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00e      	beq.n	8002844 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002826:	2058      	movs	r0, #88	; 0x58
 8002828:	f000 ff0e 	bl	8003648 <pvPortMalloc>
 800282c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d003      	beq.n	800283c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	697a      	ldr	r2, [r7, #20]
 8002838:	631a      	str	r2, [r3, #48]	; 0x30
 800283a:	e005      	b.n	8002848 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800283c:	6978      	ldr	r0, [r7, #20]
 800283e:	f000 ffd3 	bl	80037e8 <vPortFree>
 8002842:	e001      	b.n	8002848 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d017      	beq.n	800287e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800284e:	69fb      	ldr	r3, [r7, #28]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002856:	88fa      	ldrh	r2, [r7, #6]
 8002858:	2300      	movs	r3, #0
 800285a:	9303      	str	r3, [sp, #12]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	9302      	str	r3, [sp, #8]
 8002860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002862:	9301      	str	r3, [sp, #4]
 8002864:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002866:	9300      	str	r3, [sp, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	68b9      	ldr	r1, [r7, #8]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f80e 	bl	800288e <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002872:	69f8      	ldr	r0, [r7, #28]
 8002874:	f000 f89e 	bl	80029b4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002878:	2301      	movs	r3, #1
 800287a:	61bb      	str	r3, [r7, #24]
 800287c:	e002      	b.n	8002884 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800287e:	f04f 33ff 	mov.w	r3, #4294967295
 8002882:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002884:	69bb      	ldr	r3, [r7, #24]
	}
 8002886:	4618      	mov	r0, r3
 8002888:	3720      	adds	r7, #32
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b088      	sub	sp, #32
 8002892:	af00      	add	r7, sp, #0
 8002894:	60f8      	str	r0, [r7, #12]
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800289c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800289e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	461a      	mov	r2, r3
 80028a6:	21a5      	movs	r1, #165	; 0xa5
 80028a8:	f001 f8e0 	bl	8003a6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80028b6:	3b01      	subs	r3, #1
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	4413      	add	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028be:	69bb      	ldr	r3, [r7, #24]
 80028c0:	f023 0307 	bic.w	r3, r3, #7
 80028c4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	f003 0307 	and.w	r3, r3, #7
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <prvInitialiseNewTask+0x58>
	__asm volatile
 80028d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028d4:	f383 8811 	msr	BASEPRI, r3
 80028d8:	f3bf 8f6f 	isb	sy
 80028dc:	f3bf 8f4f 	dsb	sy
 80028e0:	617b      	str	r3, [r7, #20]
}
 80028e2:	bf00      	nop
 80028e4:	e7fe      	b.n	80028e4 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d01f      	beq.n	800292c <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028ec:	2300      	movs	r3, #0
 80028ee:	61fb      	str	r3, [r7, #28]
 80028f0:	e012      	b.n	8002918 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028f2:	68ba      	ldr	r2, [r7, #8]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	4413      	add	r3, r2
 80028f8:	7819      	ldrb	r1, [r3, #0]
 80028fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	4413      	add	r3, r2
 8002900:	3334      	adds	r3, #52	; 0x34
 8002902:	460a      	mov	r2, r1
 8002904:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	69fb      	ldr	r3, [r7, #28]
 800290a:	4413      	add	r3, r2
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d006      	beq.n	8002920 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	3301      	adds	r3, #1
 8002916:	61fb      	str	r3, [r7, #28]
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	2b0f      	cmp	r3, #15
 800291c:	d9e9      	bls.n	80028f2 <prvInitialiseNewTask+0x64>
 800291e:	e000      	b.n	8002922 <prvInitialiseNewTask+0x94>
			{
				break;
 8002920:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002924:	2200      	movs	r2, #0
 8002926:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800292a:	e003      	b.n	8002934 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800292c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800292e:	2200      	movs	r2, #0
 8002930:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002936:	2b06      	cmp	r3, #6
 8002938:	d901      	bls.n	800293e <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800293a:	2306      	movs	r3, #6
 800293c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800293e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002940:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002942:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002948:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800294a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800294c:	2200      	movs	r2, #0
 800294e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002952:	3304      	adds	r3, #4
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff fe64 	bl	8002622 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800295a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800295c:	3318      	adds	r3, #24
 800295e:	4618      	mov	r0, r3
 8002960:	f7ff fe5f 	bl	8002622 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002966:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002968:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800296a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800296c:	f1c3 0207 	rsb	r2, r3, #7
 8002970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002972:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002978:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2200      	movs	r2, #0
 800297e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002982:	2200      	movs	r2, #0
 8002984:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002988:	2200      	movs	r2, #0
 800298a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800298e:	683a      	ldr	r2, [r7, #0]
 8002990:	68f9      	ldr	r1, [r7, #12]
 8002992:	69b8      	ldr	r0, [r7, #24]
 8002994:	f000 fc4a 	bl	800322c <pxPortInitialiseStack>
 8002998:	4602      	mov	r2, r0
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800299e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d002      	beq.n	80029aa <prvInitialiseNewTask+0x11c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029a8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80029aa:	bf00      	nop
 80029ac:	3720      	adds	r7, #32
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}
	...

080029b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80029bc:	f000 fd62 	bl	8003484 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <prvAddNewTaskToReadyList+0xb8>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	3301      	adds	r3, #1
 80029c6:	4a29      	ldr	r2, [pc, #164]	; (8002a6c <prvAddNewTaskToReadyList+0xb8>)
 80029c8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80029ca:	4b29      	ldr	r3, [pc, #164]	; (8002a70 <prvAddNewTaskToReadyList+0xbc>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d109      	bne.n	80029e6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80029d2:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <prvAddNewTaskToReadyList+0xbc>)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029d8:	4b24      	ldr	r3, [pc, #144]	; (8002a6c <prvAddNewTaskToReadyList+0xb8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d110      	bne.n	8002a02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80029e0:	f000 fae2 	bl	8002fa8 <prvInitialiseTaskLists>
 80029e4:	e00d      	b.n	8002a02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80029e6:	4b23      	ldr	r3, [pc, #140]	; (8002a74 <prvAddNewTaskToReadyList+0xc0>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d109      	bne.n	8002a02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <prvAddNewTaskToReadyList+0xbc>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d802      	bhi.n	8002a02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80029fc:	4a1c      	ldr	r2, [pc, #112]	; (8002a70 <prvAddNewTaskToReadyList+0xbc>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002a02:	4b1d      	ldr	r3, [pc, #116]	; (8002a78 <prvAddNewTaskToReadyList+0xc4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	4a1b      	ldr	r2, [pc, #108]	; (8002a78 <prvAddNewTaskToReadyList+0xc4>)
 8002a0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a10:	2201      	movs	r2, #1
 8002a12:	409a      	lsls	r2, r3
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <prvAddNewTaskToReadyList+0xc8>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	4a18      	ldr	r2, [pc, #96]	; (8002a7c <prvAddNewTaskToReadyList+0xc8>)
 8002a1c:	6013      	str	r3, [r2, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a22:	4613      	mov	r3, r2
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	4a15      	ldr	r2, [pc, #84]	; (8002a80 <prvAddNewTaskToReadyList+0xcc>)
 8002a2c:	441a      	add	r2, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	3304      	adds	r3, #4
 8002a32:	4619      	mov	r1, r3
 8002a34:	4610      	mov	r0, r2
 8002a36:	f7ff fe01 	bl	800263c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002a3a:	f000 fd53 	bl	80034e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002a3e:	4b0d      	ldr	r3, [pc, #52]	; (8002a74 <prvAddNewTaskToReadyList+0xc0>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002a46:	4b0a      	ldr	r3, [pc, #40]	; (8002a70 <prvAddNewTaskToReadyList+0xbc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d207      	bcs.n	8002a64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002a54:	4b0b      	ldr	r3, [pc, #44]	; (8002a84 <prvAddNewTaskToReadyList+0xd0>)
 8002a56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	f3bf 8f4f 	dsb	sy
 8002a60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	20000420 	.word	0x20000420
 8002a70:	20000320 	.word	0x20000320
 8002a74:	2000042c 	.word	0x2000042c
 8002a78:	2000043c 	.word	0x2000043c
 8002a7c:	20000428 	.word	0x20000428
 8002a80:	20000324 	.word	0x20000324
 8002a84:	e000ed04 	.word	0xe000ed04

08002a88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d017      	beq.n	8002aca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002a9a:	4b13      	ldr	r3, [pc, #76]	; (8002ae8 <vTaskDelay+0x60>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d00a      	beq.n	8002ab8 <vTaskDelay+0x30>
	__asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	60bb      	str	r3, [r7, #8]
}
 8002ab4:	bf00      	nop
 8002ab6:	e7fe      	b.n	8002ab6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002ab8:	f000 f87a 	bl	8002bb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002abc:	2100      	movs	r1, #0
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 fb4e 	bl	8003160 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002ac4:	f000 f882 	bl	8002bcc <xTaskResumeAll>
 8002ac8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d107      	bne.n	8002ae0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002ad0:	4b06      	ldr	r3, [pc, #24]	; (8002aec <vTaskDelay+0x64>)
 8002ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ad6:	601a      	str	r2, [r3, #0]
 8002ad8:	f3bf 8f4f 	dsb	sy
 8002adc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002ae0:	bf00      	nop
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000448 	.word	0x20000448
 8002aec:	e000ed04 	.word	0xe000ed04

08002af0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b08a      	sub	sp, #40	; 0x28
 8002af4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002afe:	463a      	mov	r2, r7
 8002b00:	1d39      	adds	r1, r7, #4
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	4618      	mov	r0, r3
 8002b08:	f7fd fd0e 	bl	8000528 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002b0c:	6839      	ldr	r1, [r7, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	9202      	str	r2, [sp, #8]
 8002b14:	9301      	str	r3, [sp, #4]
 8002b16:	2300      	movs	r3, #0
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	460a      	mov	r2, r1
 8002b1e:	491e      	ldr	r1, [pc, #120]	; (8002b98 <vTaskStartScheduler+0xa8>)
 8002b20:	481e      	ldr	r0, [pc, #120]	; (8002b9c <vTaskStartScheduler+0xac>)
 8002b22:	f7ff fe12 	bl	800274a <xTaskCreateStatic>
 8002b26:	4603      	mov	r3, r0
 8002b28:	4a1d      	ldr	r2, [pc, #116]	; (8002ba0 <vTaskStartScheduler+0xb0>)
 8002b2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ba0 <vTaskStartScheduler+0xb0>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002b34:	2301      	movs	r3, #1
 8002b36:	617b      	str	r3, [r7, #20]
 8002b38:	e001      	b.n	8002b3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d116      	bne.n	8002b72 <vTaskStartScheduler+0x82>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	613b      	str	r3, [r7, #16]
}
 8002b56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002b58:	4b12      	ldr	r3, [pc, #72]	; (8002ba4 <vTaskStartScheduler+0xb4>)
 8002b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8002b5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <vTaskStartScheduler+0xb8>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b66:	4b11      	ldr	r3, [pc, #68]	; (8002bac <vTaskStartScheduler+0xbc>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002b6c:	f000 fbe8 	bl	8003340 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002b70:	e00e      	b.n	8002b90 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b78:	d10a      	bne.n	8002b90 <vTaskStartScheduler+0xa0>
	__asm volatile
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	60fb      	str	r3, [r7, #12]
}
 8002b8c:	bf00      	nop
 8002b8e:	e7fe      	b.n	8002b8e <vTaskStartScheduler+0x9e>
}
 8002b90:	bf00      	nop
 8002b92:	3718      	adds	r7, #24
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	08003abc 	.word	0x08003abc
 8002b9c:	08002f75 	.word	0x08002f75
 8002ba0:	20000444 	.word	0x20000444
 8002ba4:	20000440 	.word	0x20000440
 8002ba8:	2000042c 	.word	0x2000042c
 8002bac:	20000424 	.word	0x20000424

08002bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002bb4:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <vTaskSuspendAll+0x18>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4a03      	ldr	r2, [pc, #12]	; (8002bc8 <vTaskSuspendAll+0x18>)
 8002bbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002bbe:	bf00      	nop
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr
 8002bc8:	20000448 	.word	0x20000448

08002bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002bda:	4b41      	ldr	r3, [pc, #260]	; (8002ce0 <xTaskResumeAll+0x114>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10a      	bne.n	8002bf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be6:	f383 8811 	msr	BASEPRI, r3
 8002bea:	f3bf 8f6f 	isb	sy
 8002bee:	f3bf 8f4f 	dsb	sy
 8002bf2:	603b      	str	r3, [r7, #0]
}
 8002bf4:	bf00      	nop
 8002bf6:	e7fe      	b.n	8002bf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002bf8:	f000 fc44 	bl	8003484 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002bfc:	4b38      	ldr	r3, [pc, #224]	; (8002ce0 <xTaskResumeAll+0x114>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	4a37      	ldr	r2, [pc, #220]	; (8002ce0 <xTaskResumeAll+0x114>)
 8002c04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c06:	4b36      	ldr	r3, [pc, #216]	; (8002ce0 <xTaskResumeAll+0x114>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d161      	bne.n	8002cd2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c0e:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <xTaskResumeAll+0x118>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d05d      	beq.n	8002cd2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c16:	e02e      	b.n	8002c76 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c18:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <xTaskResumeAll+0x11c>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	3318      	adds	r3, #24
 8002c24:	4618      	mov	r0, r3
 8002c26:	f7ff fd66 	bl	80026f6 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3304      	adds	r3, #4
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7ff fd61 	bl	80026f6 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	2201      	movs	r2, #1
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <xTaskResumeAll+0x120>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	4a2a      	ldr	r2, [pc, #168]	; (8002cec <xTaskResumeAll+0x120>)
 8002c44:	6013      	str	r3, [r2, #0]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <xTaskResumeAll+0x124>)
 8002c54:	441a      	add	r2, r3
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	f7ff fced 	bl	800263c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c66:	4b23      	ldr	r3, [pc, #140]	; (8002cf4 <xTaskResumeAll+0x128>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d302      	bcc.n	8002c76 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002c70:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <xTaskResumeAll+0x12c>)
 8002c72:	2201      	movs	r2, #1
 8002c74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c76:	4b1c      	ldr	r3, [pc, #112]	; (8002ce8 <xTaskResumeAll+0x11c>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1cc      	bne.n	8002c18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002c84:	f000 fa2e 	bl	80030e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002c88:	4b1c      	ldr	r3, [pc, #112]	; (8002cfc <xTaskResumeAll+0x130>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d010      	beq.n	8002cb6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002c94:	f000 f836 	bl	8002d04 <xTaskIncrementTick>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d002      	beq.n	8002ca4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <xTaskResumeAll+0x12c>)
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3b01      	subs	r3, #1
 8002ca8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d1f1      	bne.n	8002c94 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002cb0:	4b12      	ldr	r3, [pc, #72]	; (8002cfc <xTaskResumeAll+0x130>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <xTaskResumeAll+0x12c>)
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d009      	beq.n	8002cd2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002cc2:	4b0f      	ldr	r3, [pc, #60]	; (8002d00 <xTaskResumeAll+0x134>)
 8002cc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cc8:	601a      	str	r2, [r3, #0]
 8002cca:	f3bf 8f4f 	dsb	sy
 8002cce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002cd2:	f000 fc07 	bl	80034e4 <vPortExitCritical>

	return xAlreadyYielded;
 8002cd6:	68bb      	ldr	r3, [r7, #8]
}
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	20000448 	.word	0x20000448
 8002ce4:	20000420 	.word	0x20000420
 8002ce8:	200003e0 	.word	0x200003e0
 8002cec:	20000428 	.word	0x20000428
 8002cf0:	20000324 	.word	0x20000324
 8002cf4:	20000320 	.word	0x20000320
 8002cf8:	20000434 	.word	0x20000434
 8002cfc:	20000430 	.word	0x20000430
 8002d00:	e000ed04 	.word	0xe000ed04

08002d04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d0e:	4b4e      	ldr	r3, [pc, #312]	; (8002e48 <xTaskIncrementTick+0x144>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	f040 808e 	bne.w	8002e34 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002d18:	4b4c      	ldr	r3, [pc, #304]	; (8002e4c <xTaskIncrementTick+0x148>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002d20:	4a4a      	ldr	r2, [pc, #296]	; (8002e4c <xTaskIncrementTick+0x148>)
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d120      	bne.n	8002d6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002d2c:	4b48      	ldr	r3, [pc, #288]	; (8002e50 <xTaskIncrementTick+0x14c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <xTaskIncrementTick+0x48>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	603b      	str	r3, [r7, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <xTaskIncrementTick+0x46>
 8002d4c:	4b40      	ldr	r3, [pc, #256]	; (8002e50 <xTaskIncrementTick+0x14c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	60fb      	str	r3, [r7, #12]
 8002d52:	4b40      	ldr	r3, [pc, #256]	; (8002e54 <xTaskIncrementTick+0x150>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a3e      	ldr	r2, [pc, #248]	; (8002e50 <xTaskIncrementTick+0x14c>)
 8002d58:	6013      	str	r3, [r2, #0]
 8002d5a:	4a3e      	ldr	r2, [pc, #248]	; (8002e54 <xTaskIncrementTick+0x150>)
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6013      	str	r3, [r2, #0]
 8002d60:	4b3d      	ldr	r3, [pc, #244]	; (8002e58 <xTaskIncrementTick+0x154>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	3301      	adds	r3, #1
 8002d66:	4a3c      	ldr	r2, [pc, #240]	; (8002e58 <xTaskIncrementTick+0x154>)
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	f000 f9bb 	bl	80030e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002d6e:	4b3b      	ldr	r3, [pc, #236]	; (8002e5c <xTaskIncrementTick+0x158>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	429a      	cmp	r2, r3
 8002d76:	d348      	bcc.n	8002e0a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d78:	4b35      	ldr	r3, [pc, #212]	; (8002e50 <xTaskIncrementTick+0x14c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d104      	bne.n	8002d8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d82:	4b36      	ldr	r3, [pc, #216]	; (8002e5c <xTaskIncrementTick+0x158>)
 8002d84:	f04f 32ff 	mov.w	r2, #4294967295
 8002d88:	601a      	str	r2, [r3, #0]
					break;
 8002d8a:	e03e      	b.n	8002e0a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d8c:	4b30      	ldr	r3, [pc, #192]	; (8002e50 <xTaskIncrementTick+0x14c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d203      	bcs.n	8002dac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002da4:	4a2d      	ldr	r2, [pc, #180]	; (8002e5c <xTaskIncrementTick+0x158>)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002daa:	e02e      	b.n	8002e0a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7ff fca0 	bl	80026f6 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002db6:	68bb      	ldr	r3, [r7, #8]
 8002db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d004      	beq.n	8002dc8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	3318      	adds	r3, #24
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7ff fc97 	bl	80026f6 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dcc:	2201      	movs	r2, #1
 8002dce:	409a      	lsls	r2, r3
 8002dd0:	4b23      	ldr	r3, [pc, #140]	; (8002e60 <xTaskIncrementTick+0x15c>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <xTaskIncrementTick+0x15c>)
 8002dd8:	6013      	str	r3, [r2, #0]
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4a1f      	ldr	r2, [pc, #124]	; (8002e64 <xTaskIncrementTick+0x160>)
 8002de8:	441a      	add	r2, r3
 8002dea:	68bb      	ldr	r3, [r7, #8]
 8002dec:	3304      	adds	r3, #4
 8002dee:	4619      	mov	r1, r3
 8002df0:	4610      	mov	r0, r2
 8002df2:	f7ff fc23 	bl	800263c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dfa:	4b1b      	ldr	r3, [pc, #108]	; (8002e68 <xTaskIncrementTick+0x164>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d3b9      	bcc.n	8002d78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e08:	e7b6      	b.n	8002d78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002e0a:	4b17      	ldr	r3, [pc, #92]	; (8002e68 <xTaskIncrementTick+0x164>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e10:	4914      	ldr	r1, [pc, #80]	; (8002e64 <xTaskIncrementTick+0x160>)
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	009b      	lsls	r3, r3, #2
 8002e1a:	440b      	add	r3, r1
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d901      	bls.n	8002e26 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002e22:	2301      	movs	r3, #1
 8002e24:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002e26:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <xTaskIncrementTick+0x168>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d007      	beq.n	8002e3e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e004      	b.n	8002e3e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002e34:	4b0e      	ldr	r3, [pc, #56]	; (8002e70 <xTaskIncrementTick+0x16c>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	4a0d      	ldr	r2, [pc, #52]	; (8002e70 <xTaskIncrementTick+0x16c>)
 8002e3c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002e3e:	697b      	ldr	r3, [r7, #20]
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	3718      	adds	r7, #24
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	20000448 	.word	0x20000448
 8002e4c:	20000424 	.word	0x20000424
 8002e50:	200003d8 	.word	0x200003d8
 8002e54:	200003dc 	.word	0x200003dc
 8002e58:	20000438 	.word	0x20000438
 8002e5c:	20000440 	.word	0x20000440
 8002e60:	20000428 	.word	0x20000428
 8002e64:	20000324 	.word	0x20000324
 8002e68:	20000320 	.word	0x20000320
 8002e6c:	20000434 	.word	0x20000434
 8002e70:	20000430 	.word	0x20000430

08002e74 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b088      	sub	sp, #32
 8002e78:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002e7a:	4b39      	ldr	r3, [pc, #228]	; (8002f60 <vTaskSwitchContext+0xec>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d003      	beq.n	8002e8a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002e82:	4b38      	ldr	r3, [pc, #224]	; (8002f64 <vTaskSwitchContext+0xf0>)
 8002e84:	2201      	movs	r2, #1
 8002e86:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002e88:	e066      	b.n	8002f58 <vTaskSwitchContext+0xe4>
		xYieldPending = pdFALSE;
 8002e8a:	4b36      	ldr	r3, [pc, #216]	; (8002f64 <vTaskSwitchContext+0xf0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8002e90:	4b35      	ldr	r3, [pc, #212]	; (8002f68 <vTaskSwitchContext+0xf4>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	69fb      	ldr	r3, [r7, #28]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d111      	bne.n	8002ecc <vTaskSwitchContext+0x58>
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	3304      	adds	r3, #4
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d10b      	bne.n	8002ecc <vTaskSwitchContext+0x58>
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	3308      	adds	r3, #8
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d105      	bne.n	8002ecc <vTaskSwitchContext+0x58>
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	330c      	adds	r3, #12
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d008      	beq.n	8002ede <vTaskSwitchContext+0x6a>
 8002ecc:	4b26      	ldr	r3, [pc, #152]	; (8002f68 <vTaskSwitchContext+0xf4>)
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	4b25      	ldr	r3, [pc, #148]	; (8002f68 <vTaskSwitchContext+0xf4>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	3334      	adds	r3, #52	; 0x34
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f7fd fb12 	bl	8000502 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ede:	4b23      	ldr	r3, [pc, #140]	; (8002f6c <vTaskSwitchContext+0xf8>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	fab3 f383 	clz	r3, r3
 8002eea:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002eec:	7afb      	ldrb	r3, [r7, #11]
 8002eee:	f1c3 031f 	rsb	r3, r3, #31
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	491e      	ldr	r1, [pc, #120]	; (8002f70 <vTaskSwitchContext+0xfc>)
 8002ef6:	697a      	ldr	r2, [r7, #20]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	440b      	add	r3, r1
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d10a      	bne.n	8002f1e <vTaskSwitchContext+0xaa>
	__asm volatile
 8002f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0c:	f383 8811 	msr	BASEPRI, r3
 8002f10:	f3bf 8f6f 	isb	sy
 8002f14:	f3bf 8f4f 	dsb	sy
 8002f18:	607b      	str	r3, [r7, #4]
}
 8002f1a:	bf00      	nop
 8002f1c:	e7fe      	b.n	8002f1c <vTaskSwitchContext+0xa8>
 8002f1e:	697a      	ldr	r2, [r7, #20]
 8002f20:	4613      	mov	r3, r2
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	4413      	add	r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	4a11      	ldr	r2, [pc, #68]	; (8002f70 <vTaskSwitchContext+0xfc>)
 8002f2a:	4413      	add	r3, r2
 8002f2c:	613b      	str	r3, [r7, #16]
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	693b      	ldr	r3, [r7, #16]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	693b      	ldr	r3, [r7, #16]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	429a      	cmp	r2, r3
 8002f42:	d104      	bne.n	8002f4e <vTaskSwitchContext+0xda>
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	605a      	str	r2, [r3, #4]
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <vTaskSwitchContext+0xf4>)
 8002f56:	6013      	str	r3, [r2, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	3720      	adds	r7, #32
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	20000448 	.word	0x20000448
 8002f64:	20000434 	.word	0x20000434
 8002f68:	20000320 	.word	0x20000320
 8002f6c:	20000428 	.word	0x20000428
 8002f70:	20000324 	.word	0x20000324

08002f74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002f7c:	f000 f854 	bl	8003028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002f80:	4b07      	ldr	r3, [pc, #28]	; (8002fa0 <prvIdleTask+0x2c>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d907      	bls.n	8002f98 <prvIdleTask+0x24>
			{
				taskYIELD();
 8002f88:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <prvIdleTask+0x30>)
 8002f8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	f3bf 8f4f 	dsb	sy
 8002f94:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8002f98:	f7fd faac 	bl	80004f4 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8002f9c:	e7ee      	b.n	8002f7c <prvIdleTask+0x8>
 8002f9e:	bf00      	nop
 8002fa0:	20000324 	.word	0x20000324
 8002fa4:	e000ed04 	.word	0xe000ed04

08002fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b082      	sub	sp, #8
 8002fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fae:	2300      	movs	r3, #0
 8002fb0:	607b      	str	r3, [r7, #4]
 8002fb2:	e00c      	b.n	8002fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4a12      	ldr	r2, [pc, #72]	; (8003008 <prvInitialiseTaskLists+0x60>)
 8002fc0:	4413      	add	r3, r2
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f7ff fb0d 	bl	80025e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	607b      	str	r3, [r7, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b06      	cmp	r3, #6
 8002fd2:	d9ef      	bls.n	8002fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002fd4:	480d      	ldr	r0, [pc, #52]	; (800300c <prvInitialiseTaskLists+0x64>)
 8002fd6:	f7ff fb04 	bl	80025e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8002fda:	480d      	ldr	r0, [pc, #52]	; (8003010 <prvInitialiseTaskLists+0x68>)
 8002fdc:	f7ff fb01 	bl	80025e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002fe0:	480c      	ldr	r0, [pc, #48]	; (8003014 <prvInitialiseTaskLists+0x6c>)
 8002fe2:	f7ff fafe 	bl	80025e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8002fe6:	480c      	ldr	r0, [pc, #48]	; (8003018 <prvInitialiseTaskLists+0x70>)
 8002fe8:	f7ff fafb 	bl	80025e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002fec:	480b      	ldr	r0, [pc, #44]	; (800301c <prvInitialiseTaskLists+0x74>)
 8002fee:	f7ff faf8 	bl	80025e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002ff2:	4b0b      	ldr	r3, [pc, #44]	; (8003020 <prvInitialiseTaskLists+0x78>)
 8002ff4:	4a05      	ldr	r2, [pc, #20]	; (800300c <prvInitialiseTaskLists+0x64>)
 8002ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002ff8:	4b0a      	ldr	r3, [pc, #40]	; (8003024 <prvInitialiseTaskLists+0x7c>)
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <prvInitialiseTaskLists+0x68>)
 8002ffc:	601a      	str	r2, [r3, #0]
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	20000324 	.word	0x20000324
 800300c:	200003b0 	.word	0x200003b0
 8003010:	200003c4 	.word	0x200003c4
 8003014:	200003e0 	.word	0x200003e0
 8003018:	200003f4 	.word	0x200003f4
 800301c:	2000040c 	.word	0x2000040c
 8003020:	200003d8 	.word	0x200003d8
 8003024:	200003dc 	.word	0x200003dc

08003028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800302e:	e019      	b.n	8003064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003030:	f000 fa28 	bl	8003484 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003034:	4b10      	ldr	r3, [pc, #64]	; (8003078 <prvCheckTasksWaitingTermination+0x50>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	3304      	adds	r3, #4
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff fb58 	bl	80026f6 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003046:	4b0d      	ldr	r3, [pc, #52]	; (800307c <prvCheckTasksWaitingTermination+0x54>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	4a0b      	ldr	r2, [pc, #44]	; (800307c <prvCheckTasksWaitingTermination+0x54>)
 800304e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <prvCheckTasksWaitingTermination+0x58>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	3b01      	subs	r3, #1
 8003056:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <prvCheckTasksWaitingTermination+0x58>)
 8003058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800305a:	f000 fa43 	bl	80034e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f810 	bl	8003084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003064:	4b06      	ldr	r3, [pc, #24]	; (8003080 <prvCheckTasksWaitingTermination+0x58>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1e1      	bne.n	8003030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	200003f4 	.word	0x200003f4
 800307c:	20000420 	.word	0x20000420
 8003080:	20000408 	.word	0x20000408

08003084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003084:	b580      	push	{r7, lr}
 8003086:	b084      	sub	sp, #16
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003092:	2b00      	cmp	r3, #0
 8003094:	d108      	bne.n	80030a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	4618      	mov	r0, r3
 800309c:	f000 fba4 	bl	80037e8 <vPortFree>
				vPortFree( pxTCB );
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 fba1 	bl	80037e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80030a6:	e018      	b.n	80030da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030ae:	2b01      	cmp	r3, #1
 80030b0:	d103      	bne.n	80030ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80030b2:	6878      	ldr	r0, [r7, #4]
 80030b4:	f000 fb98 	bl	80037e8 <vPortFree>
	}
 80030b8:	e00f      	b.n	80030da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d00a      	beq.n	80030da <prvDeleteTCB+0x56>
	__asm volatile
 80030c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c8:	f383 8811 	msr	BASEPRI, r3
 80030cc:	f3bf 8f6f 	isb	sy
 80030d0:	f3bf 8f4f 	dsb	sy
 80030d4:	60fb      	str	r3, [r7, #12]
}
 80030d6:	bf00      	nop
 80030d8:	e7fe      	b.n	80030d8 <prvDeleteTCB+0x54>
	}
 80030da:	bf00      	nop
 80030dc:	3710      	adds	r7, #16
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
	...

080030e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80030ea:	4b0c      	ldr	r3, [pc, #48]	; (800311c <prvResetNextTaskUnblockTime+0x38>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d104      	bne.n	80030fe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80030f4:	4b0a      	ldr	r3, [pc, #40]	; (8003120 <prvResetNextTaskUnblockTime+0x3c>)
 80030f6:	f04f 32ff 	mov.w	r2, #4294967295
 80030fa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80030fc:	e008      	b.n	8003110 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030fe:	4b07      	ldr	r3, [pc, #28]	; (800311c <prvResetNextTaskUnblockTime+0x38>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <prvResetNextTaskUnblockTime+0x3c>)
 800310e:	6013      	str	r3, [r2, #0]
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr
 800311c:	200003d8 	.word	0x200003d8
 8003120:	20000440 	.word	0x20000440

08003124 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800312a:	4b0b      	ldr	r3, [pc, #44]	; (8003158 <xTaskGetSchedulerState+0x34>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d102      	bne.n	8003138 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003132:	2301      	movs	r3, #1
 8003134:	607b      	str	r3, [r7, #4]
 8003136:	e008      	b.n	800314a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003138:	4b08      	ldr	r3, [pc, #32]	; (800315c <xTaskGetSchedulerState+0x38>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003140:	2302      	movs	r3, #2
 8003142:	607b      	str	r3, [r7, #4]
 8003144:	e001      	b.n	800314a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003146:	2300      	movs	r3, #0
 8003148:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800314a:	687b      	ldr	r3, [r7, #4]
	}
 800314c:	4618      	mov	r0, r3
 800314e:	370c      	adds	r7, #12
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr
 8003158:	2000042c 	.word	0x2000042c
 800315c:	20000448 	.word	0x20000448

08003160 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
 8003168:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800316a:	4b29      	ldr	r3, [pc, #164]	; (8003210 <prvAddCurrentTaskToDelayedList+0xb0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003170:	4b28      	ldr	r3, [pc, #160]	; (8003214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	3304      	adds	r3, #4
 8003176:	4618      	mov	r0, r3
 8003178:	f7ff fabd 	bl	80026f6 <uxListRemove>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003182:	4b24      	ldr	r3, [pc, #144]	; (8003214 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	2201      	movs	r2, #1
 800318a:	fa02 f303 	lsl.w	r3, r2, r3
 800318e:	43da      	mvns	r2, r3
 8003190:	4b21      	ldr	r3, [pc, #132]	; (8003218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4013      	ands	r3, r2
 8003196:	4a20      	ldr	r2, [pc, #128]	; (8003218 <prvAddCurrentTaskToDelayedList+0xb8>)
 8003198:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031a0:	d10a      	bne.n	80031b8 <prvAddCurrentTaskToDelayedList+0x58>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d007      	beq.n	80031b8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031a8:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	3304      	adds	r3, #4
 80031ae:	4619      	mov	r1, r3
 80031b0:	481a      	ldr	r0, [pc, #104]	; (800321c <prvAddCurrentTaskToDelayedList+0xbc>)
 80031b2:	f7ff fa43 	bl	800263c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80031b6:	e026      	b.n	8003206 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80031c0:	4b14      	ldr	r3, [pc, #80]	; (8003214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68ba      	ldr	r2, [r7, #8]
 80031c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d209      	bcs.n	80031e4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031d0:	4b13      	ldr	r3, [pc, #76]	; (8003220 <prvAddCurrentTaskToDelayedList+0xc0>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	4b0f      	ldr	r3, [pc, #60]	; (8003214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3304      	adds	r3, #4
 80031da:	4619      	mov	r1, r3
 80031dc:	4610      	mov	r0, r2
 80031de:	f7ff fa51 	bl	8002684 <vListInsert>
}
 80031e2:	e010      	b.n	8003206 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <prvAddCurrentTaskToDelayedList+0xc4>)
 80031e6:	681a      	ldr	r2, [r3, #0]
 80031e8:	4b0a      	ldr	r3, [pc, #40]	; (8003214 <prvAddCurrentTaskToDelayedList+0xb4>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	3304      	adds	r3, #4
 80031ee:	4619      	mov	r1, r3
 80031f0:	4610      	mov	r0, r2
 80031f2:	f7ff fa47 	bl	8002684 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80031f6:	4b0c      	ldr	r3, [pc, #48]	; (8003228 <prvAddCurrentTaskToDelayedList+0xc8>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68ba      	ldr	r2, [r7, #8]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d202      	bcs.n	8003206 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003200:	4a09      	ldr	r2, [pc, #36]	; (8003228 <prvAddCurrentTaskToDelayedList+0xc8>)
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	6013      	str	r3, [r2, #0]
}
 8003206:	bf00      	nop
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	20000424 	.word	0x20000424
 8003214:	20000320 	.word	0x20000320
 8003218:	20000428 	.word	0x20000428
 800321c:	2000040c 	.word	0x2000040c
 8003220:	200003dc 	.word	0x200003dc
 8003224:	200003d8 	.word	0x200003d8
 8003228:	20000440 	.word	0x20000440

0800322c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	3b04      	subs	r3, #4
 800323c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003244:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	3b04      	subs	r3, #4
 800324a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f023 0201 	bic.w	r2, r3, #1
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	3b04      	subs	r3, #4
 800325a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800325c:	4a0c      	ldr	r2, [pc, #48]	; (8003290 <pxPortInitialiseStack+0x64>)
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3b14      	subs	r3, #20
 8003266:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	3b04      	subs	r3, #4
 8003272:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f06f 0202 	mvn.w	r2, #2
 800327a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	3b20      	subs	r3, #32
 8003280:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003282:	68fb      	ldr	r3, [r7, #12]
}
 8003284:	4618      	mov	r0, r3
 8003286:	3714      	adds	r7, #20
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	08003295 	.word	0x08003295

08003294 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003294:	b480      	push	{r7}
 8003296:	b085      	sub	sp, #20
 8003298:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800329a:	2300      	movs	r3, #0
 800329c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800329e:	4b12      	ldr	r3, [pc, #72]	; (80032e8 <prvTaskExitError+0x54>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a6:	d00a      	beq.n	80032be <prvTaskExitError+0x2a>
	__asm volatile
 80032a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032ac:	f383 8811 	msr	BASEPRI, r3
 80032b0:	f3bf 8f6f 	isb	sy
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	60fb      	str	r3, [r7, #12]
}
 80032ba:	bf00      	nop
 80032bc:	e7fe      	b.n	80032bc <prvTaskExitError+0x28>
	__asm volatile
 80032be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032c2:	f383 8811 	msr	BASEPRI, r3
 80032c6:	f3bf 8f6f 	isb	sy
 80032ca:	f3bf 8f4f 	dsb	sy
 80032ce:	60bb      	str	r3, [r7, #8]
}
 80032d0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80032d2:	bf00      	nop
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0fc      	beq.n	80032d4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000010 	.word	0x20000010
 80032ec:	00000000 	.word	0x00000000

080032f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80032f0:	4b07      	ldr	r3, [pc, #28]	; (8003310 <pxCurrentTCBConst2>)
 80032f2:	6819      	ldr	r1, [r3, #0]
 80032f4:	6808      	ldr	r0, [r1, #0]
 80032f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032fa:	f380 8809 	msr	PSP, r0
 80032fe:	f3bf 8f6f 	isb	sy
 8003302:	f04f 0000 	mov.w	r0, #0
 8003306:	f380 8811 	msr	BASEPRI, r0
 800330a:	4770      	bx	lr
 800330c:	f3af 8000 	nop.w

08003310 <pxCurrentTCBConst2>:
 8003310:	20000320 	.word	0x20000320
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003314:	bf00      	nop
 8003316:	bf00      	nop

08003318 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003318:	4808      	ldr	r0, [pc, #32]	; (800333c <prvPortStartFirstTask+0x24>)
 800331a:	6800      	ldr	r0, [r0, #0]
 800331c:	6800      	ldr	r0, [r0, #0]
 800331e:	f380 8808 	msr	MSP, r0
 8003322:	f04f 0000 	mov.w	r0, #0
 8003326:	f380 8814 	msr	CONTROL, r0
 800332a:	b662      	cpsie	i
 800332c:	b661      	cpsie	f
 800332e:	f3bf 8f4f 	dsb	sy
 8003332:	f3bf 8f6f 	isb	sy
 8003336:	df00      	svc	0
 8003338:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800333a:	bf00      	nop
 800333c:	e000ed08 	.word	0xe000ed08

08003340 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003346:	4b46      	ldr	r3, [pc, #280]	; (8003460 <xPortStartScheduler+0x120>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a46      	ldr	r2, [pc, #280]	; (8003464 <xPortStartScheduler+0x124>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d10a      	bne.n	8003366 <xPortStartScheduler+0x26>
	__asm volatile
 8003350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003354:	f383 8811 	msr	BASEPRI, r3
 8003358:	f3bf 8f6f 	isb	sy
 800335c:	f3bf 8f4f 	dsb	sy
 8003360:	613b      	str	r3, [r7, #16]
}
 8003362:	bf00      	nop
 8003364:	e7fe      	b.n	8003364 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003366:	4b3e      	ldr	r3, [pc, #248]	; (8003460 <xPortStartScheduler+0x120>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a3f      	ldr	r2, [pc, #252]	; (8003468 <xPortStartScheduler+0x128>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d10a      	bne.n	8003386 <xPortStartScheduler+0x46>
	__asm volatile
 8003370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003374:	f383 8811 	msr	BASEPRI, r3
 8003378:	f3bf 8f6f 	isb	sy
 800337c:	f3bf 8f4f 	dsb	sy
 8003380:	60fb      	str	r3, [r7, #12]
}
 8003382:	bf00      	nop
 8003384:	e7fe      	b.n	8003384 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003386:	4b39      	ldr	r3, [pc, #228]	; (800346c <xPortStartScheduler+0x12c>)
 8003388:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	b2db      	uxtb	r3, r3
 8003390:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003392:	697b      	ldr	r3, [r7, #20]
 8003394:	22ff      	movs	r2, #255	; 0xff
 8003396:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80033a0:	78fb      	ldrb	r3, [r7, #3]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80033a8:	b2da      	uxtb	r2, r3
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <xPortStartScheduler+0x130>)
 80033ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80033ae:	4b31      	ldr	r3, [pc, #196]	; (8003474 <xPortStartScheduler+0x134>)
 80033b0:	2207      	movs	r2, #7
 80033b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033b4:	e009      	b.n	80033ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80033b6:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <xPortStartScheduler+0x134>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <xPortStartScheduler+0x134>)
 80033be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	005b      	lsls	r3, r3, #1
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	2b80      	cmp	r3, #128	; 0x80
 80033d4:	d0ef      	beq.n	80033b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80033d6:	4b27      	ldr	r3, [pc, #156]	; (8003474 <xPortStartScheduler+0x134>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f1c3 0307 	rsb	r3, r3, #7
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d00a      	beq.n	80033f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80033e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e6:	f383 8811 	msr	BASEPRI, r3
 80033ea:	f3bf 8f6f 	isb	sy
 80033ee:	f3bf 8f4f 	dsb	sy
 80033f2:	60bb      	str	r3, [r7, #8]
}
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80033f8:	4b1e      	ldr	r3, [pc, #120]	; (8003474 <xPortStartScheduler+0x134>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	021b      	lsls	r3, r3, #8
 80033fe:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <xPortStartScheduler+0x134>)
 8003400:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <xPortStartScheduler+0x134>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800340a:	4a1a      	ldr	r2, [pc, #104]	; (8003474 <xPortStartScheduler+0x134>)
 800340c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	b2da      	uxtb	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003416:	4b18      	ldr	r3, [pc, #96]	; (8003478 <xPortStartScheduler+0x138>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a17      	ldr	r2, [pc, #92]	; (8003478 <xPortStartScheduler+0x138>)
 800341c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003420:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003422:	4b15      	ldr	r3, [pc, #84]	; (8003478 <xPortStartScheduler+0x138>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a14      	ldr	r2, [pc, #80]	; (8003478 <xPortStartScheduler+0x138>)
 8003428:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800342c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800342e:	f000 f8dd 	bl	80035ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003432:	4b12      	ldr	r3, [pc, #72]	; (800347c <xPortStartScheduler+0x13c>)
 8003434:	2200      	movs	r2, #0
 8003436:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003438:	f000 f8fc 	bl	8003634 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800343c:	4b10      	ldr	r3, [pc, #64]	; (8003480 <xPortStartScheduler+0x140>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	4a0f      	ldr	r2, [pc, #60]	; (8003480 <xPortStartScheduler+0x140>)
 8003442:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003446:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003448:	f7ff ff66 	bl	8003318 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800344c:	f7ff fd12 	bl	8002e74 <vTaskSwitchContext>
	prvTaskExitError();
 8003450:	f7ff ff20 	bl	8003294 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	e000ed00 	.word	0xe000ed00
 8003464:	410fc271 	.word	0x410fc271
 8003468:	410fc270 	.word	0x410fc270
 800346c:	e000e400 	.word	0xe000e400
 8003470:	2000044c 	.word	0x2000044c
 8003474:	20000450 	.word	0x20000450
 8003478:	e000ed20 	.word	0xe000ed20
 800347c:	20000010 	.word	0x20000010
 8003480:	e000ef34 	.word	0xe000ef34

08003484 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
	__asm volatile
 800348a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800348e:	f383 8811 	msr	BASEPRI, r3
 8003492:	f3bf 8f6f 	isb	sy
 8003496:	f3bf 8f4f 	dsb	sy
 800349a:	607b      	str	r3, [r7, #4]
}
 800349c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800349e:	4b0f      	ldr	r3, [pc, #60]	; (80034dc <vPortEnterCritical+0x58>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	3301      	adds	r3, #1
 80034a4:	4a0d      	ldr	r2, [pc, #52]	; (80034dc <vPortEnterCritical+0x58>)
 80034a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80034a8:	4b0c      	ldr	r3, [pc, #48]	; (80034dc <vPortEnterCritical+0x58>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d10f      	bne.n	80034d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80034b0:	4b0b      	ldr	r3, [pc, #44]	; (80034e0 <vPortEnterCritical+0x5c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00a      	beq.n	80034d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80034ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034be:	f383 8811 	msr	BASEPRI, r3
 80034c2:	f3bf 8f6f 	isb	sy
 80034c6:	f3bf 8f4f 	dsb	sy
 80034ca:	603b      	str	r3, [r7, #0]
}
 80034cc:	bf00      	nop
 80034ce:	e7fe      	b.n	80034ce <vPortEnterCritical+0x4a>
	}
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034da:	4770      	bx	lr
 80034dc:	20000010 	.word	0x20000010
 80034e0:	e000ed04 	.word	0xe000ed04

080034e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80034ea:	4b12      	ldr	r3, [pc, #72]	; (8003534 <vPortExitCritical+0x50>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d10a      	bne.n	8003508 <vPortExitCritical+0x24>
	__asm volatile
 80034f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034f6:	f383 8811 	msr	BASEPRI, r3
 80034fa:	f3bf 8f6f 	isb	sy
 80034fe:	f3bf 8f4f 	dsb	sy
 8003502:	607b      	str	r3, [r7, #4]
}
 8003504:	bf00      	nop
 8003506:	e7fe      	b.n	8003506 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003508:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <vPortExitCritical+0x50>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3b01      	subs	r3, #1
 800350e:	4a09      	ldr	r2, [pc, #36]	; (8003534 <vPortExitCritical+0x50>)
 8003510:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003512:	4b08      	ldr	r3, [pc, #32]	; (8003534 <vPortExitCritical+0x50>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d105      	bne.n	8003526 <vPortExitCritical+0x42>
 800351a:	2300      	movs	r3, #0
 800351c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003524:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr
 8003532:	bf00      	nop
 8003534:	20000010 	.word	0x20000010
	...

08003540 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003540:	f3ef 8009 	mrs	r0, PSP
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	4b15      	ldr	r3, [pc, #84]	; (80035a0 <pxCurrentTCBConst>)
 800354a:	681a      	ldr	r2, [r3, #0]
 800354c:	f01e 0f10 	tst.w	lr, #16
 8003550:	bf08      	it	eq
 8003552:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003556:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800355a:	6010      	str	r0, [r2, #0]
 800355c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003560:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003564:	f380 8811 	msr	BASEPRI, r0
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	f7ff fc80 	bl	8002e74 <vTaskSwitchContext>
 8003574:	f04f 0000 	mov.w	r0, #0
 8003578:	f380 8811 	msr	BASEPRI, r0
 800357c:	bc09      	pop	{r0, r3}
 800357e:	6819      	ldr	r1, [r3, #0]
 8003580:	6808      	ldr	r0, [r1, #0]
 8003582:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003586:	f01e 0f10 	tst.w	lr, #16
 800358a:	bf08      	it	eq
 800358c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8003590:	f380 8809 	msr	PSP, r0
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	f3af 8000 	nop.w

080035a0 <pxCurrentTCBConst>:
 80035a0:	20000320 	.word	0x20000320
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop

080035a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
	__asm volatile
 80035ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b2:	f383 8811 	msr	BASEPRI, r3
 80035b6:	f3bf 8f6f 	isb	sy
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	607b      	str	r3, [r7, #4]
}
 80035c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80035c2:	f7ff fb9f 	bl	8002d04 <xTaskIncrementTick>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80035cc:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <xPortSysTickHandler+0x40>)
 80035ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035d2:	601a      	str	r2, [r3, #0]
 80035d4:	2300      	movs	r3, #0
 80035d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	f383 8811 	msr	BASEPRI, r3
}
 80035de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80035e0:	bf00      	nop
 80035e2:	3708      	adds	r7, #8
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	e000ed04 	.word	0xe000ed04

080035ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <vPortSetupTimerInterrupt+0x34>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80035f6:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <vPortSetupTimerInterrupt+0x38>)
 80035f8:	2200      	movs	r2, #0
 80035fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80035fc:	4b0a      	ldr	r3, [pc, #40]	; (8003628 <vPortSetupTimerInterrupt+0x3c>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a0a      	ldr	r2, [pc, #40]	; (800362c <vPortSetupTimerInterrupt+0x40>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	099b      	lsrs	r3, r3, #6
 8003608:	4a09      	ldr	r2, [pc, #36]	; (8003630 <vPortSetupTimerInterrupt+0x44>)
 800360a:	3b01      	subs	r3, #1
 800360c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800360e:	4b04      	ldr	r3, [pc, #16]	; (8003620 <vPortSetupTimerInterrupt+0x34>)
 8003610:	2207      	movs	r2, #7
 8003612:	601a      	str	r2, [r3, #0]
}
 8003614:	bf00      	nop
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr
 800361e:	bf00      	nop
 8003620:	e000e010 	.word	0xe000e010
 8003624:	e000e018 	.word	0xe000e018
 8003628:	20000004 	.word	0x20000004
 800362c:	10624dd3 	.word	0x10624dd3
 8003630:	e000e014 	.word	0xe000e014

08003634 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8003634:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003644 <vPortEnableVFP+0x10>
 8003638:	6801      	ldr	r1, [r0, #0]
 800363a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800363e:	6001      	str	r1, [r0, #0]
 8003640:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8003642:	bf00      	nop
 8003644:	e000ed88 	.word	0xe000ed88

08003648 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003650:	2300      	movs	r3, #0
 8003652:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003654:	f7ff faac 	bl	8002bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003658:	4b5d      	ldr	r3, [pc, #372]	; (80037d0 <pvPortMalloc+0x188>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d101      	bne.n	8003664 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003660:	f000 f924 	bl	80038ac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003664:	4b5b      	ldr	r3, [pc, #364]	; (80037d4 <pvPortMalloc+0x18c>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4013      	ands	r3, r2
 800366c:	2b00      	cmp	r3, #0
 800366e:	f040 8093 	bne.w	8003798 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d01d      	beq.n	80036b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8003678:	2208      	movs	r2, #8
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4413      	add	r3, r2
 800367e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f003 0307 	and.w	r3, r3, #7
 8003686:	2b00      	cmp	r3, #0
 8003688:	d014      	beq.n	80036b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	f023 0307 	bic.w	r3, r3, #7
 8003690:	3308      	adds	r3, #8
 8003692:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f003 0307 	and.w	r3, r3, #7
 800369a:	2b00      	cmp	r3, #0
 800369c:	d00a      	beq.n	80036b4 <pvPortMalloc+0x6c>
	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	617b      	str	r3, [r7, #20]
}
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d06e      	beq.n	8003798 <pvPortMalloc+0x150>
 80036ba:	4b47      	ldr	r3, [pc, #284]	; (80037d8 <pvPortMalloc+0x190>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d869      	bhi.n	8003798 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80036c4:	4b45      	ldr	r3, [pc, #276]	; (80037dc <pvPortMalloc+0x194>)
 80036c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80036c8:	4b44      	ldr	r3, [pc, #272]	; (80037dc <pvPortMalloc+0x194>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036ce:	e004      	b.n	80036da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80036d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80036da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d903      	bls.n	80036ec <pvPortMalloc+0xa4>
 80036e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f1      	bne.n	80036d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80036ec:	4b38      	ldr	r3, [pc, #224]	; (80037d0 <pvPortMalloc+0x188>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d050      	beq.n	8003798 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80036f6:	6a3b      	ldr	r3, [r7, #32]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2208      	movs	r2, #8
 80036fc:	4413      	add	r3, r2
 80036fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	6a3b      	ldr	r3, [r7, #32]
 8003706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	1ad2      	subs	r2, r2, r3
 8003710:	2308      	movs	r3, #8
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	429a      	cmp	r2, r3
 8003716:	d91f      	bls.n	8003758 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4413      	add	r3, r2
 800371e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003720:	69bb      	ldr	r3, [r7, #24]
 8003722:	f003 0307 	and.w	r3, r3, #7
 8003726:	2b00      	cmp	r3, #0
 8003728:	d00a      	beq.n	8003740 <pvPortMalloc+0xf8>
	__asm volatile
 800372a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800372e:	f383 8811 	msr	BASEPRI, r3
 8003732:	f3bf 8f6f 	isb	sy
 8003736:	f3bf 8f4f 	dsb	sy
 800373a:	613b      	str	r3, [r7, #16]
}
 800373c:	bf00      	nop
 800373e:	e7fe      	b.n	800373e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	1ad2      	subs	r2, r2, r3
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003752:	69b8      	ldr	r0, [r7, #24]
 8003754:	f000 f90c 	bl	8003970 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003758:	4b1f      	ldr	r3, [pc, #124]	; (80037d8 <pvPortMalloc+0x190>)
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	4a1d      	ldr	r2, [pc, #116]	; (80037d8 <pvPortMalloc+0x190>)
 8003764:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003766:	4b1c      	ldr	r3, [pc, #112]	; (80037d8 <pvPortMalloc+0x190>)
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	4b1d      	ldr	r3, [pc, #116]	; (80037e0 <pvPortMalloc+0x198>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d203      	bcs.n	800377a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003772:	4b19      	ldr	r3, [pc, #100]	; (80037d8 <pvPortMalloc+0x190>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	4a1a      	ldr	r2, [pc, #104]	; (80037e0 <pvPortMalloc+0x198>)
 8003778:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	685a      	ldr	r2, [r3, #4]
 800377e:	4b15      	ldr	r3, [pc, #84]	; (80037d4 <pvPortMalloc+0x18c>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	431a      	orrs	r2, r3
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378a:	2200      	movs	r2, #0
 800378c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800378e:	4b15      	ldr	r3, [pc, #84]	; (80037e4 <pvPortMalloc+0x19c>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	3301      	adds	r3, #1
 8003794:	4a13      	ldr	r2, [pc, #76]	; (80037e4 <pvPortMalloc+0x19c>)
 8003796:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003798:	f7ff fa18 	bl	8002bcc <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d101      	bne.n	80037a6 <pvPortMalloc+0x15e>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80037a2:	f7fc feb9 	bl	8000518 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <pvPortMalloc+0x17e>
	__asm volatile
 80037b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037b4:	f383 8811 	msr	BASEPRI, r3
 80037b8:	f3bf 8f6f 	isb	sy
 80037bc:	f3bf 8f4f 	dsb	sy
 80037c0:	60fb      	str	r3, [r7, #12]
}
 80037c2:	bf00      	nop
 80037c4:	e7fe      	b.n	80037c4 <pvPortMalloc+0x17c>
	return pvReturn;
 80037c6:	69fb      	ldr	r3, [r7, #28]
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3728      	adds	r7, #40	; 0x28
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	2000845c 	.word	0x2000845c
 80037d4:	20008470 	.word	0x20008470
 80037d8:	20008460 	.word	0x20008460
 80037dc:	20008454 	.word	0x20008454
 80037e0:	20008464 	.word	0x20008464
 80037e4:	20008468 	.word	0x20008468

080037e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d04d      	beq.n	8003896 <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80037fa:	2308      	movs	r3, #8
 80037fc:	425b      	negs	r3, r3
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4413      	add	r3, r2
 8003802:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	685a      	ldr	r2, [r3, #4]
 800380c:	4b24      	ldr	r3, [pc, #144]	; (80038a0 <vPortFree+0xb8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10a      	bne.n	800382c <vPortFree+0x44>
	__asm volatile
 8003816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800381a:	f383 8811 	msr	BASEPRI, r3
 800381e:	f3bf 8f6f 	isb	sy
 8003822:	f3bf 8f4f 	dsb	sy
 8003826:	60fb      	str	r3, [r7, #12]
}
 8003828:	bf00      	nop
 800382a:	e7fe      	b.n	800382a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <vPortFree+0x62>
	__asm volatile
 8003834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003838:	f383 8811 	msr	BASEPRI, r3
 800383c:	f3bf 8f6f 	isb	sy
 8003840:	f3bf 8f4f 	dsb	sy
 8003844:	60bb      	str	r3, [r7, #8]
}
 8003846:	bf00      	nop
 8003848:	e7fe      	b.n	8003848 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	4b14      	ldr	r3, [pc, #80]	; (80038a0 <vPortFree+0xb8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d01e      	beq.n	8003896 <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d11a      	bne.n	8003896 <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	685a      	ldr	r2, [r3, #4]
 8003864:	4b0e      	ldr	r3, [pc, #56]	; (80038a0 <vPortFree+0xb8>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	43db      	mvns	r3, r3
 800386a:	401a      	ands	r2, r3
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003870:	f7ff f99e 	bl	8002bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	685a      	ldr	r2, [r3, #4]
 8003878:	4b0a      	ldr	r3, [pc, #40]	; (80038a4 <vPortFree+0xbc>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4413      	add	r3, r2
 800387e:	4a09      	ldr	r2, [pc, #36]	; (80038a4 <vPortFree+0xbc>)
 8003880:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003882:	6938      	ldr	r0, [r7, #16]
 8003884:	f000 f874 	bl	8003970 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003888:	4b07      	ldr	r3, [pc, #28]	; (80038a8 <vPortFree+0xc0>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	3301      	adds	r3, #1
 800388e:	4a06      	ldr	r2, [pc, #24]	; (80038a8 <vPortFree+0xc0>)
 8003890:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003892:	f7ff f99b 	bl	8002bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003896:	bf00      	nop
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20008470 	.word	0x20008470
 80038a4:	20008460 	.word	0x20008460
 80038a8:	2000846c 	.word	0x2000846c

080038ac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80038b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038b6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80038b8:	4b27      	ldr	r3, [pc, #156]	; (8003958 <prvHeapInit+0xac>)
 80038ba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d00c      	beq.n	80038e0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3307      	adds	r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0307 	bic.w	r3, r3, #7
 80038d2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	4a1f      	ldr	r2, [pc, #124]	; (8003958 <prvHeapInit+0xac>)
 80038dc:	4413      	add	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80038e4:	4a1d      	ldr	r2, [pc, #116]	; (800395c <prvHeapInit+0xb0>)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80038ea:	4b1c      	ldr	r3, [pc, #112]	; (800395c <prvHeapInit+0xb0>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	4413      	add	r3, r2
 80038f6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80038f8:	2208      	movs	r2, #8
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1a9b      	subs	r3, r3, r2
 80038fe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	f023 0307 	bic.w	r3, r3, #7
 8003906:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	4a15      	ldr	r2, [pc, #84]	; (8003960 <prvHeapInit+0xb4>)
 800390c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800390e:	4b14      	ldr	r3, [pc, #80]	; (8003960 <prvHeapInit+0xb4>)
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	2200      	movs	r2, #0
 8003914:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003916:	4b12      	ldr	r3, [pc, #72]	; (8003960 <prvHeapInit+0xb4>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2200      	movs	r2, #0
 800391c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	1ad2      	subs	r2, r2, r3
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800392c:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <prvHeapInit+0xb4>)
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	4a0a      	ldr	r2, [pc, #40]	; (8003964 <prvHeapInit+0xb8>)
 800393a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	4a09      	ldr	r2, [pc, #36]	; (8003968 <prvHeapInit+0xbc>)
 8003942:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003944:	4b09      	ldr	r3, [pc, #36]	; (800396c <prvHeapInit+0xc0>)
 8003946:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800394a:	601a      	str	r2, [r3, #0]
}
 800394c:	bf00      	nop
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr
 8003958:	20000454 	.word	0x20000454
 800395c:	20008454 	.word	0x20008454
 8003960:	2000845c 	.word	0x2000845c
 8003964:	20008464 	.word	0x20008464
 8003968:	20008460 	.word	0x20008460
 800396c:	20008470 	.word	0x20008470

08003970 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003978:	4b28      	ldr	r3, [pc, #160]	; (8003a1c <prvInsertBlockIntoFreeList+0xac>)
 800397a:	60fb      	str	r3, [r7, #12]
 800397c:	e002      	b.n	8003984 <prvInsertBlockIntoFreeList+0x14>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	60fb      	str	r3, [r7, #12]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	429a      	cmp	r2, r3
 800398c:	d8f7      	bhi.n	800397e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	68ba      	ldr	r2, [r7, #8]
 8003998:	4413      	add	r3, r2
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	429a      	cmp	r2, r3
 800399e:	d108      	bne.n	80039b2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	685a      	ldr	r2, [r3, #4]
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	441a      	add	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	68ba      	ldr	r2, [r7, #8]
 80039bc:	441a      	add	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d118      	bne.n	80039f8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4b15      	ldr	r3, [pc, #84]	; (8003a20 <prvInsertBlockIntoFreeList+0xb0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d00d      	beq.n	80039ee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685a      	ldr	r2, [r3, #4]
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	441a      	add	r2, r3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	e008      	b.n	8003a00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80039ee:	4b0c      	ldr	r3, [pc, #48]	; (8003a20 <prvInsertBlockIntoFreeList+0xb0>)
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	601a      	str	r2, [r3, #0]
 80039f6:	e003      	b.n	8003a00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d002      	beq.n	8003a0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003a0e:	bf00      	nop
 8003a10:	3714      	adds	r7, #20
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	20008454 	.word	0x20008454
 8003a20:	2000845c 	.word	0x2000845c

08003a24 <__libc_init_array>:
 8003a24:	b570      	push	{r4, r5, r6, lr}
 8003a26:	4d0d      	ldr	r5, [pc, #52]	; (8003a5c <__libc_init_array+0x38>)
 8003a28:	4c0d      	ldr	r4, [pc, #52]	; (8003a60 <__libc_init_array+0x3c>)
 8003a2a:	1b64      	subs	r4, r4, r5
 8003a2c:	10a4      	asrs	r4, r4, #2
 8003a2e:	2600      	movs	r6, #0
 8003a30:	42a6      	cmp	r6, r4
 8003a32:	d109      	bne.n	8003a48 <__libc_init_array+0x24>
 8003a34:	4d0b      	ldr	r5, [pc, #44]	; (8003a64 <__libc_init_array+0x40>)
 8003a36:	4c0c      	ldr	r4, [pc, #48]	; (8003a68 <__libc_init_array+0x44>)
 8003a38:	f000 f820 	bl	8003a7c <_init>
 8003a3c:	1b64      	subs	r4, r4, r5
 8003a3e:	10a4      	asrs	r4, r4, #2
 8003a40:	2600      	movs	r6, #0
 8003a42:	42a6      	cmp	r6, r4
 8003a44:	d105      	bne.n	8003a52 <__libc_init_array+0x2e>
 8003a46:	bd70      	pop	{r4, r5, r6, pc}
 8003a48:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a4c:	4798      	blx	r3
 8003a4e:	3601      	adds	r6, #1
 8003a50:	e7ee      	b.n	8003a30 <__libc_init_array+0xc>
 8003a52:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a56:	4798      	blx	r3
 8003a58:	3601      	adds	r6, #1
 8003a5a:	e7f2      	b.n	8003a42 <__libc_init_array+0x1e>
 8003a5c:	08003adc 	.word	0x08003adc
 8003a60:	08003adc 	.word	0x08003adc
 8003a64:	08003adc 	.word	0x08003adc
 8003a68:	08003ae0 	.word	0x08003ae0

08003a6c <memset>:
 8003a6c:	4402      	add	r2, r0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d100      	bne.n	8003a76 <memset+0xa>
 8003a74:	4770      	bx	lr
 8003a76:	f803 1b01 	strb.w	r1, [r3], #1
 8003a7a:	e7f9      	b.n	8003a70 <memset+0x4>

08003a7c <_init>:
 8003a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7e:	bf00      	nop
 8003a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a82:	bc08      	pop	{r3}
 8003a84:	469e      	mov	lr, r3
 8003a86:	4770      	bx	lr

08003a88 <_fini>:
 8003a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a8a:	bf00      	nop
 8003a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8e:	bc08      	pop	{r3}
 8003a90:	469e      	mov	lr, r3
 8003a92:	4770      	bx	lr
